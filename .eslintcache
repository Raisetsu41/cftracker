[{"F:\\web\\react\\codeforces-api\\src\\index.js":"1","F:\\web\\react\\codeforces-api\\src\\App.js":"2","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js":"3","F:\\web\\react\\codeforces-api\\src\\data\\store.js":"4","F:\\web\\react\\codeforces-api\\src\\components\\Card.js":"5","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js":"6","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js":"7","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js":"8","F:\\web\\react\\codeforces-api\\src\\components\\Menu.js":"9","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js":"10","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js":"11","F:\\web\\react\\codeforces-api\\src\\util\\constants.js":"12","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js":"13","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js":"14","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js":"15","F:\\web\\react\\codeforces-api\\src\\components\\Pagination.js":"16","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js":"17"},{"size":806,"mtime":1613735479823,"results":"18","hashOfConfig":"19"},{"size":1422,"mtime":1614339796319,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":2877,"mtime":1614241196432,"results":"22","hashOfConfig":"19"},{"size":940,"mtime":1613975766605,"results":"23","hashOfConfig":"19"},{"size":3599,"mtime":1614241302783,"results":"24","hashOfConfig":"19"},{"size":719,"mtime":1614239778432,"results":"25","hashOfConfig":"19"},{"size":4653,"mtime":1614239939205,"results":"26","hashOfConfig":"19"},{"size":1788,"mtime":1614162865441,"results":"27","hashOfConfig":"19"},{"size":487,"mtime":1613730924343,"results":"28","hashOfConfig":"19"},{"size":733,"mtime":1614237850708,"results":"29","hashOfConfig":"19"},{"size":94,"mtime":1614014116893,"results":"30","hashOfConfig":"19"},{"size":12151,"mtime":1614357428381,"results":"31","hashOfConfig":"19"},{"size":6150,"mtime":1614338826974,"results":"32","hashOfConfig":"19"},{"size":4108,"mtime":1614245175458,"results":"33","hashOfConfig":"19"},{"size":1619,"mtime":1614336963904,"results":"34","hashOfConfig":"19"},{"size":1609,"mtime":1614338038495,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1pnglh",{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"38"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"38"},"F:\\web\\react\\codeforces-api\\src\\index.js",[],["82","83"],"F:\\web\\react\\codeforces-api\\src\\App.js",["84","85","86","87"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"./components/Card\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  fetchContestList,\n  fetchProblemList,\n  fetchUserSubmissions,\n} from \"./data/actions/fetchActions\";\n\nimport Menu, { CONTEST, PROBLEMS } from \"./components/Menu\";\nimport ProblemPage from \"./components/problem/ProblemPage\";\nimport ContestPage from \"./components/contest/ContestPage\";\n\nfunction App(props) {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    document.title = \"BashForces\";\n  }, []);\n  //console.log(contestList);\n  // const props = useSelector(state => state);\n  const activateLasers = () => {\n    fetchProblemList(dispatch);\n    fetchUserSubmissions(dispatch);\n    fetchContestList(dispatch);\n    //console.log(state);\n  };\n  console.log(props);\n\n  return (\n    <div className=\"App container-fluid bg-dark\">\n      <div className=\"menu\">\n        <Menu />\n      </div>\n      <header className=\"App-header text-light\">{}</header>\n      <button onClick={activateLasers}>Activate Lasers</button>\n\n      <Switch>\n        <Route path={PROBLEMS} component={ProblemPage} />\n        <Route strict path={CONTEST} component={ContestPage}/>\n\n      </Switch>\n      <footer>\n        All rights reserved by @Bashem\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.js",["88","89","90","91"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  userSubmissionsReducer,\r\n  problemListReducer,\r\n  errorReducer,\r\n  unsolvedProblemsReducer,\r\n  contestReducer,\r\n} from \"./reducers/fetchReducers\";\r\n\r\nexport const contestList = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 1476,\r\n      name: \"Educational Codeforces Round 103 (Rated for Div. 2)\",\r\n      type: \"ICPC\",\r\n      phase: \"FINISHED\",\r\n      frozen: false,\r\n      durationSeconds: 7200,\r\n      startTimeSeconds: 1611930900,\r\n      relativeTimeSeconds: 418636,\r\n    },\r\n  ],\r\n};\r\n\r\nconst problem = {\r\n  status: \"OK\",\r\n  result: {\r\n    problems: [\r\n      {\r\n        contestId: 1478,\r\n        index: \"C\",\r\n        name: \"Nezzar and Symmetric Array\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1500,\r\n        rating: 1700,\r\n        tags: [\"implementation\", \"math\", \"sortings\"],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst submissions = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 105129023,\r\n      contestId: 1368,\r\n      creationTimeSeconds: 1611387508,\r\n      relativeTimeSeconds: 2147483647,\r\n      problem: {\r\n        contestId: 1368,\r\n        index: \"D\",\r\n        name: \"AND, OR and square sum\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1750,\r\n        rating: 1700,\r\n        tags: [\"bitmasks\", \"greedy\", \"math\"],\r\n      },\r\n      author: {\r\n        contestId: 1368,\r\n        members: [{ handle: \"bashem\" }],\r\n        participantType: \"PRACTICE\",\r\n        ghost: false,\r\n        startTimeSeconds: 1592491500,\r\n      },\r\n      programmingLanguage: \"GNU C++14\",\r\n      verdict: \"OK\",\r\n      testset: \"TESTS\",\r\n      passedTestCount: 17,\r\n      timeConsumedMillis: 109,\r\n      memoryConsumedBytes: 1638400,\r\n    },\r\n  ],\r\n};\r\n\r\nconst middlewre = [thunk, logger];\r\n\r\nconst combinedReducers = combineReducers({\r\n  userSubmissions: userSubmissionsReducer,\r\n  problemList: problemListReducer,\r\n  contestList: contestReducer,\r\n});\r\n\r\nconst newCombinedReducers = (state, action) => {\r\n  const intermediateReducer = combinedReducers(state, action);\r\n  //console.log(intermediateReducer.problemList);\r\n\r\n  return {\r\n    userSubmissions: intermediateReducer.userSubmissions,\r\n    problemList: {\r\n      problems: intermediateReducer.problemList.problems,\r\n      error: intermediateReducer.problemList.error,\r\n      tags: intermediateReducer.problemList.tags,\r\n      loading: intermediateReducer.problemList.loading,\r\n    },\r\n    contestList: {\r\n      contests: intermediateReducer.contestList.contests,\r\n      error: intermediateReducer.contestList.error,\r\n      loading: intermediateReducer.contestList.loading,\r\n      problems: intermediateReducer.problemList.problems,\r\n    },\r\n  };\r\n};\r\n\r\nconst store = createStore(\r\n  newCombinedReducers,\r\n  {},\r\n  applyMiddleware(...middlewre)\r\n);\r\n\r\nexport default store;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Card.js",["92"],"import React, { useEffect, useState } from \"react\";\r\n\r\nexport function IndividualProblem(params) {}\r\n\r\nfunction Card(id, name) {\r\n  const [solveCount, setSolveCount] = useState(0);\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  return (\r\n    <div className=\"card bg-light\" key={id}>\r\n      <h3 className=\"text-secondary\">\r\n        {id} , {name} , {solveCount}\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function contestCard(contest) {\r\n  \r\n}\r\n\r\nexport function problemCard(problem) {\r\n  return (\r\n    <div className=\"card bg-dark\" key={problem.id}>\r\n      <div className=\"card-header d-flex justify-content-between text-light\">\r\n        <div className=\"id font-weight-bold\">\r\n          {problem.id}\r\n        </div>\r\n        <div className=\"name\">{problem.name}</div>\r\n        <div className=\"rating\">{problem.rating}</div>\r\n\r\n        <div className=\"solvedCount\">{problem.solvedCount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js",["93"],"import { sortByContestId } from \"../../util/sortMethods\";\r\nimport {\r\n  ERROR_FETCHING,\r\n  ERROR_FETCHING_CONTEST_LIST,\r\n  ERROR_FETCHING_PROBLEMS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_CONTEST_LIST,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING_CONTEST_LIST,\r\n  LOADING_PROBLEM_LIST,\r\n  LOADING_USER_SUBMISSIONS,\r\n} from \"../actions/types\";\r\n\r\nexport const SOLVED_PROBLEMS = \"solvedProblems\";\r\nexport const ATTEMPTED_PROBLEMS = \"attemptedProblems\";\r\nexport const SOLVED_CONTESTS = \"solvedContests\";\r\nexport const ATTEMPTED_CONTESTS = \"attemptedContests\";\r\n\r\nconst submissionsInitialState = {\r\n  [SOLVED_PROBLEMS]: new Set(),\r\n  [ATTEMPTED_PROBLEMS]: new Set(),\r\n  [SOLVED_CONTESTS]: new Set(),\r\n  [ATTEMPTED_CONTESTS]: new Set(),\r\n  error: \"\",\r\n  loading: false,\r\n};\r\n\r\nexport const userSubmissionsReducer = (\r\n  initState = submissionsInitialState,\r\n  action\r\n) => {\r\n  let currentState = submissionsInitialState;\r\n  switch (action.type) {\r\n    case FETCH_USER_SUBMISSIONS:\r\n      action.payload.forEach((element) => {\r\n        let contestId = element.problem.contestId.toString();\r\n        let verdict = element.verdict;\r\n        let problemIndex = element.problem.index;\r\n        if (verdict === \"OK\") {\r\n          currentState[SOLVED_PROBLEMS].add(contestId + problemIndex);\r\n          currentState[SOLVED_CONTESTS].add(contestId);\r\n        } else {\r\n          currentState[ATTEMPTED_PROBLEMS].add(contestId + problemIndex);\r\n          currentState[ATTEMPTED_CONTESTS].add(contestId);\r\n        }\r\n      });\r\n\r\n      for (let id of currentState[SOLVED_PROBLEMS]) {\r\n        currentState[ATTEMPTED_PROBLEMS].delete(id);\r\n      }\r\n\r\n      for (let contestId of currentState[SOLVED_CONTESTS])\r\n        currentState[ATTEMPTED_CONTESTS].delete(contestId);\r\n\r\n      return {\r\n        ...submissionsInitialState,\r\n        ...currentState,\r\n      };\r\n    case ERROR_FETCHING_USER_SUBMISSIONS:\r\n      return {\r\n        ...submissionsInitialState,\r\n        error: \"Error Fetching Submissions\",\r\n      };\r\n    case LOADING_USER_SUBMISSIONS:\r\n      return {\r\n        ...submissionsInitialState,\r\n        loading: true,\r\n      };\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n\r\nconst problemListInitialState = {\r\n  problems: [],\r\n  error: \"\",\r\n  tags: new Set(),\r\n  loading: false,\r\n};\r\n\r\nexport const problemListReducer = (\r\n  initState = problemListInitialState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case FETCH_PROBLEM_LIST:\r\n      action.payload.sort(sortByContestId);\r\n      let tags = new Set();\r\n\r\n      for (let problem of action.payload)\r\n        for (let tag of problem.tags) tags.add(tag);\r\n\r\n      return {\r\n        ...problemListInitialState,\r\n        problems: action.payload,\r\n        error: \"\",\r\n        tags: tags,\r\n      };\r\n    case ERROR_FETCHING_PROBLEMS:\r\n      return { ...problemListInitialState, error: action.payload };\r\n    case LOADING_PROBLEM_LIST:\r\n      return { ...problemListInitialState, loading: true };\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n\r\nconst contestListInitialState = { contests: [], error: \"\", loading: false };\r\n\r\nexport const contestReducer = (initState = contestListInitialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_CONTEST_LIST:\r\n      return {\r\n        ...contestListInitialState,\r\n        ...{ contests: action.payload, error: \"\" },\r\n      };\r\n    case ERROR_FETCHING_CONTEST_LIST:\r\n      return { ...contestListInitialState, error: action.payload };\r\n    case LOADING_CONTEST_LIST:\r\n      return { ...contestListInitialState, loading: true };\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js",["94","95","96","97","98"],"// import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nimport {\r\n  ERROR_FETCHING,\r\n  ERROR_FETCHING_CONTEST_LIST,\r\n  ERROR_FETCHING_PROBLEMS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_CONTEST_LIST,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_USER_SUBMISSIONS,\r\n  FINISHED,\r\n  LOADING_CONTEST_LIST,\r\n  LOADING_PROBLEM_LIST,\r\n  LOADING_USER_SUBMISSIONS,\r\n} from \"./types\";\r\nimport store from \"../store\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst allContest = \"https://codeforces.com/api/contest.list\";\r\nlet id = 5,\r\n  user = \"h\";\r\nconst individualContestURL =\r\n  \"https://codeforces.com/api/contest.status?contestId=\" +\r\n  id +\r\n  \"&handle=\" +\r\n  user;\r\nlet contestId = 5;\r\nconst path = \"https://codeforces.com/contest/\" + contestId;\r\nconst problemSet = \"https://codeforces.com/api/problemset.problems\";\r\nconst userStatus = \"https://codeforces.com/api/user.status?handle=bashem\";\r\n\r\nconst errorFecthing = (type, message) => {\r\n  return {\r\n    type: type,\r\n    payload: message,\r\n  };\r\n};\r\n\r\nconst load = (type) => {\r\n  return {type: type}\r\n};\r\n\r\nexport const fetchUserSubmissions = (dispatch) => {\r\n  dispatch(load(LOADING_USER_SUBMISSIONS));\r\n  fetch(userStatus)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return errorFecthing(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"Status Failed\"\r\n          );\r\n        console.log(result);\r\n        return dispatch({\r\n          type: FETCH_USER_SUBMISSIONS,\r\n          payload: result.result,\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          errorFecthing(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"ERROR in User Submission\" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      // console.log(e);\r\n      return dispatch(\r\n        errorFecthing(\r\n          ERROR_FETCHING_USER_SUBMISSIONS,\r\n          \"ERROR in User Submission\" + e\r\n        )\r\n      );\r\n    });\r\n};\r\n\r\nexport const fetchProblemList = (dispatch) => {\r\n  dispatch(load(LOADING_PROBLEM_LIST));\r\n  fetch(problemSet)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(\r\n            errorFecthing(ERROR_FETCHING_PROBLEMS, \"Problem Status Failed\")\r\n          );\r\n        //   console.log(result);\r\n        let problems = result.result.problems;\r\n        problems = problems.filter((problem) => (\"contestId\" in problem));\r\n        console.log(result.result);\r\n        for (let i = 0; i < result.result.problemStatistics.length; i++) {\r\n          if (!(\"rating\" in problems[i])) problems[i][\"rating\"] = -1;\r\n          problems[i][\"solvedCount\"] =\r\n            result.result.problemStatistics[i].solvedCount;\r\n          problems[i][\"id\"] = problems[i].contestId.toString()+problems[i].index;\r\n        }\r\n\r\n\r\n        return dispatch({\r\n          type: FETCH_PROBLEM_LIST,\r\n          payload: problems,\r\n        });\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        errorFecthing(ERROR_FETCHING_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n      );\r\n    });\r\n};\r\n\r\nexport const fetchContestList = (dispatch) => {\r\n  dispatch(load(LOADING_CONTEST_LIST));\r\n  fetch(allContest)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(\r\n            errorFecthing(\r\n              ERROR_FETCHING_CONTEST_LIST,\r\n              \"FAiled to fethc contestList\"\r\n            )\r\n          );\r\n        let res = result.result.filter((contest) => contest.phase === FINISHED);\r\n\r\n        return dispatch({\r\n          type: FETCH_CONTEST_LIST,\r\n          payload: res,\r\n        });\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        errorFecthing(\r\n          ERROR_FETCHING_CONTEST_LIST,\r\n          \"FAiled to fethc contestList\"\r\n        )\r\n      );\r\n    });\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Menu.js",["99","100"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const PROBLEMS = \"/problems\";\r\nexport const CONTEST = \"/contests\";\r\n\r\nconst Menu = () => {\r\n  return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light p-2\">\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarTogglerDemo03\"\r\n          aria-controls=\"navbarTogglerDemo03\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n          BashForces\r\n        </Link>\r\n\r\n        <div\r\n          className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n          id=\"navbarTogglerDemo03\">\r\n          <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n            <li className=\"nav-item active\">\r\n              <Link to={ PROBLEMS} className=\"nav-link\" href=\"#\">\r\n                Problem List\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to={ CONTEST} className=\"nav-link\" href=\"#\">\r\n                Contest\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"form-inline d-flex my-2 my-lg-0\">\r\n            <input\r\n              className=\"form-control mr-sm-2\"\r\n              type=\"search\"\r\n              placeholder=\"Handle\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button\r\n              className=\"btn btn-outline-success my-2 my-sm-0\"\r\n              type=\"submit\">\r\n              Enter\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\constants.js",[],["101","102"],"F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js",["103","104","105","106","107","108","109","110","111","112","113"],"F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js",["114","115","116","117","118","119","120","121"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getRandomInteger,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport Fuse from \"fuse.js\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport ContestList from \"./ContestList\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../data/reducers/fetchReducers\";\r\nimport Pagination from \"../Pagination\";\r\n\r\nconst ContestPage = () => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const [contestList, setContestList] = useState({ contests: [], error: \"\" });\r\n  const [randomContest, setRandomContest] = useState(-1);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = 2;\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    search: \"\",\r\n    showDate: false,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n  const [selected, setSelected] = useState(0);\r\n  \r\n  const contestStatus = (contest) => {\r\n    if (state.userSubmissions[SOLVED_CONTESTS].has(contest.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_CONTESTS].has(contest.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const filterContest = (contest) => {\r\n    let solveStatus = filterState.solveStatus.includes(contestStatus(contest));\r\n    return solveStatus;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let contests = state.contestList.contests;\r\n\r\n    if (filterState.search.trim().length !== 0) {\r\n      contests = new Fuse(contests, {\r\n        keys: [\"name\", \"id\"],\r\n        ignoreLocation: true,\r\n        threshold: 0.1,\r\n        shouldSort: false,\r\n      })\r\n        .search(filterState.search)\r\n        .map((element) => element.item);\r\n    }\r\n\r\n    const newContestList = contests.filter((contest) => filterContest(contest));\r\n\r\n    setContestList({ ...contestList, contests: newContestList });\r\n    setRandomContest(-1);\r\n  }, [state, filterState]);\r\n\r\n  const showContest = (solveStatus) => {\r\n    setFilterState({ ...filterState, solveStatus });\r\n  };\r\n\r\n  const chooseRandom = () => {\r\n    if (contestList.contests.length === 0) return;\r\n    setRandomContest(getRandomInteger(0, contestList.contests.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(\r\n      contestList.contests.length - 1,\r\n      lo + filterState.perPage - 1\r\n    );\r\n\r\n    if (lo > high) return [];\r\n    return contestList.contests.slice(lo, high);\r\n  };\r\n\r\n  return (\r\n    <div className=\"div\">\r\n      <div className=\"menu\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark p-2\">\r\n          <div\r\n            className=\"collapse navbar-collapse d-flex justify-content-between\"\r\n            id=\"navbarTogglerDemo03\">\r\n            <ul className=\"navbar navbar-dark bg-dark list-unstyled\">\r\n              <li className=\"nav-item\">\r\n                <button\r\n                  className=\"btn btn-secondary nav-link m-2\"\r\n                  onClick={() => showContest([SOLVED, ATTEMPTED, UNSOLVED])}\r\n                  href=\"#\">\r\n                  All Contests\r\n                </button>\r\n              </li>\r\n              <li className=\"nav-item active\">\r\n                <button\r\n                  className=\"btn btn-secondary nav-link m-2\"\r\n                  onClick={() => showContest([ATTEMPTED, UNSOLVED])}\r\n                  href=\"#\">\r\n                  Unsolved Contests\r\n                </button>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <button\r\n                  className=\"btn btn-secondary nav-link m-2\"\r\n                  onClick={() => showContest([UNSOLVED])}\r\n                  href=\"#\">\r\n                  Never Attempted Contests\r\n                </button>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <button className=\"nav-link\" onClick={chooseRandom} href=\"#\">\r\n                  Choose Random\r\n                </button>\r\n              </li>\r\n              <form\r\n                className=\"form-inline d-flex my-2 my-lg-0\"\r\n                onSubmit={(e) => e.preventDefault()}>\r\n                <input\r\n                  className=\"form-control mr-sm-2\"\r\n                  type=\"text\"\r\n                  placeholder=\"Problem Name or Id\"\r\n                  aria-label=\"Search\"\r\n                  value={filterState.search}\r\n                  onChange={(e) =>\r\n                    setFilterState({ ...filterState, search: e.target.value })\r\n                  }\r\n                />\r\n                <input\r\n                  className=\"form-control mr-sm-2\"\r\n                  type=\"number\"\r\n                  aria-label=\"Search\"\r\n                  value={filterState.perPage}\r\n                  onChange={(e) =>\r\n                    setFilterState({ ...filterState, perPage: e.target.value })\r\n                  }\r\n                />\r\n              </form>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      {/* <PaginationComponent /> */}\r\n\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n\r\n      <table className=\"table table-bordered table-dark\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">Contest ID</th>\r\n            <th scope=\"col\">Contest Name</th>\r\n            <th scope=\"col\">A</th>\r\n            <th scope=\"col\">B</th>\r\n            <th scope=\"col\">C</th>\r\n            <th scope=\"col\">D</th>\r\n            <th scope=\"col\">E</th>\r\n            <th scope=\"col\">F</th>\r\n            <th scope=\"col\">G</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <ContestList\r\n            contestlist={\r\n              randomContest === -1\r\n                ? paginate()\r\n                : [contestList.contests[randomContest]]\r\n            }\r\n            filterState={filterState}\r\n          />\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js",["122","123","124","125"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../data/reducers/fetchReducers\";\r\n\r\nconst ContestList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = 2;\r\n\r\n  const contestStatus = (contest) => {\r\n    if (state.userSubmissions[SOLVED_CONTESTS].has(contest.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_CONTESTS].has(contest.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const getInfo = (contestId, index) => {\r\n    let l = 0,\r\n      r = state.problemList.problems.length - 1,\r\n      ans = -1;\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (\r\n        state.problemList.problems[mid].contestId === contestId &&\r\n        state.problemList.problems[mid].index === index\r\n      ) {\r\n        ans = mid;\r\n        break;\r\n      }\r\n\r\n      if (\r\n       state. problemList.problems[mid].contestId > contestId ||\r\n        (state.problemList.problems[mid].contestId === contestId &&\r\n          state.problemList.problems[mid].index > index)\r\n      ) {\r\n        r = mid - 1;\r\n      } else l = mid + 1;\r\n    }\r\n\r\n    const EMPTY = \"EMPTY bg-dark\";\r\n    if (ans === -1 && index.length !== 1) return <td className={EMPTY}></td>;\r\n\r\n    if (ans === -1 && index.length === 1) {\r\n      let arr = [];\r\n      for (let i = 1; ; i++) {\r\n        let res = getInfo(contestId, index + i);\r\n        if (res.props.className === EMPTY) break;\r\n        arr.push(res);\r\n      }\r\n\r\n      if (arr.length < 3)\r\n        return (\r\n          <td className=\"inside p-0\" key={contestId + index}>\r\n            {arr.map((element) => element)}\r\n          </td>\r\n        );\r\n      else\r\n        return (\r\n          <td className=\"inside p-0\" key={contestId + index}>\r\n            More than 4\r\n          </td>\r\n        );\r\n    }\r\n\r\n    let solved = state.userSubmissions[SOLVED_PROBLEMS].has(contestId + index);\r\n    let attempted = state.userSubmissions[ATTEMPTED_PROBLEMS].has(\r\n      contestId + index\r\n    );\r\n\r\n    let name = state.problemList.problems[ans].name;\r\n    let id = state.problemList.problems[ans].id;\r\n    if (name.length > 15) name = name.substring(0, 14) + \"...\";\r\n\r\n    let className =\r\n      (solved ? \"bg-success\" : attempted ? \"bg-danger\" : \"\") + \" p-1\";\r\n\r\n    return (\r\n      <td className={className} key={id}>\r\n        <a\r\n          className=\"text-light text-decoration-none\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          tabIndex=\"0\"\r\n          data-bs-toggle=\"tooltip\"\r\n          title={\r\n            state.problemList.problems[ans].name +\r\n            \", Rating:\" +\r\n            state.problemList.problems[ans].rating\r\n          }\r\n          href={getProblemUrl(contestId, index)}>\r\n          {index + \". \"}\r\n          {name}\r\n        </a>\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const contestCard = (contest) => {\r\n    return (\r\n      <tr key={contest.id}>\r\n        <th scope=\"row\">{contest.id}</th>\r\n        <td>\r\n          <div className=\"name\">\r\n            <a\r\n              className=\"text-light text-decoration-none\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title={formateDate(contest.startTimeSeconds)}\r\n              href={getContestUrl(contest.id)}>\r\n              {contest.name}\r\n            </a>\r\n          </div>\r\n          {props.filterState.showDate ? (\r\n            <div className=\"time\">{formateDate(contest.startTimeSeconds)}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </td>\r\n        {[...Array(7)].map((x, i) => {\r\n          return getInfo(contest.id, charInc(\"A\", i));\r\n        })}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n\tconsole.log(props.contestlist);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.contestlist.map((contest) => {\r\n        return contestCard(contest);\r\n      })} \r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ContestList;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Pagination.js",["126"],"import react from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Pagination = (props) => {\r\n  let linkClassName = \"page-link text-light bg-dark\";\r\n  let linkWrapperClassName = \"page-item\";\r\n\r\n  let pageCount =\r\n    props.perPage > 0\r\n      ? Math.floor(\r\n          (parseInt(props.totalCount) + parseInt(props.perPage) - 1) /\r\n            parseInt(props.perPage)\r\n        )\r\n      : 0;\r\n\r\n  return (\r\n    <nav aria-label=\"Page navigation example\">\r\n      <ReactPaginate\r\n        previousLabel={\"previous\"}\r\n        nextLabel={\"next\"}\r\n        breakLabel={\"...\"}\r\n        breakClassName={\"break-me\"}\r\n        pageCount={props.perPage > 0 ? pageCount : 0}\r\n        marginPagesDisplayed={2}\r\n        pageRangeDisplayed={5}\r\n        nextClassName={linkWrapperClassName}\r\n        initialPage={props.selected}\r\n        forcePage={props.selected}\r\n        pageClassName={linkWrapperClassName}\r\n        previousClassName={linkWrapperClassName}\r\n        pageLinkClassName={linkClassName}\r\n        nextLinkClassName={linkClassName}\r\n        previousLinkClassName={linkClassName}\r\n        onPageChange={(e) => props.pageSelected(e.selected)}\r\n        containerClassName={\"pagination text-light justify-content-center\"}\r\n        subContainerClassName={\"pages pagination\"}\r\n        activeClassName={\"active border-success\"}\r\n      />\r\n    </nav>\r\n  );\r\n};\r\n\r\nPagination.propTypes = {\r\n  perPage: PropTypes.number.isRequired,\r\n  selected: PropTypes.number.isRequired,\r\n  pageSelected: PropTypes.func,\r\n  totalCount: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Pagination;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js",["127","128","129"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../data/reducers/fetchReducers\";\r\n\r\nconst ProblemList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem) => {\r\n    let classes = \"bg-dark\";\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS) classes = \"bg-success\";\r\n    else if (problemState === ATTEMPTED_PROBLEMS) classes = \"bg-danger\";\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{problem.id}</td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className=\"text-light text-decoration-none\"\r\n            target=\"_blank\"\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>{problem.rating}</td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.problems.map((problem) => {\r\n        return ProblemCard(problem);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n",{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":2,"column":28,"nodeType":"136","messageId":"137","endLine":2,"endColumn":36},{"ruleId":"134","severity":1,"message":"138","line":3,"column":8,"nodeType":"136","messageId":"137","endLine":3,"endColumn":12},{"ruleId":"134","severity":1,"message":"139","line":4,"column":27,"nodeType":"136","messageId":"137","endLine":4,"endColumn":33},{"ruleId":"134","severity":1,"message":"140","line":4,"column":50,"nodeType":"136","messageId":"137","endLine":4,"endColumn":54},{"ruleId":"134","severity":1,"message":"141","line":7,"column":3,"nodeType":"136","messageId":"137","endLine":7,"endColumn":15},{"ruleId":"134","severity":1,"message":"142","line":8,"column":3,"nodeType":"136","messageId":"137","endLine":8,"endColumn":26},{"ruleId":"134","severity":1,"message":"143","line":28,"column":7,"nodeType":"136","messageId":"137","endLine":28,"endColumn":14},{"ruleId":"134","severity":1,"message":"144","line":45,"column":7,"nodeType":"136","messageId":"137","endLine":45,"endColumn":18},{"ruleId":"134","severity":1,"message":"145","line":6,"column":22,"nodeType":"136","messageId":"137","endLine":6,"endColumn":35},{"ruleId":"134","severity":1,"message":"146","line":3,"column":3,"nodeType":"136","messageId":"137","endLine":3,"endColumn":17},{"ruleId":"134","severity":1,"message":"146","line":4,"column":3,"nodeType":"136","messageId":"137","endLine":4,"endColumn":17},{"ruleId":"134","severity":1,"message":"147","line":16,"column":8,"nodeType":"136","messageId":"137","endLine":16,"endColumn":13},{"ruleId":"134","severity":1,"message":"148","line":18,"column":10,"nodeType":"136","messageId":"137","endLine":18,"endColumn":21},{"ruleId":"134","severity":1,"message":"149","line":23,"column":7,"nodeType":"136","messageId":"137","endLine":23,"endColumn":27},{"ruleId":"134","severity":1,"message":"150","line":29,"column":7,"nodeType":"136","messageId":"137","endLine":29,"endColumn":11},{"ruleId":"134","severity":1,"message":"151","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"135","line":1,"column":28,"nodeType":"136","messageId":"137","endLine":1,"endColumn":36},{"ruleId":"130","replacedBy":"152"},{"ruleId":"132","replacedBy":"153"},{"ruleId":"134","severity":1,"message":"154","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":17},{"ruleId":"134","severity":1,"message":"155","line":5,"column":3,"nodeType":"136","messageId":"137","endLine":5,"endColumn":16},{"ruleId":"134","severity":1,"message":"156","line":6,"column":3,"nodeType":"136","messageId":"137","endLine":6,"endColumn":18},{"ruleId":"134","severity":1,"message":"157","line":7,"column":3,"nodeType":"136","messageId":"137","endLine":7,"endColumn":18},{"ruleId":"158","severity":1,"message":"159","line":85,"column":29,"nodeType":"160","messageId":"161","endLine":85,"endColumn":31},{"ruleId":"162","severity":1,"message":"163","line":95,"column":6,"nodeType":"164","endLine":95,"endColumn":26,"suggestions":"165"},{"ruleId":"166","severity":1,"message":"167","line":154,"column":13,"nodeType":"168","endLine":154,"endColumn":69},{"ruleId":"158","severity":1,"message":"169","line":200,"column":37,"nodeType":"160","messageId":"161","endLine":200,"endColumn":39},{"ruleId":"158","severity":1,"message":"159","line":206,"column":35,"nodeType":"160","messageId":"161","endLine":206,"endColumn":37},{"ruleId":"158","severity":1,"message":"159","line":208,"column":38,"nodeType":"160","messageId":"161","endLine":208,"endColumn":40},{"ruleId":"170","severity":1,"message":"171","line":241,"column":27,"nodeType":"172","endLine":249,"endColumn":28},{"ruleId":"134","severity":1,"message":"155","line":4,"column":3,"nodeType":"136","messageId":"137","endLine":4,"endColumn":16},{"ruleId":"134","severity":1,"message":"173","line":5,"column":3,"nodeType":"136","messageId":"137","endLine":5,"endColumn":14},{"ruleId":"134","severity":1,"message":"174","line":6,"column":3,"nodeType":"136","messageId":"137","endLine":6,"endColumn":10},{"ruleId":"134","severity":1,"message":"175","line":8,"column":3,"nodeType":"136","messageId":"137","endLine":8,"endColumn":16},{"ruleId":"134","severity":1,"message":"176","line":11,"column":8,"nodeType":"136","messageId":"137","endLine":11,"endColumn":21},{"ruleId":"134","severity":1,"message":"177","line":15,"column":3,"nodeType":"136","messageId":"137","endLine":15,"endColumn":21},{"ruleId":"134","severity":1,"message":"178","line":17,"column":3,"nodeType":"136","messageId":"137","endLine":17,"endColumn":18},{"ruleId":"162","severity":1,"message":"179","line":71,"column":6,"nodeType":"164","endLine":71,"endColumn":26,"suggestions":"180"},{"ruleId":"134","severity":1,"message":"151","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"135","line":1,"column":28,"nodeType":"136","messageId":"137","endLine":1,"endColumn":36},{"ruleId":"134","severity":1,"message":"181","line":23,"column":9,"nodeType":"136","messageId":"137","endLine":23,"endColumn":22},{"ruleId":"182","severity":1,"message":"183","line":45,"column":8,"nodeType":"184","messageId":"185","endLine":45,"endColumn":26,"fix":"186"},{"ruleId":"134","severity":1,"message":"187","line":1,"column":8,"nodeType":"136","messageId":"137","endLine":1,"endColumn":13},{"ruleId":"134","severity":1,"message":"151","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"135","line":1,"column":28,"nodeType":"136","messageId":"137","endLine":1,"endColumn":36},{"ruleId":"188","severity":1,"message":"189","line":29,"column":11,"nodeType":"168","endLine":32,"endColumn":68},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Router' is defined but never used.","'Link' is defined but never used.","'errorReducer' is defined but never used.","'unsolvedProblemsReducer' is defined but never used.","'problem' is assigned a value but never used.","'submissions' is assigned a value but never used.","'setSolveCount' is assigned a value but never used.","'ERROR_FETCHING' is defined but never used.","'store' is defined but never used.","'useDispatch' is defined but never used.","'individualContestURL' is assigned a value but never used.","'path' is assigned a value but never used.","'useEffect' is defined but never used.",["190"],["191"],"'connect' is defined but never used.","'getProblemUrl' is defined but never used.","'getLocalStorage' is defined but never used.","'setLocalStorage' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterProblem' and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.","ArrayExpression",["192"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'formateDate' is defined but never used.","'charInc' is defined but never used.","'getContestUrl' is defined but never used.","'ReactPaginate' is defined but never used.","'ATTEMPTED_PROBLEMS' is defined but never used.","'SOLVED_PROBLEMS' is defined but never used.","React Hook useEffect has missing dependencies: 'contestList' and 'filterContest'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["193"],"'contestStatus' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property problemList.","MemberExpression","unexpectedWhitespace",{"range":"194","text":"195"},"'react' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},[1140,1142],".","Update the dependencies array to be: [state, filterState, problemList, filterProblem]",{"range":"200","text":"201"},"Update the dependencies array to be: [state, filterState, contestList, filterContest]",{"range":"202","text":"203"},[3089,3109],"[state, filterState, problemList, filterProblem]",[2025,2045],"[state, filterState, contestList, filterContest]"]