[{"F:\\web\\react\\codeforces-api\\src\\index.tsx":"1","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx":"2","F:\\web\\react\\codeforces-api\\src\\App.tsx":"3","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx":"4","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx":"5","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx":"6","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx":"7","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx":"8","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx":"9","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts":"11","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts":"12","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts":"13","F:\\web\\react\\codeforces-api\\src\\data\\store.ts":"14","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts":"16","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts":"18","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts":"19","F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts":"20","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts":"21","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts":"22","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts":"23","F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts":"24","F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts":"25","F:\\web\\react\\codeforces-api\\src\\util\\Theme.ts":"26"},{"size":767,"mtime":1618398758923,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1617775898144,"results":"29","hashOfConfig":"28"},{"size":2222,"mtime":1621494900582,"results":"30","hashOfConfig":"28"},{"size":4844,"mtime":1621491815524,"results":"31","hashOfConfig":"28"},{"size":18382,"mtime":1621492968063,"results":"32","hashOfConfig":"28"},{"size":1147,"mtime":1618400510901,"results":"33","hashOfConfig":"28"},{"size":15003,"mtime":1621519199971,"results":"34","hashOfConfig":"28"},{"size":2339,"mtime":1621494968956,"results":"35","hashOfConfig":"28"},{"size":1584,"mtime":1621168438759,"results":"36","hashOfConfig":"28"},{"size":6538,"mtime":1621514827980,"results":"37","hashOfConfig":"28"},{"size":410,"mtime":1617879429205,"results":"38","hashOfConfig":"28"},{"size":1669,"mtime":1620794512714,"results":"39","hashOfConfig":"28"},{"size":998,"mtime":1618488169808,"results":"40","hashOfConfig":"28"},{"size":6803,"mtime":1621491928483,"results":"41","hashOfConfig":"28"},{"size":3020,"mtime":1618571435369,"results":"42","hashOfConfig":"28"},{"size":5154,"mtime":1621176742871,"results":"43","hashOfConfig":"28"},{"size":5618,"mtime":1621490463549,"results":"44","hashOfConfig":"28"},{"size":2868,"mtime":1621180005531,"results":"45","hashOfConfig":"28"},{"size":2343,"mtime":1621492535703,"results":"46","hashOfConfig":"28"},{"size":181555,"mtime":1620645259517,"results":"47","hashOfConfig":"28"},{"size":3714,"mtime":1621492598501,"results":"48","hashOfConfig":"28"},{"size":1115,"mtime":1618485329167,"results":"49","hashOfConfig":"28"},{"size":2510,"mtime":1618665333803,"results":"50","hashOfConfig":"28"},{"size":141,"mtime":1618487216532,"results":"51","hashOfConfig":"28"},{"size":586,"mtime":1618579869282,"results":"52","hashOfConfig":"28"},{"size":1167,"mtime":1621178296468,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1flmqtp",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"F:\\web\\react\\codeforces-api\\src\\index.tsx",[],["116","117"],"F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx",[],["118","119"],"F:\\web\\react\\codeforces-api\\src\\App.tsx",["120","121"],"import \"./App.css\";\r\nimport { useEffect } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Menu from \"./components/Menu\";\r\nimport ProblemPage from \"./components/problem/ProblemPage\";\r\nimport ContestPage from \"./components/contest/ContestPage\";\r\nimport HomePage from \"./components/home/HomePage\";\r\nimport { PROBLEMS, CONTESTS } from \"./util/constants\";\r\nimport { RootStateType } from \"./data/store\";\r\nimport { ThemesType } from \"./util/Theme\";\r\n\r\nfunction App() {\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    if (state.appState.themeMod === ThemesType.DARK) {\r\n      document.body.classList.add(\"bg-dark\");\r\n      document.body.classList.remove(\"bg-light\");\r\n    } else {\r\n      document.body.classList.add(\"bg-light\");\r\n      document.body.classList.remove(\"bg-dark\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (state.appState.themeMod === ThemesType.DARK) {\r\n      document.body.classList.add(\"bg-dark\");\r\n      document.body.classList.remove(\"bg-light\");\r\n    } else {\r\n      document.body.classList.add(\"bg-light\");\r\n      document.body.classList.remove(\"bg-dark\");\r\n    }\r\n  }, [state.appState.themeMod]);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"App container-fluid p-0 min-vh-100 d-flex justify-content-between  flex-column \" +\r\n        state.appState.theme.bgText\r\n      }>\r\n      <div className=\"top\">\r\n        <div className=\"menu w-100\">\r\n          <Menu />\r\n        </div>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route path={PROBLEMS} component={ProblemPage} />\r\n          <Route strict path={CONTESTS} component={ContestPage} />\r\n        </Switch>\r\n      </div>\r\n      <footer\r\n        className={\r\n          \"text-center justify-content-center p-3 w-100 align-self-end \" +\r\n          state.appState.theme.text\r\n        }>\r\n        All rights reserved by{\" \"}\r\n        <a\r\n          href=\"https://codeforces.com/profile/bashem\"\r\n          className={state.appState.theme.text + \" text-decoration-none\"}\r\n          target=\"_blank\">\r\n          @Bashem\r\n        </a>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx",["122","123","124","125"],"import { faMoon } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faSun, faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport  { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  changeAppState,\r\n  fetchContestList,\r\n  fetchProblemList,\r\n  fetchSharedProblemList,\r\n} from \"../data/actions/fetchActions\";\r\nimport { AppReducerType } from \"../data/actions/types\";\r\nimport { fetchUserSubmissions, fetchUsers } from \"../data/actions/userActions\";\r\nimport { RootStateType } from \"../data/store\";\r\nimport { PROBLEMS, CONTESTS } from \"../util/constants\";\r\nimport { ThemesType } from \"../util/Theme\";\r\n\r\nconst Menu = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const [handle, setHandle] = useState(\r\n    state.userList.handles.length ? state.userList.handles.toString() : \"\"\r\n  );\r\n  console.log(state.userList.handles.toString());\r\n  useEffect(() => {\r\n    fetchProblemList(dispatch);\r\n    fetchContestList(dispatch);\r\n    fetchSharedProblemList(dispatch);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    sync();\r\n  }, [state.userList]);\r\n\r\n  const sync = () => {\r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n  };\r\n\r\n  const submitUser = () => {\r\n    // Notification.info({\r\n    //   title: \"User submitted!\",\r\n    //   duration: 200,\r\n    //   description: \"hh\",\r\n    // });\r\n    // toast.error(\"🦄 Wow so easy!\", {\r\n    //   position: \"bottom-right\",\r\n    //   autoClose: 2001,\r\n    //   hideProgressBar: false,\r\n    //   closeOnClick: true,\r\n    //   pauseOnHover: true,\r\n    //   draggable: true,\r\n    //   progress: undefined,\r\n    // });\r\n    fetchUsers(dispatch, handle);\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={\"navbar navbar-expand-lg p-2 ps-4 pe-4 \" + state.appState.theme.navbar}>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarTogglerDemo03\"\r\n        aria-controls=\"navbarTogglerDemo03\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n        CFTracker\r\n      </Link>\r\n\r\n      <div\r\n        className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n        id=\"navbarTogglerDemo03\">\r\n        <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n          <li className=\"nav-item active\">\r\n            <Link to={PROBLEMS} className=\"nav-link\" href=\"#\">\r\n              Problem List\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={CONTESTS} className=\"nav-link\" href=\"#\">\r\n              Contest\r\n            </Link>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className={\"nav-link\"}\r\n              href=\"#\"\r\n              title=\"Change Theme\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                if (state.appState.themeMod === ThemesType.DARK)\r\n                  changeAppState(\r\n                    dispatch,\r\n                    AppReducerType.CHANGE_THEME,\r\n                    ThemesType.LIGHT\r\n                  );\r\n                else\r\n                  changeAppState(\r\n                    dispatch,\r\n                    AppReducerType.CHANGE_THEME,\r\n                    ThemesType.DARK\r\n                  );\r\n              }}>\r\n              <FontAwesomeIcon\r\n                icon={\r\n                  state.appState.themeMod === ThemesType.DARK ? faMoon : faSun\r\n                }\r\n              />\r\n            </a>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                sync();\r\n              }}\r\n              title=\"Refresh Submissions\"\r\n              href=\"#\">\r\n              <FontAwesomeIcon icon={faSync} />\r\n            </a>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0 nav-item\"\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n                submitUser();\r\n              }}>\r\n              <input\r\n                name=\"handle\"\r\n                className=\"form-control mr-sm-2\"\r\n                type=\"text\"\r\n                placeholder=\"handle1,handle2,..\"\r\n                aria-label=\"handles\"\r\n                value={handle}\r\n                onChange={(e) => setHandle(e.target.value)}\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx",["126","127","128","129","130","131","132","133"],"import { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport { sortByRating, sortBySolveCount } from \"../../util/sortMethods\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n  SEARCH,\r\n  PROBLEMS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport ProblemList from \"./ProblemList\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faSort,\r\n  faSortDown,\r\n  faSortUp,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\nimport { RootStateType } from \"../../data/store\";\r\nimport { changeAppState } from \"../../data/actions/fetchActions\";\r\nimport { AppReducerType } from \"../../data/actions/types\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\nconst ProblemPage = () => {\r\n  const state: RootStateType = useSelector((state) => state);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = -1,\r\n    SORT_BY_RATING = 1,\r\n    SORT_BY_SOLVE = 2,\r\n    ASCENDING = 0,\r\n    DESCENDING = 1;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    rating: { min_rating: -1, max_rating: 4000 },\r\n    tags: new Set(),\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n    sortBy: SORT_BY_SOLVE,\r\n    order: DESCENDING,\r\n  };\r\n\r\n  const [problemList, setProblemList] = useState({ problems: [], error: \"\" });\r\n  const [tagList, setTagList] = useState({ tags: [] });\r\n  const [randomProblem, setRandomProblem] = useState(-1);\r\n  const [selected, setSelected] = useState(0);\r\n  const [perPage, setPerPage] = useState(100);\r\n  const [minRating, setMinRating] = useState(state.appState.problemPage.minRating);\r\n  const [maxRating, setMaxRating] = useState(state.appState.problemPage.maxRating);\r\n  const [showUnrated, setShowUnrated] = useState(true);\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n\r\n  const filterProblem = (problem) => {\r\n    let containTags = false;\r\n\r\n    if (filterState.tags.size === 0) containTags = true;\r\n    else\r\n      for (let tag of problem.tags)\r\n        if (filterState.tags.has(tag)) {\r\n          containTags = true;\r\n          break;\r\n        }\r\n    let ratingInside =\r\n      problem.rating <=maxRating &&\r\n      problem.rating >= minRating;\r\n    // if (problem.rating == -1 && showUnrated == false) ratingInside = false;\r\n    // else if (problem.rating == -1 && showUnrated) ratingInside = true;\r\n    let solveStatus = filterState.solveStatus.includes(getState(problem));\r\n\r\n    let searchIncluded = true;\r\n    let text = filterState.search.toLowerCase().trim();\r\n    if (text.length)\r\n      searchIncluded =\r\n        problem.name.toLowerCase().includes(text) ||\r\n        problem.id.toLowerCase().includes(text);\r\n\r\n    return solveStatus && ratingInside && containTags && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPerPage(state.appState.problemPage.perPage);\r\n    setShowUnrated(state.appState.problemPage.showUnrated);\r\n\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n      });\r\n    if (state.problemList.problems !== undefined) {\r\n      let newState = { problems: [] };\r\n      newState.problems = state.problemList.problems;\r\n\r\n      let used = new Set<string>();\r\n\r\n      newState.problems = newState.problems.filter((problem: Problem) => {\r\n        if (used.has(problem.getId())) return false;\r\n\r\n        return filterProblem(problem);\r\n      });\r\n\r\n      if (filterState.sortBy === SORT_BY_RATING)\r\n        newState.problems.sort(sortByRating);\r\n      else newState.problems.sort(sortBySolveCount);\r\n      if (filterState.order === DESCENDING) newState.problems.reverse();\r\n\r\n      let tags = [];\r\n      for (let tag of state.problemList.tags) tags.push(tag);\r\n      setTagList({ tags });\r\n      setProblemList({ ...problemList, problems: newState.problems });\r\n    }\r\n    setRandomProblem(-1);\r\n    setSelected(0);\r\n  }, [state, filterState]);\r\n\r\n  const sortList = (sortBy) => {\r\n    if (filterState.sortBy === sortBy)\r\n      setFilterState({ ...filterState, order: filterState.order ^ 1 });\r\n    else\r\n      setFilterState({\r\n        ...filterState,\r\n        ...{\r\n          order: sortBy === SORT_BY_RATING ? ASCENDING : DESCENDING,\r\n          sortBy: sortBy,\r\n        },\r\n      });\r\n  };\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const searchData = (e) => {\r\n    setFilterState({ ...filterState, search: e.target.value });\r\n  };\r\n\r\n  const chooseRandom = () => {\r\n    if (problemList.problems.length === 0) return;\r\n    setRandomProblem(getRandomInteger(0, problemList.problems.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * perPage;\r\n    let high = Math.min(problemList.problems.length, lo + perPage);\r\n\r\n    if (lo > high) return [];\r\n    return problemList.problems.slice(lo, high);\r\n  };\r\n\r\n  const nuetral = () => {\r\n    return <FontAwesomeIcon icon={faSort} />;\r\n  };\r\n\r\n  const less = () => {\r\n    return <FontAwesomeIcon icon={faSortUp} />;\r\n  };\r\n\r\n  const greater = () => {\r\n    return <FontAwesomeIcon icon={faSortDown} />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs d-flex justify-content-between container border-0 mt-3\">\r\n          <li className=\"nav-item col-4\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0\"\r\n              onSubmit={(e) => e.preventDefault()}>\r\n              <input\r\n                className={\r\n                  \"form-control mr-sm-2 \" + state.appState.theme.bgText\r\n                }\r\n                type=\"text\"\r\n                placeholder=\"Problem Name or Id\"\r\n                aria-label=\"problemSearch\"\r\n                name=\"problemSearch\"\r\n                value={filterState.search}\r\n                onChange={(e) => {\r\n                  setFilterState({\r\n                    ...filterState,\r\n                    search: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n          <li className=\"nav-item text-secondary h-6\">\r\n            Showing {paginate().length} of {problemList.problems.length}\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                type=\"button\"\r\n                className={\"btn nav-link \" + state.appState.theme.btn}\r\n                onClick={chooseRandom}\r\n                title=\"Find Random Problem\">\r\n                <FontAwesomeIcon icon={faRandom} />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className={\"btn nav-link \" + state.appState.theme.btn}\r\n                title=\"Cancel Random\"\r\n                onClick={() => setRandomProblem(-1)}>\r\n                <FontAwesomeIcon icon={faRedo} />\r\n              </button>\r\n            </div>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-bs-toggle=\"modal\"\r\n              data-bs-target=\"#exampleModal\">\r\n              {<FontAwesomeIcon icon={faFilter} />}\r\n            </button>\r\n            <div\r\n              className=\"modal\"\r\n              id=\"exampleModal\"\r\n              tabIndex={-1}\r\n              aria-labelledby=\"exampleModalLabel\"\r\n              aria-hidden=\"true\">\r\n              <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                      Filter\r\n                    </h5>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"></button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <div className=\"group\">\r\n                      <form\r\n                        className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                        onSubmit={(e) => e.preventDefault()}>\r\n                        <div className=\"d-flex justify-content-between w-100\">\r\n                          <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                              <label\r\n                                className=\"input-group-text\"\r\n                                htmlFor=\"inputGroupSelect01\">\r\n                                Per Page\r\n                              </label>\r\n                            </div>\r\n                            <select\r\n                              className=\"custom-select\"\r\n                              id=\"inputGroupSelect01\"\r\n                              value={perPage}\r\n                              onChange={(e) => {\r\n                                let num: number = parseInt(e.target.value);\r\n                                changeAppState(\r\n                                  dispatch,\r\n                                  AppReducerType.CHANGE_PER_PAGE,\r\n                                  num,\r\n                                  false\r\n                                );\r\n                              }}>\r\n                              <option value=\"20\">20</option>\r\n                              <option value=\"50\">50</option>\r\n                              <option value=\"100\">100</option>\r\n                              <option value={problemList.problems.length}>\r\n                                All\r\n                              </option>\r\n                            </select>\r\n                          </div>\r\n                          <div className=\"input-group d-flex justify-content-end\">\r\n                            <button\r\n                              className=\"btn btn-light nav-link h-6\"\r\n                              onClick={() => setFilterState(initFilterState)}\r\n                              title=\"Reset To Default State\">\r\n                              <FontAwesomeIcon icon={faRedoAlt} />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {initFilterState.solveStatus.map((solved) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.solveStatus.includes(solved)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={solved}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            let ind = filterState.solveStatus.indexOf(solved);\r\n                            if (ind != -1)\r\n                              myFilterState.solveStatus.splice(ind, 1);\r\n                            else myFilterState.solveStatus.push(solved);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {solved === SOLVED\r\n                            ? \"Solved\"\r\n                            : solved === ATTEMPTED\r\n                            ? \"Attempted\"\r\n                            : \"Unsolved\"}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <form\r\n                      className=\"\"\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}>\r\n                      <div className=\"d-flex\">\r\n                        <div\r\n                          className=\"input-group pe-1\"\r\n                          title=\"place -1 to show unrated\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Min Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Min Rating\"\r\n                            value={minRating}\r\n                            name={\"minRating\"}\r\n                            onChange={(e) => {\r\n                              let num: number = parseInt(e.target.value);\r\n                              if(num === NaN) num = -1;\r\n                              setMinRating(num);\r\n                              if (num != null && num != undefined)\r\n                                changeAppState(\r\n                                  dispatch,\r\n                                  AppReducerType.CHANGE_MIN_RATING,\r\n                                  num,\r\n                                  false\r\n                                );\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"input-group ps-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Max Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Max Rating\"\r\n                            value={maxRating}\r\n                            name={\"maxRating\"}\r\n                            onChange={(e) => {\r\n                              let num: number = parseInt(e.target.value);\r\n\r\n                              if (num === NaN) num = -1;\r\n                              setMaxRating(num);\r\n                              if (num != null && num != undefined)\r\n                                changeAppState(\r\n                                  dispatch,\r\n                                  AppReducerType.CHANGE_MAX_RATING,\r\n                                  num,\r\n                                  false\r\n                                );\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {tagList.tags.map((tag) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.tags.has(tag)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={tag}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            if (filterState.tags.has(tag))\r\n                              myFilterState.tags.delete(tag);\r\n                            else myFilterState.tags.add(tag);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {tag}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"p-2\">\r\n        <Pagination\r\n          totalCount={problemList.problems.length}\r\n          perPage={perPage}\r\n          selected={selected}\r\n          theme={state.appState.theme}\r\n          pageSelected={(e) => setSelected(e)}\r\n        />\r\n      </div>\r\n      <table\r\n        className={\r\n          \"table table-bordered container \" + state.appState.theme.table\r\n        }>\r\n        <thead className={state.appState.theme.thead}>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">ID</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_RATING)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Rating</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_RATING\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_SOLVE)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Solve Count</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_SOLVE\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {randomProblem === -1 ? (\r\n            <ProblemList problems={paginate()} />\r\n          ) : (\r\n            <ProblemList problems={[problemList.problems[randomProblem]]} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        totalCount={problemList.problems.length}\r\n        perPage={perPage}\r\n        selected={selected}\r\n        theme={state.appState.theme}\r\n        pageSelected={(e) => setSelected(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx",["134","135"],"import React, { useEffect,useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { fetchUsers } from \"../../data/actions/userActions\";\r\nimport { CONTESTS } from \"../../util/constants\";\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst history = useHistory();\r\n\thistory.push(CONTESTS);\r\n\r\n\tconst submitUser = () => {\r\n\t\tfetchUsers(dispatch,handle);\r\n\t}\r\n\r\n  useEffect(() => {\r\n    // fetchProblemList(dispatch);\r\n    // fetchContestList(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\t\t\t{/* <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx",["136","137","138","139"],"F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx",["140","141","142","143","144"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootStateType } from \"../../data/store\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\ninterface ProblemListProps {\r\n  problems: Problem[];\r\n}\r\n\r\nconst ProblemList = ({ problems }: ProblemListProps): JSX.Element => {\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const getState = (problem: Problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem: Problem, index: number) => {\r\n    let classes = state.appState.theme.bg;\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS)\r\n      classes = state.appState.theme.bgSuccess;\r\n    else if (problemState === ATTEMPTED_PROBLEMS)\r\n      classes = state.appState.theme.bgDanger;\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{index + 1}</td>\r\n        <td className={\"id font-weight-bold \" + classes}>\r\n          <a\r\n            className={\"text-decoration-none\" + \" \" + state.appState.theme.text}\r\n            target=\"_blank\"\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.id}\r\n          </a>\r\n        </td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className={\"text-decoration-none\" + \" \" + state.appState.theme.text}\r\n            target=\"_blank\"\r\n            title={problem.tags.toString()}\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>\r\n          {problem.rating != -1 ? problem.rating : \"Not Rated\"}\r\n        </td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {problems.map((problem: Problem, index: number) => {\r\n        return ProblemCard(problem, index);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx",[],"F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx",["145","146","147","148"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootStateType } from \"../../data/store\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Contest from \"../../util/DataTypes/Contest\";\r\n\r\nconst ContestList = (props) => {\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const related = state.sharedProblems.problems;\r\n\r\n  const getProblem = (contestId, index) => {\r\n    let l = 0,\r\n      r = state.problemList.problems.length - 1;\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (\r\n        state.problemList.problems[mid].contestId === contestId &&\r\n        state.problemList.problems[mid].index === index\r\n      )\r\n        return state.problemList.problems[mid];\r\n\r\n      if (\r\n        state.problemList.problems[mid].contestId > contestId ||\r\n        (state.problemList.problems[mid].contestId === contestId &&\r\n          state.problemList.problems[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getStatus = (id: string, solveStatus: string) => {\r\n    let res = state.userSubmissions[solveStatus].has(id);\r\n    return res;\r\n  };\r\n\r\n  const renderProblem = (problem, inside = false) => {\r\n    let solved = getStatus(problem.id, SOLVED_PROBLEMS);\r\n    let attempted = getStatus(problem.id, ATTEMPTED_PROBLEMS);\r\n\r\n    let name = problem.name;\r\n    let id = problem.id;\r\n    // if (name.length > 10) name = name.substring(0, inside ? 9 : 14) + \"...\";\r\n\r\n    let className =\r\n      (solved\r\n        ? state.appState.theme.bgSuccess\r\n        : attempted\r\n        ? state.appState.theme.bgDanger\r\n        : \"\") + (inside ? \" w-50 \" : \" w-100 \");\r\n\r\n    return (\r\n      <div className={className} key={id}>\r\n        <a\r\n          className={\r\n            \"text-decoration-none wrap font-bold p-2 \" +\r\n            state.appState.theme.text\r\n          }\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          tabIndex={0}\r\n          title={problem.name + \", Rating:\" + problem.rating}\r\n          href={getProblemUrl(problem.contestId, problem.index)}>\r\n          {problem.index + \". \"}\r\n          {name}\r\n        </a>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getSharedIndex = (contestId, index) => {\r\n    let l = 0,\r\n      r = related.length - 1;\r\n\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (related[mid].contestId === contestId && related[mid].index === index)\r\n        return mid;\r\n      if (\r\n        related[mid].contestId > contestId ||\r\n        (related[mid].contestId === contestId && related[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getProblemsList = (contestId, index, first = true) => {\r\n    let problem = getProblem(contestId, index);\r\n\r\n    let problems = [];\r\n    if (problem === -1) {\r\n      let problem1 = getProblem(contestId, index + \"1\");\r\n      if (problem1 === -1 && first === true) {\r\n        let sharedIndex = getSharedIndex(contestId, index);\r\n        if (sharedIndex != -1) {\r\n          for (let sharedProblem of related[sharedIndex].shared) {\r\n            let currentGetInfo = getProblemsList(\r\n              sharedProblem.contestId,\r\n              sharedProblem.index,\r\n              false\r\n            );\r\n\r\n            if (currentGetInfo.length === 1 && currentGetInfo[0] === -1)\r\n              continue;\r\n            for (let currentProblem of currentGetInfo) {\r\n              let current = { ...currentProblem };\r\n              current.contestId = contestId;\r\n              current.index = current.index.split(\"\");\r\n              current.index[0] = index.charAt(0);\r\n              current.index = current.index.join(\"\");\r\n              current.id = current.contestId.toString() + index;\r\n              problems.push(current);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        problems.push(problem1);\r\n        for (let c: number = 2; c <= 3; c++) {\r\n          problem1 = getProblem(contestId, index + c.toString());\r\n          if (problem1 === -1) break;\r\n          problems.push(problem1);\r\n        }\r\n      }\r\n    } else problems.push(problem);\r\n\r\n    return problems;\r\n  };\r\n\r\n  const getInfo = (contestId, index) => {\r\n    const EMPTY = \"EMPTY \" + state.appState.theme.bg;\r\n\r\n    let problems = getProblemsList(contestId, index);\r\n\r\n    if (problems.length === 0) {\r\n      return <td key={contestId + index} className={EMPTY + \" w-problem\"}></td>;\r\n    }\r\n\r\n    // if (problems.length === 1) {\r\n    //   return renderProblem(problems[0]);\r\n    // }\r\n\r\n    if (problems.length <= 2) {\r\n      return (\r\n        <td className=\"p-0 w-problem\" key={contestId + index.charAt(0)}>\r\n          <div className=\"d-inline clearfix\">\r\n            {problems.map((element) =>\r\n              renderProblem(element, problems.length != 1)\r\n            )}\r\n          </div>\r\n        </td>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <td className=\"inside p-0 w-problem\" key={contestId + index}>\r\n        More than 2\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const contestCard = (contest, index) => {\r\n    return (\r\n      <tr key={contest.id}>\r\n        <td scope=\"row\" className=\"w-sl p-0\">\r\n          <div className=\"d-inline-block\">{index + 1}</div>\r\n        </td>\r\n        <td scope=\"row\" className=\"w-id p-0\">\r\n          <div className=\"d-inline-block\">{contest.id}</div>\r\n        </td>\r\n        <td className=\"p-0\">\r\n          <div className=\"d-inline-block name\">\r\n            <a\r\n              className={\r\n                \"text-decoration-none wrap font-bold w-contest p-2 \" +\r\n                state.appState.theme.text\r\n              }\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title={formateDate(contest.startTimeSeconds)}\r\n              href={getContestUrl(contest.id)}>\r\n              {contest.name}\r\n            </a>\r\n          </div>\r\n          {props.showDate ? (\r\n            <div className=\"time\">{formateDate(contest.startTimeSeconds)}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </td>\r\n        {[...Array(props.maxIndex)].map((x, i) => {\r\n          return getInfo(contest.id, charInc(\"A\", i));\r\n        })}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.contestlist.map((contest: Contest, index: number) => {\r\n        return contestCard(contest, index);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ContestList;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.ts",["149","150","151","152"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  problemListReducer,\r\n  contestReducer,\r\n  sharedProblemsReducer,\r\n  ContestListStateInterface,\r\n  ProblemListStateInterface,\r\n  SharedProblemInterface,\r\n} from \"./reducers/fetchReducers\";\r\nimport {\r\n  userSubmissionsReducer,\r\n  userReducer,\r\n  SubmissionStateType,\r\n} from \"./reducers/userReducers\";\r\nimport {\r\n  SOLVED_PROBLEMS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  ATTEMPTED_CONTESTS,\r\n} from \"../util/constants\";\r\nimport { AppReducer, AppStateType } from \"./reducers/appReducers\";\r\nimport Problem, { ProblemLite, ProblemShared } from \"../util/DataTypes/Problem\";\r\nimport { sortByCompare } from \"../util/sortMethods\";\r\nimport lowerBound from \"../util/lowerBound\";\r\n\r\nconst middlewre = [thunk, logger];\r\n\r\nconst combinedReducers = combineReducers({\r\n  userSubmissions: userSubmissionsReducer,\r\n  problemList: problemListReducer,\r\n  contestList: contestReducer,\r\n  userList: userReducer,\r\n  sharedProblems: sharedProblemsReducer,\r\n  appState: AppReducer,\r\n});\r\n\r\nexport interface RootStateType {\r\n  userSubmissions: SubmissionStateType;\r\n  problemList: ProblemListStateInterface;\r\n  contestList: ContestListStateInterface;\r\n  userList: any;\r\n  sharedProblems: any;\r\n  appState: AppStateType;\r\n}\r\n\r\nexport class RootStateForSave {\r\n  userSubmissions: SubmissionStateType;\r\n  problemList: ProblemListStateInterface;\r\n  contestList: ContestListStateInterface;\r\n  userList: any;\r\n  sharedProblems: SharedProblemInterface;\r\n  appState: AppStateType;\r\n}\r\n\r\n// const addSharedToProblems = (\r\n//   problemList: Problem[],\r\n//   sharedProblems: ProblemShared[]\r\n// ): Problem[] => {\r\n//   problemList = [...problemList];\r\n//   const addProblems: Problem[] = new Array<Problem>();\r\n//   const added: Set<string> = new Set<string>();\r\n\r\n//   for (let problem of sharedProblems) {\r\n//     let currentProblem: ProblemShared = new ProblemShared(\r\n//       problem.contestId,\r\n//       problem.index,\r\n//       problem.shared\r\n//     );\r\n//     let lb: number = lowerBound(problemList, currentProblem as ProblemLite);\r\n//     if (lb !== problemList.length && currentProblem.equal(problemList[lb])) {\r\n//       for (let sharedProblem of problem.shared) {\r\n//         lb = lowerBound(problemList, sharedProblem as ProblemLite);\r\n//         if (\r\n//           lb === problemList.length ||\r\n//           !sharedProblem.equal(problemList[lb]) ||\r\n//           added.has(problemList[lb].getId())\r\n//         )\r\n//           continue;\r\n//         const newProblem: Problem = new Problem(\r\n//           sharedProblem.contestId,\r\n//           sharedProblem.index,\r\n//           problemList[lb].name,\r\n//           problemList[lb].type,\r\n//           problemList[lb].rating,\r\n//           problemList[lb].getTags(),\r\n//           problemList[lb].solvedCount\r\n//         );\r\n\r\n//         addProblems.push(newProblem);\r\n//         added.add(newProblem.getId());\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   return problemList.concat(addProblems).sort(sortByCompare);\r\n// };\r\n\r\nconst addSharedToSubmissions = (\r\n  userSubmissions: SubmissionStateType,\r\n  sharedProblems: ProblemShared[]\r\n): SubmissionStateType => {\r\n  let currUserSubmissions = userSubmissions.clone();\r\n\r\n  for (let problem of sharedProblems) {\r\n    let currentProblem: ProblemShared = new ProblemShared(\r\n      problem.contestId,\r\n      problem.index,\r\n      problem.shared\r\n    );\r\n\r\n    if (userSubmissions[SOLVED_PROBLEMS].has(currentProblem.getId())) {\r\n      for (let sharedProblem of problem.shared) {\r\n        let sharedObject: ProblemShared = new ProblemShared(\r\n          sharedProblem.contestId,\r\n          sharedProblem.index\r\n        );\r\n        currUserSubmissions[SOLVED_PROBLEMS].add(sharedObject.getId());\r\n        if (sharedObject.contestId) {\r\n          currUserSubmissions[SOLVED_CONTESTS].add(sharedObject.contestId);\r\n          // if (sharedObject.contestId == 1508){\r\n          //   console.log(sharedObject.contestId);\r\n          // }\r\n        }\r\n      }\r\n    } else if (\r\n      userSubmissions[ATTEMPTED_PROBLEMS].has(currentProblem.getId())\r\n    ) {\r\n      for (let sharedProblem of problem.shared) {\r\n        let sharedObject: ProblemShared = new ProblemShared(\r\n          sharedProblem.contestId,\r\n          sharedProblem.index\r\n        );\r\n\r\n        currUserSubmissions[ATTEMPTED_PROBLEMS].add(sharedObject.getId());\r\n        if (sharedObject.contestId)\r\n          currUserSubmissions[ATTEMPTED_CONTESTS].add(sharedObject.contestId);\r\n      }\r\n    }\r\n  }\r\n\r\n  // console.log(\"What!\");\r\n\r\n  return currUserSubmissions;\r\n};\r\n\r\nconst newCombinedReducers = (state: any, action: any): RootStateType => {\r\n  const intermediateReducer = combinedReducers(state, action);\r\n\r\n  intermediateReducer.userSubmissions = addSharedToSubmissions(\r\n    intermediateReducer.userSubmissions,\r\n    intermediateReducer.sharedProblems.problems\r\n  );\r\n\r\n  // intermediateReducer.problemList.problems = addSharedToProblems(\r\n  //   intermediateReducer.problemList.problems,\r\n  //   intermediateReducer.sharedProblems.problems\r\n  // );\r\n\r\n  return {\r\n    userSubmissions: intermediateReducer.userSubmissions,\r\n    problemList: intermediateReducer.problemList,\r\n    contestList: intermediateReducer.contestList,\r\n    userList: intermediateReducer.userList,\r\n    sharedProblems: intermediateReducer.sharedProblems,\r\n    appState: intermediateReducer.appState,\r\n  };\r\n};\r\n\r\nconst saveToLocalStorage = (state: RootStateType) => {\r\n  try {\r\n    const newState = {\r\n      userList: state.userList,\r\n      appState: state.appState,\r\n    };\r\n    const serializedState: string = JSON.stringify(newState);\r\n    localStorage.setItem(\"statev2\", serializedState);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst loadFromLocalStorage = (): any => {\r\n  try {\r\n    const serialLizedState = localStorage.getItem(\"statev2\");\r\n    console.log(serialLizedState);\r\n    if (serialLizedState == null) return {};\r\n    const persedData = JSON.parse(serialLizedState);\r\n\r\n    let appState = new AppStateType();\r\n    if (persedData.appState) {\r\n      appState.init(persedData.appState);\r\n    }\r\n    persedData.appState = appState;\r\n    console.log(persedData);\r\n    return persedData;\r\n  } catch (e) {\r\n    console.log(e);\r\n    return {};\r\n  }\r\n};\r\n\r\nconst store = createStore(\r\n  newCombinedReducers,\r\n  loadFromLocalStorage(),\r\n  applyMiddleware(...middlewre)\r\n);\r\n\r\nstore.subscribe(() => saveToLocalStorage(store.getState()));\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts",[],["153","154"],"F:\\web\\react\\codeforces-api\\src\\util\\Theme.ts",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"155","replacedBy":"159"},{"ruleId":"157","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":25,"column":6,"nodeType":"163","endLine":25,"endColumn":8,"suggestions":"164"},{"ruleId":"165","severity":1,"message":"166","line":60,"column":9,"nodeType":"167","endLine":63,"endColumn":27},{"ruleId":"161","severity":1,"message":"168","line":32,"column":6,"nodeType":"163","endLine":32,"endColumn":8,"suggestions":"169"},{"ruleId":"161","severity":1,"message":"170","line":36,"column":6,"nodeType":"163","endLine":36,"endColumn":22,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":93,"column":13,"nodeType":"167","endLine":111,"endColumn":18},{"ruleId":"172","severity":1,"message":"173","line":121,"column":13,"nodeType":"167","endLine":128,"endColumn":24},{"ruleId":"174","severity":1,"message":"175","line":60,"column":10,"nodeType":"176","messageId":"177","endLine":60,"endColumn":21},{"ruleId":"161","severity":1,"message":"178","line":128,"column":6,"nodeType":"163","endLine":128,"endColumn":26,"suggestions":"179"},{"ruleId":"174","severity":1,"message":"180","line":150,"column":9,"nodeType":"176","messageId":"177","endLine":150,"endColumn":19},{"ruleId":"181","severity":1,"message":"182","line":315,"column":37,"nodeType":"183","messageId":"184","endLine":315,"endColumn":39},{"ruleId":"185","severity":1,"message":"186","line":348,"column":34,"nodeType":"183","messageId":"187","endLine":348,"endColumn":45},{"ruleId":"181","severity":1,"message":"182","line":350,"column":54,"nodeType":"183","messageId":"184","endLine":350,"endColumn":56},{"ruleId":"185","severity":1,"message":"186","line":373,"column":35,"nodeType":"183","messageId":"187","endLine":373,"endColumn":46},{"ruleId":"181","severity":1,"message":"182","line":375,"column":54,"nodeType":"183","messageId":"184","endLine":375,"endColumn":56},{"ruleId":"174","severity":1,"message":"188","line":9,"column":18,"nodeType":"176","messageId":"177","endLine":9,"endColumn":27},{"ruleId":"174","severity":1,"message":"189","line":15,"column":8,"nodeType":"176","messageId":"177","endLine":15,"endColumn":18},{"ruleId":"174","severity":1,"message":"190","line":17,"column":3,"nodeType":"176","messageId":"177","endLine":17,"endColumn":12},{"ruleId":"161","severity":1,"message":"191","line":92,"column":6,"nodeType":"163","endLine":92,"endColumn":26,"suggestions":"192"},{"ruleId":"181","severity":1,"message":"182","line":238,"column":60,"nodeType":"183","messageId":"184","endLine":238,"endColumn":62},{"ruleId":"181","severity":1,"message":"182","line":289,"column":41,"nodeType":"183","messageId":"184","endLine":289,"endColumn":43},{"ruleId":"165","severity":1,"message":"166","line":34,"column":11,"nodeType":"167","endLine":37,"endColumn":68},{"ruleId":"193","severity":1,"message":"194","line":35,"column":47,"nodeType":"183","messageId":"195","endLine":35,"endColumn":48},{"ruleId":"165","severity":1,"message":"166","line":42,"column":11,"nodeType":"167","endLine":46,"endColumn":68},{"ruleId":"193","severity":1,"message":"194","line":43,"column":47,"nodeType":"183","messageId":"195","endLine":43,"endColumn":48},{"ruleId":"181","severity":1,"message":"182","line":51,"column":27,"nodeType":"183","messageId":"184","endLine":51,"endColumn":29},{"ruleId":"181","severity":1,"message":"182","line":107,"column":25,"nodeType":"183","messageId":"184","endLine":107,"endColumn":27},{"ruleId":"181","severity":1,"message":"182","line":159,"column":54,"nodeType":"183","messageId":"184","endLine":159,"endColumn":56},{"ruleId":"196","severity":1,"message":"197","line":176,"column":13,"nodeType":"198","endLine":176,"endColumn":24},{"ruleId":"196","severity":1,"message":"197","line":179,"column":13,"nodeType":"198","endLine":179,"endColumn":24},{"ruleId":"174","severity":1,"message":"199","line":24,"column":8,"nodeType":"176","messageId":"177","endLine":24,"endColumn":15},{"ruleId":"174","severity":1,"message":"200","line":24,"column":19,"nodeType":"176","messageId":"177","endLine":24,"endColumn":30},{"ruleId":"174","severity":1,"message":"201","line":25,"column":10,"nodeType":"176","messageId":"177","endLine":25,"endColumn":23},{"ruleId":"174","severity":1,"message":"202","line":26,"column":8,"nodeType":"176","messageId":"177","endLine":26,"endColumn":18},{"ruleId":"155","replacedBy":"203"},{"ruleId":"157","replacedBy":"204"},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],["205"],["206"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state.appState.themeMod'. Either include it or remove the dependency array.","ArrayExpression",["207"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["208"],"React Hook useEffect has a missing dependency: 'sync'. Either include it or remove the dependency array.",["209"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","@typescript-eslint/no-unused-vars","'showUnrated' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'filterProblem', 'history', and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.",["210"],"'searchData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","'setHandle' is assigned a value but never used.","'submitUser' is assigned a value but never used.","'faRedoAlt' is defined but never used.","React Hook useEffect has missing dependencies: 'contestList', 'filterContest', and 'history'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["211"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","'Problem' is defined but never used.","'ProblemLite' is defined but never used.","'sortByCompare' is defined but never used.","'lowerBound' is defined but never used.",["205"],["206"],"no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},"Update the dependencies array to be: [state.appState.themeMod]",{"range":"222","text":"223"},"Update the dependencies array to be: [dispatch]",{"range":"224","text":"225"},"Update the dependencies array to be: [state.userList, sync]",{"range":"226","text":"227"},"Update the dependencies array to be: [state, filterState, history, problemList, filterProblem]",{"range":"228","text":"229"},"Update the dependencies array to be: [state, filterState, history, contestList, filterContest]",{"range":"230","text":"231"},[898,900],"[state.appState.themeMod]",[1214,1216],"[dispatch]",[1261,1277],"[state.userList, sync]",[4326,4346],"[state, filterState, history, problemList, filterProblem]",[2957,2977],"[state, filterState, history, contestList, filterContest]"]