[{"F:\\web\\react\\codeforces-api\\src\\index.tsx":"1","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx":"2","F:\\web\\react\\codeforces-api\\src\\App.tsx":"3","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx":"4","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx":"5","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx":"6","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx":"7","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx":"8","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx":"9","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts":"11","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts":"12","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts":"13","F:\\web\\react\\codeforces-api\\src\\data\\store.ts":"14","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts":"16","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts":"18","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts":"19","F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts":"20","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts":"21","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts":"22","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts":"23","F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts":"24","F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts":"25","F:\\web\\react\\codeforces-api\\src\\util\\Theme.ts":"26"},{"size":767,"mtime":1618398758923,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1617775898144,"results":"29","hashOfConfig":"28"},{"size":2004,"mtime":1621177108881,"results":"30","hashOfConfig":"28"},{"size":5002,"mtime":1621168269606,"results":"31","hashOfConfig":"28"},{"size":18234,"mtime":1621168461310,"results":"32","hashOfConfig":"28"},{"size":1147,"mtime":1618400510901,"results":"33","hashOfConfig":"28"},{"size":13745,"mtime":1621168475540,"results":"34","hashOfConfig":"28"},{"size":2105,"mtime":1621176404276,"results":"35","hashOfConfig":"28"},{"size":1584,"mtime":1621168438759,"results":"36","hashOfConfig":"28"},{"size":6342,"mtime":1621179813925,"results":"37","hashOfConfig":"28"},{"size":410,"mtime":1617879429205,"results":"38","hashOfConfig":"28"},{"size":1669,"mtime":1620794512714,"results":"39","hashOfConfig":"28"},{"size":998,"mtime":1618488169808,"results":"40","hashOfConfig":"28"},{"size":6674,"mtime":1621179875054,"results":"41","hashOfConfig":"28"},{"size":3020,"mtime":1618571435369,"results":"42","hashOfConfig":"28"},{"size":5154,"mtime":1621176742871,"results":"43","hashOfConfig":"28"},{"size":5345,"mtime":1621180045523,"results":"44","hashOfConfig":"28"},{"size":2868,"mtime":1621180005531,"results":"45","hashOfConfig":"28"},{"size":2301,"mtime":1621161389008,"results":"46","hashOfConfig":"28"},{"size":181555,"mtime":1620645259517,"results":"47","hashOfConfig":"28"},{"size":3414,"mtime":1621179972404,"results":"48","hashOfConfig":"28"},{"size":1115,"mtime":1618485329167,"results":"49","hashOfConfig":"28"},{"size":2510,"mtime":1618665333803,"results":"50","hashOfConfig":"28"},{"size":141,"mtime":1618487216532,"results":"51","hashOfConfig":"28"},{"size":586,"mtime":1618579869282,"results":"52","hashOfConfig":"28"},{"size":1167,"mtime":1621178296468,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1flmqtp",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"F:\\web\\react\\codeforces-api\\src\\index.tsx",[],["114","115"],"F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx",[],["116","117"],"F:\\web\\react\\codeforces-api\\src\\App.tsx",["118","119"],"import \"./App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Menu from \"./components/Menu\";\r\nimport ProblemPage from \"./components/problem/ProblemPage\";\r\nimport ContestPage from \"./components/contest/ContestPage\";\r\nimport HomePage from \"./components/home/HomePage\";\r\nimport { PROBLEMS, CONTESTS } from \"./util/constants\";\r\nimport { RootStateType } from \"./data/store\";\r\nimport { ThemesType } from \"./util/Theme\";\r\n\r\nfunction App() {\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    if (state.appState.themeMod === ThemesType.DARK) {\r\n      document.body.classList.add(\"bg-dark\");\r\n      document.body.classList.remove(\"bg-light\");\r\n    } else {\r\n      document.body.classList.add(\"bg-light\");\r\n      document.body.classList.remove(\"bg-dark\");\r\n    }\r\n\r\n    document.title = \"CFTracker\";\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (state.appState.themeMod === ThemesType.DARK) {\r\n      document.body.classList.add(\"bg-dark\");\r\n      document.body.classList.remove(\"bg-light\");\r\n    } else {\r\n      document.body.classList.add(\"bg-light\");\r\n      document.body.classList.remove(\"bg-dark\");\r\n    }\r\n  }, [state.appState.themeMod]);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"App container-fluid p-0 min-vh-100 d-flex justify-content-between  flex-column \" + state.appState.theme.bgText\r\n      }>\r\n      <div className=\"top\">\r\n        <div className=\"menu w-100\">\r\n          <Menu />\r\n        </div>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route path={PROBLEMS} component={ProblemPage} />\r\n          <Route strict path={CONTESTS} component={ContestPage} />\r\n        </Switch>\r\n      </div>\r\n      <footer className=\"text-light text-center justify-content-center p-3 w-100 align-self-end\">\r\n        All rights reserved by @Bashem\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx",["120","121","122","123","124","125","126"],"import { faMoon } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faSun, faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  changeAppState,\r\n  fetchContestList,\r\n  fetchProblemList,\r\n  fetchSharedProblemList,\r\n} from \"../data/actions/fetchActions\";\r\nimport { AppReducerType } from \"../data/actions/types\";\r\nimport { fetchUserSubmissions, fetchUsers } from \"../data/actions/userActions\";\r\nimport { RootState, RootStateType } from \"../data/store\";\r\nimport { PROBLEMS, CONTESTS } from \"../util/constants\";\r\nimport { ProblemShared } from \"../util/DataTypes/Problem\";\r\nimport { Verdict } from \"../util/DataTypes/Submission\";\r\nimport { ThemesType } from \"../util/Theme\";\r\n\r\nconst Menu = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const [handle, setHandle] = useState(\r\n    state.userList.handles.length ? state.userList.handles.toString() : \"\"\r\n  );\r\n  console.log(state.userList.handles.toString());\r\n  useEffect(() => {\r\n    fetchProblemList(dispatch);\r\n    fetchContestList(dispatch);\r\n    fetchSharedProblemList(dispatch);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    sync();\r\n  }, [state.userList]);\r\n\r\n  const sync = () => {\r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n  };\r\n\r\n  const submitUser = () => {\r\n    // Notification.info({\r\n    //   title: \"User submitted!\",\r\n    //   duration: 200,\r\n    //   description: \"hh\",\r\n    // });\r\n    // toast.error(\"🦄 Wow so easy!\", {\r\n    //   position: \"bottom-right\",\r\n    //   autoClose: 2001,\r\n    //   hideProgressBar: false,\r\n    //   closeOnClick: true,\r\n    //   pauseOnHover: true,\r\n    //   draggable: true,\r\n    //   progress: undefined,\r\n    // });\r\n    fetchUsers(dispatch, handle);\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={\"navbar navbar-expand-lg p-2 ps-4 pe-4 \" + state.appState.theme.navbar}>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarTogglerDemo03\"\r\n        aria-controls=\"navbarTogglerDemo03\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n        CFTracker\r\n      </Link>\r\n\r\n      <div\r\n        className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n        id=\"navbarTogglerDemo03\">\r\n        <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n          <li className=\"nav-item active\">\r\n            <Link to={PROBLEMS} className=\"nav-link\" href=\"#\">\r\n              Problem List\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={CONTESTS} className=\"nav-link\" href=\"#\">\r\n              Contest\r\n            </Link>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className={\"btn-transparent border-0 nav-link\"}\r\n              href=\"#\"\r\n              title=\"Change Theme\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                if (state.appState.themeMod === ThemesType.DARK)\r\n                  changeAppState(\r\n                    dispatch,\r\n                    AppReducerType.CHANGE_THEME,\r\n                    ThemesType.LIGHT\r\n                  );\r\n                else\r\n                  changeAppState(\r\n                    dispatch,\r\n                    AppReducerType.CHANGE_THEME,\r\n                    ThemesType.DARK\r\n                  );\r\n              }}>\r\n              <FontAwesomeIcon\r\n                icon={\r\n                  state.appState.themeMod === ThemesType.DARK ? faMoon : faSun\r\n                }\r\n              />\r\n            </a>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0 nav-item\"\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n                submitUser();\r\n              }}>\r\n              <input\r\n                name=\"handle\"\r\n                className=\"form-control mr-sm-2\"\r\n                type=\"search\"\r\n                placeholder=\"handle1,handle2,..\"\r\n                aria-label=\"Search\"\r\n                value={handle}\r\n                onChange={(e) => setHandle(e.target.value)}\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                sync();\r\n              }}\r\n              title=\"Refresh Submissions\"\r\n              href=\"#\">\r\n              <FontAwesomeIcon icon={faSync} />\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx",["127","128","129","130","131","132"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport { sortByRating, sortBySolveCount } from \"../../util/sortMethods\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n  SEARCH,\r\n  PROBLEMS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport ProblemList from \"./ProblemList\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faSort,\r\n  faSortDown,\r\n  faSortUp,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\nimport { RootStateType } from \"../../data/store\";\r\nimport { changeAppState } from \"../../data/actions/fetchActions\";\r\nimport { AppReducerType } from \"../../data/actions/types\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\nconst ProblemPage = () => {\r\n  const state: RootStateType = useSelector((state) => state);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = -1,\r\n    SORT_BY_RATING = 1,\r\n    SORT_BY_SOLVE = 2,\r\n    ASCENDING = 0,\r\n    DESCENDING = 1;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    rating: { min_rating: -1, max_rating: 4000 },\r\n    tags: new Set(),\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n    sortBy: SORT_BY_SOLVE,\r\n    order: DESCENDING,\r\n  };\r\n\r\n  const [problemList, setProblemList] = useState({ problems: [], error: \"\" });\r\n  const [tagList, setTagList] = useState({ tags: [] });\r\n  const [randomProblem, setRandomProblem] = useState(-1);\r\n  const [selected, setSelected] = useState(0);\r\n  const [perPage, setPerPage] = useState(100);\r\n  const [minRating, setMinRating] = useState(-1);\r\n  const [maxRating, setMaxRating] = useState(4000);\r\n  const [showUnrated, setShowUnrated] = useState(true);\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n\r\n  const filterProblem = (problem) => {\r\n    let containTags = false;\r\n\r\n    if (filterState.tags.size === 0) containTags = true;\r\n    else\r\n      for (let tag of problem.tags)\r\n        if (filterState.tags.has(tag)) {\r\n          containTags = true;\r\n          break;\r\n        }\r\n    let ratingInside =\r\n      problem.rating <= state.appState.problemPage.maxRating &&\r\n      problem.rating >= state.appState.problemPage.minRating;\r\n    // if (problem.rating == -1 && showUnrated == false) ratingInside = false;\r\n    // else if (problem.rating == -1 && showUnrated) ratingInside = true;\r\n    let solveStatus = filterState.solveStatus.includes(getState(problem));\r\n\r\n    let searchIncluded = true;\r\n    let text = filterState.search.toLowerCase().trim();\r\n    if (text.length)\r\n      searchIncluded =\r\n        problem.name.toLowerCase().includes(text) ||\r\n        problem.id.toLowerCase().includes(text);\r\n\r\n    return solveStatus && ratingInside && containTags && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPerPage(state.appState.problemPage.perPage);\r\n    setMinRating(state.appState.problemPage.minRating);\r\n    setMaxRating(state.appState.problemPage.maxRating);\r\n    setShowUnrated(state.appState.problemPage.showUnrated);\r\n\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n      });\r\n    if (state.problemList.problems !== undefined) {\r\n      let newState = { problems: [] };\r\n      newState.problems = state.problemList.problems;\r\n\r\n      let used = new Set<string>();\r\n\r\n      newState.problems = newState.problems.filter((problem: Problem) => {\r\n        if (used.has(problem.getId())) return false;\r\n\r\n        return filterProblem(problem);\r\n      });\r\n\r\n      if (filterState.sortBy === SORT_BY_RATING)\r\n        newState.problems.sort(sortByRating);\r\n      else newState.problems.sort(sortBySolveCount);\r\n      if (filterState.order === DESCENDING) newState.problems.reverse();\r\n\r\n      let tags = [];\r\n      for (let tag of state.problemList.tags) tags.push(tag);\r\n      setTagList({ tags });\r\n      setProblemList({ ...problemList, problems: newState.problems });\r\n    }\r\n    setRandomProblem(-1);\r\n    setSelected(0);\r\n  }, [state, filterState]);\r\n\r\n  const sortList = (sortBy) => {\r\n    if (filterState.sortBy === sortBy)\r\n      setFilterState({ ...filterState, order: filterState.order ^ 1 });\r\n    else\r\n      setFilterState({\r\n        ...filterState,\r\n        ...{\r\n          order: sortBy === SORT_BY_RATING ? ASCENDING : DESCENDING,\r\n          sortBy: sortBy,\r\n        },\r\n      });\r\n  };\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const searchData = (e) => {\r\n    setFilterState({ ...filterState, search: e.target.value });\r\n  };\r\n\r\n  const chooseRandom = () => {\r\n    if (problemList.problems.length === 0) return;\r\n    setRandomProblem(getRandomInteger(0, problemList.problems.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * perPage;\r\n    let high = Math.min(problemList.problems.length, lo + perPage);\r\n\r\n    if (lo > high) return [];\r\n    return problemList.problems.slice(lo, high);\r\n  };\r\n\r\n  const nuetral = () => {\r\n    return <FontAwesomeIcon icon={faSort} />;\r\n  };\r\n\r\n  const less = () => {\r\n    return <FontAwesomeIcon icon={faSortUp} />;\r\n  };\r\n\r\n  const greater = () => {\r\n    return <FontAwesomeIcon icon={faSortDown} />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs d-flex justify-content-between container border-0 mt-3\">\r\n          <li className=\"nav-item col-4\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0\"\r\n              onSubmit={(e) => e.preventDefault()}>\r\n              <input\r\n                className={\r\n                  \"form-control mr-sm-2 \" + state.appState.theme.bgText\r\n                }\r\n                type=\"text\"\r\n                placeholder=\"Problem Name or Id\"\r\n                aria-label=\"Search\"\r\n                value={filterState.search}\r\n                onChange={(e) => {\r\n                  setFilterState({\r\n                    ...filterState,\r\n                    search: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n          <li className=\"nav-item text-secondary h-6\">\r\n            Showing {paginate().length} of {problemList.problems.length}\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                type=\"button\"\r\n                className={\"btn nav-link \" + state.appState.theme.btn}\r\n                onClick={chooseRandom}\r\n                title=\"Find Random Problem\">\r\n                <FontAwesomeIcon icon={faRandom} />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className={\"btn nav-link \" + state.appState.theme.btn}\r\n                title=\"Cancel Random\"\r\n                onClick={() => setRandomProblem(-1)}>\r\n                <FontAwesomeIcon icon={faRedo} />\r\n              </button>\r\n            </div>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-bs-toggle=\"modal\"\r\n              data-bs-target=\"#exampleModal\">\r\n              {<FontAwesomeIcon icon={faFilter} />}\r\n            </button>\r\n            <div\r\n              className=\"modal\"\r\n              id=\"exampleModal\"\r\n              tabIndex={-1}\r\n              aria-labelledby=\"exampleModalLabel\"\r\n              aria-hidden=\"true\">\r\n              <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                      Filter\r\n                    </h5>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"></button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <div className=\"group\">\r\n                      <form\r\n                        className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                        onSubmit={(e) => e.preventDefault()}>\r\n                        <div className=\"d-flex justify-content-between w-100\">\r\n                          <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                              <label\r\n                                className=\"input-group-text\"\r\n                                htmlFor=\"inputGroupSelect01\">\r\n                                Per Page\r\n                              </label>\r\n                            </div>\r\n                            <select\r\n                              className=\"custom-select\"\r\n                              id=\"inputGroupSelect01\"\r\n                              value={perPage}\r\n                              onChange={(e) => {\r\n                                let num: number = parseInt(e.target.value);\r\n                                changeAppState(\r\n                                  dispatch,\r\n                                  AppReducerType.CHANGE_PER_PAGE,\r\n                                  num,\r\n                                  false\r\n                                );\r\n                              }}>\r\n                              <option value=\"20\">20</option>\r\n                              <option value=\"50\">50</option>\r\n                              <option value=\"100\">100</option>\r\n                              <option value={problemList.problems.length}>\r\n                                All\r\n                              </option>\r\n                            </select>\r\n                          </div>\r\n                          <div className=\"input-group d-flex justify-content-end\">\r\n                            <button\r\n                              className=\"btn btn-light nav-link h-6\"\r\n                              onClick={() => setFilterState(initFilterState)}\r\n                              title=\"Reset To Default State\">\r\n                              <FontAwesomeIcon icon={faRedoAlt} />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {initFilterState.solveStatus.map((solved) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.solveStatus.includes(solved)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={solved}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            let ind = filterState.solveStatus.indexOf(solved);\r\n                            if (ind != -1)\r\n                              myFilterState.solveStatus.splice(ind, 1);\r\n                            else myFilterState.solveStatus.push(solved);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {solved === SOLVED\r\n                            ? \"Solved\"\r\n                            : solved === ATTEMPTED\r\n                            ? \"Attempted\"\r\n                            : \"Unsolved\"}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <form\r\n                      className=\"\"\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}>\r\n                      <div className=\"d-flex\">\r\n                        <div\r\n                          className=\"input-group pe-1\"\r\n                          title=\"place -1 to show unrated\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Min Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Min Rating\"\r\n                            value={minRating}\r\n                            name={\"minRating\"}\r\n                            onChange={(e) => {\r\n                              let num: number = parseInt(e.target.value);\r\n\r\n                              if (num != null && num != undefined)\r\n                                changeAppState(\r\n                                  dispatch,\r\n                                  AppReducerType.CHANGE_MIN_RATING,\r\n                                  num,\r\n                                  false\r\n                                );\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"input-group ps-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Max Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Max Rating\"\r\n                            value={maxRating}\r\n                            name={\"maxRating\"}\r\n                            onChange={(e) => {\r\n                              let num: number = parseInt(e.target.value);\r\n\r\n                              if (num != null && num != undefined)\r\n                                changeAppState(\r\n                                  dispatch,\r\n                                  AppReducerType.CHANGE_MAX_RATING,\r\n                                  num,\r\n                                  false\r\n                                );\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {tagList.tags.map((tag) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.tags.has(tag)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={tag}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            if (filterState.tags.has(tag))\r\n                              myFilterState.tags.delete(tag);\r\n                            else myFilterState.tags.add(tag);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {tag}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"p-2\">\r\n        <Pagination\r\n          totalCount={problemList.problems.length}\r\n          perPage={perPage}\r\n          selected={selected}\r\n          theme={state.appState.theme}\r\n          pageSelected={(e) => setSelected(e)}\r\n        />\r\n      </div>\r\n      <table\r\n        className={\r\n          \"table table-bordered container \" + state.appState.theme.table\r\n        }>\r\n        <thead className={state.appState.theme.thead}>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">ID</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_RATING)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Rating</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_RATING\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_SOLVE)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Solve Count</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_SOLVE\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {randomProblem === -1 ? (\r\n            <ProblemList problems={paginate()} />\r\n          ) : (\r\n            <ProblemList problems={[problemList.problems[randomProblem]]} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        totalCount={problemList.problems.length}\r\n        perPage={perPage}\r\n        selected={selected}\r\n        theme={state.appState.theme}\r\n        pageSelected={(e) => setSelected(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx",["133","134"],"import React, { useEffect,useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { fetchUsers } from \"../../data/actions/userActions\";\r\nimport { CONTESTS } from \"../../util/constants\";\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst history = useHistory();\r\n\thistory.push(CONTESTS);\r\n\r\n\tconst submitUser = () => {\r\n\t\tfetchUsers(dispatch,handle);\r\n\t}\r\n\r\n  useEffect(() => {\r\n    // fetchProblemList(dispatch);\r\n    // fetchContestList(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\t\t\t{/* <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx",["135","136","137"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { charInc, getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport ContestList from \"./ContestList\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  CONTESTS,\r\n  SEARCH,\r\n  SOLVED_CONTESTS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\nimport { RootStateType } from \"../../data/store\";\r\nimport { changeAppState } from \"../../data/actions/fetchActions\";\r\nimport { AppReducerType } from \"../../data/actions/types\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\nconst ContestPage = () => {\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [contestList, setContestList] = useState({ contests: [], error: \"\" });\r\n  const [randomContest, setRandomContest] = useState(-1);\r\n  const [perPage, setPerPage] = useState(100);\r\n  const [showDate, setShowDate] = useState(false);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = 2;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const contestStatus = (contestId) => {\r\n    if (state.userSubmissions[SOLVED_CONTESTS].has(contestId)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_CONTESTS].has(contestId))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const filterContest = (contest) => {\r\n    let solveStatus = filterState.solveStatus.includes(\r\n      contestStatus(contest.id)\r\n    );\r\n\r\n    let searchIncluded = true;\r\n\r\n    let text = filterState.search.toLowerCase().trim();\r\n\r\n    if (text.length)\r\n      searchIncluded =\r\n        contest.name.toLowerCase().includes(text) ||\r\n        contest.id.toString().includes(text);\r\n\r\n    return solveStatus && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPerPage(state.appState.contestPage.perPage);\r\n    setShowDate(state.appState.contestPage.showDate);\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: CONTESTS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: CONTESTS,\r\n      });\r\n    let contests = state.contestList.contests;\r\n\r\n    const newContestList = contests.filter((contest) => filterContest(contest));\r\n\r\n    setContestList({ ...contestList, contests: newContestList });\r\n    setRandomContest(-1);\r\n  }, [state, filterState]);\r\n\r\n  const chooseRandom = () => {\r\n    if (contestList.contests.length === 0) return;\r\n    setRandomContest(getRandomInteger(0, contestList.contests.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    // let lo = selected * filterState.perPage;\r\n    let lo = selected * perPage;\r\n    let high = Math.min(contestList.contests.length, lo + perPage);\r\n\r\n    if (lo > high) return [];\r\n    return contestList.contests.slice(lo, high);\r\n  };\r\n\r\n  return (\r\n    <div className=\"div\">\r\n      <div className=\"menu\">\r\n        <nav className=\"navbar navbar-expand-lg container p-2\">\r\n          <div\r\n            className=\"collapse navbar-collapse d-flex justify-content-between\"\r\n            id=\"navbarTogglerDemo03\">\r\n            <ul className=\"navbar w-100 d-flex justify-content-between list-unstyled\">\r\n              <li className=\"nav-item col-6\">\r\n                <form\r\n                  className=\"form-inline d-flex my-2 my-lg-0\"\r\n                  onSubmit={(e) => e.preventDefault()}>\r\n                  <input\r\n                    className={\r\n                      \"form-control mr-sm-2 \" + state.appState.theme.bgText\r\n                    }\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Contest Name or Id\"\r\n                    aria-label=\"Search\"\r\n                    value={filterState.search}\r\n                    onChange={(e) => {\r\n                      setFilterState({\r\n                        ...filterState,\r\n                        search: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </form>\r\n              </li>\r\n              <li className=\"nav-item text-secondary\">\r\n                Showing {paginate().length} of {contestList.contests.length}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <div\r\n                  className=\"btn-group\"\r\n                  role=\"group\"\r\n                  aria-label=\"Basic example\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className={\"btn nav-link \" + state.appState.theme.btn}\r\n                    onClick={chooseRandom}\r\n                    title=\"Find Random Contest\">\r\n                    <FontAwesomeIcon icon={faRandom} />\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={\"btn nav-link \" + state.appState.theme.btn}\r\n                    title=\"Cancel Random\"\r\n                    onClick={() => setRandomContest(-1)}>\r\n                    <FontAwesomeIcon icon={faRedo} />\r\n                  </button>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  data-bs-toggle=\"modal\"\r\n                  data-bs-target=\"#exampleModal\">\r\n                  {<FontAwesomeIcon icon={faFilter} />}\r\n                </button>\r\n                <div\r\n                  className=\"modal\"\r\n                  id=\"exampleModal\"\r\n                  tabIndex={-1}\r\n                  aria-labelledby=\"exampleModalLabel\"\r\n                  aria-hidden=\"true\">\r\n                  <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                      <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                          Filter\r\n                        </h5>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn-close\"\r\n                          data-bs-dismiss=\"modal\"\r\n                          aria-label=\"Close\"></button>\r\n                      </div>\r\n                      <div className=\"modal-body\">\r\n                        <div className=\"group\">\r\n                          <form\r\n                            className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                            onSubmit={(e) => e.preventDefault()}>\r\n                            <div className=\"d-flex justify-content-between w-100\">\r\n                              <div className=\"input-group mb-3\">\r\n                                <div className=\"input-group-prepend\">\r\n                                  <label\r\n                                    className=\"input-group-text\"\r\n                                    htmlFor=\"inputGroupSelect01\">\r\n                                    Per Page\r\n                                  </label>\r\n                                </div>\r\n                                <select\r\n                                  className=\"custom-select\"\r\n                                  id=\"inputGroupSelect01\"\r\n                                  value={perPage}\r\n                                  onChange={(e) => {\r\n                                    let num: number = parseInt(e.target.value);\r\n\r\n                                    // setFilterState({\r\n                                    //   ...filterState,\r\n                                    //   perPage: num,\r\n                                    // });\r\n                                    changeAppState(\r\n                                      dispatch,\r\n                                      AppReducerType.CHANGE_PER_PAGE,\r\n                                      num,\r\n                                      true\r\n                                    );\r\n                                  }}>\r\n                                  <option value=\"20\">20</option>\r\n                                  <option value=\"50\">50</option>\r\n                                  <option value=\"100\">100</option>\r\n                                  <option value={contestList.contests.length}>\r\n                                    All\r\n                                  </option>\r\n                                </select>\r\n                              </div>\r\n                              <div className=\"input-group d-flex justify-content-end\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Show Date\r\n                                </span>\r\n                                <div className=\"input-group-text\">\r\n                                  <input\r\n                                    className=\"form-check-input mt-0\"\r\n                                    type=\"checkbox\"\r\n                                    defaultChecked={showDate}\r\n                                    onChange={() =>\r\n                                      changeAppState(\r\n                                        dispatch,\r\n                                        AppReducerType.TOGGLE_DATE,\r\n                                        +!!!showDate,\r\n                                        true\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                              <button\r\n                                className=\"btn btn-secondary nav-link m-2 h-6\"\r\n                                onClick={() => setFilterState(initFilterState)}\r\n                                title=\"Reset To Default State\">\r\n                                <FontAwesomeIcon icon={faRedoAlt} />\r\n                              </button>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                        <div\r\n                          className=\"btn-group d-flex flex-wrap justify-content-between\"\r\n                          role=\"group\"\r\n                          aria-label=\"First group\">\r\n                          {initFilterState.solveStatus.map((solved) => (\r\n                            <button\r\n                              className={\r\n                                (filterState.solveStatus.includes(solved)\r\n                                  ? \"btn bg-success\"\r\n                                  : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                              }\r\n                              key={solved}\r\n                              onClick={() => {\r\n                                let myFilterState = { ...filterState };\r\n                                let ind =\r\n                                  filterState.solveStatus.indexOf(solved);\r\n                                if (ind != -1)\r\n                                  myFilterState.solveStatus.splice(ind, 1);\r\n                                else myFilterState.solveStatus.push(solved);\r\n                                setFilterState(myFilterState);\r\n                              }}>\r\n                              {solved === SOLVED\r\n                                ? \"Solved\"\r\n                                : solved === ATTEMPTED\r\n                                ? \"Attempted\"\r\n                                : \"Unsolved\"}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      {/* <PaginationComponent /> */}\r\n\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={perPage}\r\n        selected={selected}\r\n        theme={state.appState.theme}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n      <div className=\"table-responsive p-3\">\r\n        <table\r\n          className={\r\n            \"table table-bordered overflow-auto \" + state.appState.theme.table\r\n          }>\r\n          <thead className={state.appState.theme.thead}>\r\n            <tr>\r\n              <th scope=\"col\" className=\"sticky-col\">\r\n                #\r\n              </th>\r\n              <th scope=\"col\">ID</th>\r\n              <th scope=\"col\">Contest Name</th>\r\n              {[...Array(10)].map((x, i) => {\r\n                return <th scope=\"col\">{charInc(\"A\", i)}</th>;\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <ContestList\r\n              contestlist={\r\n                randomContest === -1\r\n                  ? paginate()\r\n                  : [contestList.contests[randomContest]]\r\n              }\r\n              filterState={filterState}\r\n              showDate={showDate}\r\n            />\r\n          </tbody>\r\n        </table>\r\n        <Pagination\r\n          pageSelected={(e) => setSelected(e)}\r\n          perPage={perPage}\r\n          selected={selected}\r\n          theme={state.appState.theme}\r\n          totalCount={contestList.contests.length}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx",["138","139","140"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootStateType } from \"../../data/store\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\ninterface ProblemListProps {\r\n  problems: Problem[];\r\n}\r\n\r\nconst ProblemList = ({ problems }: ProblemListProps): JSX.Element => {\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const getState = (problem: Problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem: Problem, index: number) => {\r\n    let classes = state.appState.theme.bg;\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS)\r\n      classes = state.appState.theme.bgSuccess;\r\n    else if (problemState === ATTEMPTED_PROBLEMS)\r\n      classes = state.appState.theme.bgDanger;\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{index + 1}</td>\r\n        <td className={\"id font-weight-bold \" + classes}>{problem.id}</td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className={\"text-decoration-none\" + \" \" + state.appState.theme.text}\r\n            target=\"_blank\"\r\n            title={problem.tags.toString()}\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>\r\n          {problem.rating != -1 ? problem.rating : \"Not Rated\"}\r\n        </td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {problems.map((problem: Problem, index: number) => {\r\n        return ProblemCard(problem, index);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx",[],"F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx",["141","142","143"],"F:\\web\\react\\codeforces-api\\src\\util\\constants.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\Theme.ts",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"144","replacedBy":"148"},{"ruleId":"146","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":2,"column":28,"nodeType":"152","messageId":"153","endLine":2,"endColumn":36},{"ruleId":"154","severity":1,"message":"155","line":27,"column":6,"nodeType":"156","endLine":27,"endColumn":8,"suggestions":"157"},{"ruleId":"150","severity":1,"message":"158","line":15,"column":10,"nodeType":"152","messageId":"153","endLine":15,"endColumn":19},{"ruleId":"150","severity":1,"message":"159","line":17,"column":10,"nodeType":"152","messageId":"153","endLine":17,"endColumn":23},{"ruleId":"150","severity":1,"message":"160","line":18,"column":10,"nodeType":"152","messageId":"153","endLine":18,"endColumn":17},{"ruleId":"154","severity":1,"message":"161","line":34,"column":6,"nodeType":"156","endLine":34,"endColumn":8,"suggestions":"162"},{"ruleId":"154","severity":1,"message":"163","line":38,"column":6,"nodeType":"156","endLine":38,"endColumn":22,"suggestions":"164"},{"ruleId":"165","severity":1,"message":"166","line":95,"column":13,"nodeType":"167","endLine":113,"endColumn":18},{"ruleId":"165","severity":1,"message":"166","line":142,"column":13,"nodeType":"167","endLine":149,"endColumn":24},{"ruleId":"150","severity":1,"message":"168","line":60,"column":10,"nodeType":"152","messageId":"153","endLine":60,"endColumn":21},{"ruleId":"154","severity":1,"message":"169","line":130,"column":6,"nodeType":"156","endLine":130,"endColumn":26,"suggestions":"170"},{"ruleId":"150","severity":1,"message":"171","line":152,"column":9,"nodeType":"152","messageId":"153","endLine":152,"endColumn":19},{"ruleId":"172","severity":1,"message":"173","line":316,"column":37,"nodeType":"174","messageId":"175","endLine":316,"endColumn":39},{"ruleId":"172","severity":1,"message":"173","line":350,"column":54,"nodeType":"174","messageId":"175","endLine":350,"endColumn":56},{"ruleId":"172","severity":1,"message":"173","line":373,"column":54,"nodeType":"174","messageId":"175","endLine":373,"endColumn":56},{"ruleId":"150","severity":1,"message":"176","line":9,"column":18,"nodeType":"152","messageId":"153","endLine":9,"endColumn":27},{"ruleId":"150","severity":1,"message":"177","line":15,"column":8,"nodeType":"152","messageId":"153","endLine":15,"endColumn":18},{"ruleId":"150","severity":1,"message":"178","line":23,"column":8,"nodeType":"152","messageId":"153","endLine":23,"endColumn":15},{"ruleId":"154","severity":1,"message":"179","line":92,"column":6,"nodeType":"156","endLine":92,"endColumn":26,"suggestions":"180"},{"ruleId":"172","severity":1,"message":"173","line":274,"column":41,"nodeType":"174","messageId":"175","endLine":274,"endColumn":43},{"ruleId":"181","severity":1,"message":"182","line":35,"column":11,"nodeType":"167","endLine":39,"endColumn":68},{"ruleId":"183","severity":1,"message":"184","line":36,"column":47,"nodeType":"174","messageId":"185","endLine":36,"endColumn":48},{"ruleId":"172","severity":1,"message":"173","line":44,"column":27,"nodeType":"174","messageId":"175","endLine":44,"endColumn":29},{"ruleId":"172","severity":1,"message":"173","line":107,"column":25,"nodeType":"174","messageId":"175","endLine":107,"endColumn":27},{"ruleId":"186","severity":1,"message":"187","line":180,"column":13,"nodeType":"188","endLine":180,"endColumn":35},{"ruleId":"186","severity":1,"message":"187","line":181,"column":13,"nodeType":"188","endLine":181,"endColumn":24},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],["189"],["190"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state.appState.themeMod'. Either include it or remove the dependency array.","ArrayExpression",["191"],"'RootState' is defined but never used.","'ProblemShared' is defined but never used.","'Verdict' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["192"],"React Hook useEffect has a missing dependency: 'sync'. Either include it or remove the dependency array.",["193"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'showUnrated' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filterProblem', 'history', and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.",["194"],"'searchData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setHandle' is assigned a value but never used.","'submitUser' is assigned a value but never used.","'Problem' is defined but never used.","React Hook useEffect has missing dependencies: 'contestList', 'filterContest', and 'history'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["195"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [state.appState.themeMod]",{"range":"206","text":"207"},"Update the dependencies array to be: [dispatch]",{"range":"208","text":"209"},"Update the dependencies array to be: [state.userList, sync]",{"range":"210","text":"211"},"Update the dependencies array to be: [state, filterState, history, problemList, filterProblem]",{"range":"212","text":"213"},"Update the dependencies array to be: [state, filterState, history, contestList, filterContest]",{"range":"214","text":"215"},[952,954],"[state.appState.themeMod]",[1348,1350],"[dispatch]",[1395,1411],"[state.userList, sync]",[4436,4456],"[state, filterState, history, problemList, filterProblem]",[2905,2925],"[state, filterState, history, contestList, filterContest]"]