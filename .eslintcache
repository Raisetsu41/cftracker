[{"F:\\web\\react\\codeforces-api\\src\\index.js":"1","F:\\web\\react\\codeforces-api\\src\\App.js":"2","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js":"3","F:\\web\\react\\codeforces-api\\src\\data\\store.js":"4","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js":"5","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js":"6","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js":"7","F:\\web\\react\\codeforces-api\\src\\components\\Menu.js":"8","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js":"9","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.js":"11","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js":"12","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js":"13","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js":"14","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.js":"16","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.js":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.js":"18"},{"size":806,"mtime":1613735479823,"results":"19","hashOfConfig":"20"},{"size":1088,"mtime":1614767749729,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":3055,"mtime":1614769608642,"results":"23","hashOfConfig":"20"},{"size":1661,"mtime":1614772267326,"results":"24","hashOfConfig":"20"},{"size":1098,"mtime":1614949897362,"results":"25","hashOfConfig":"20"},{"size":3025,"mtime":1614944871204,"results":"26","hashOfConfig":"20"},{"size":3022,"mtime":1614949615377,"results":"27","hashOfConfig":"20"},{"size":487,"mtime":1613730924343,"results":"28","hashOfConfig":"20"},{"size":1021,"mtime":1614948873933,"results":"29","hashOfConfig":"20"},{"size":306,"mtime":1614517891347,"results":"30","hashOfConfig":"20"},{"size":15834,"mtime":1615126410354,"results":"31","hashOfConfig":"20"},{"size":11797,"mtime":1615126500787,"results":"32","hashOfConfig":"20"},{"size":3978,"mtime":1614767945783,"results":"33","hashOfConfig":"20"},{"size":1605,"mtime":1614767956158,"results":"34","hashOfConfig":"20"},{"size":3336,"mtime":1614949961741,"results":"35","hashOfConfig":"20"},{"size":1591,"mtime":1614767592001,"results":"36","hashOfConfig":"20"},{"size":3004,"mtime":1614950062673,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1pnglh",{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},"F:\\web\\react\\codeforces-api\\src\\index.js",[],["82","83"],"F:\\web\\react\\codeforces-api\\src\\App.js",["84","85","86","87","88","89","90"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  fetchContestList,\n  fetchProblemList,\n  fetchUserSubmissions,\n} from \"./data/actions/fetchActions\";\n\nimport Menu, { CONTEST, PROBLEMS } from \"./components/Menu\";\nimport ProblemPage from \"./components/problem/ProblemPage\";\nimport ContestPage from \"./components/contest/ContestPage\";\n\nfunction App(props) {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // fetchProblemList(dispatch);\n    // fetchContestList(dispatch);\n  }, []);\n\n  return (\n    <div className=\"App container-fluid bg-dark\">\n      <div className=\"menu\">\n        <Menu />\n      </div>\n\n      <Switch>\n        <Route path={PROBLEMS} component={ProblemPage} />\n        <Route strict path={CONTEST} component={ContestPage}/>\n\n      </Switch>\n      <footer className=\"text-light d-flex justify-content-center p-3\">\n        All rights reserved by @Bashem\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.js",["91","92","93"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport { problemListReducer, contestReducer } from \"./reducers/fetchReducers\";\r\nimport { userSubmissionsReducer, userReducer } from \"./reducers/userReducers\";\r\n\r\nexport const contestList = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 1476,\r\n      name: \"Educational Codeforces Round 103 (Rated for Div. 2)\",\r\n      type: \"ICPC\",\r\n      phase: \"FINISHED\",\r\n      frozen: false,\r\n      durationSeconds: 7200,\r\n      startTimeSeconds: 1611930900,\r\n      relativeTimeSeconds: 418636,\r\n    },\r\n  ],\r\n};\r\n\r\nconst problem = {\r\n  status: \"OK\",\r\n  result: {\r\n    problems: [\r\n      {\r\n        contestId: 1478,\r\n        index: \"C\",\r\n        name: \"Nezzar and Symmetric Array\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1500,\r\n        rating: 1700,\r\n        tags: [\"implementation\", \"math\", \"sortings\"],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst submissions = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 105129023,\r\n      contestId: 1368,\r\n      creationTimeSeconds: 1611387508,\r\n      relativeTimeSeconds: 2147483647,\r\n      problem: {\r\n        contestId: 1368,\r\n        index: \"D\",\r\n        name: \"AND, OR and square sum\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1750,\r\n        rating: 1700,\r\n        tags: [\"bitmasks\", \"greedy\", \"math\"],\r\n      },\r\n      author: {\r\n        contestId: 1368,\r\n        members: [{ handle: \"bashem\" }],\r\n        participantType: \"PRACTICE\",\r\n        ghost: false,\r\n        startTimeSeconds: 1592491500,\r\n      },\r\n      programmingLanguage: \"GNU C++14\",\r\n      verdict: \"OK\",\r\n      testset: \"TESTS\",\r\n      passedTestCount: 17,\r\n      timeConsumedMillis: 109,\r\n      memoryConsumedBytes: 1638400,\r\n    },\r\n  ],\r\n};\r\n\r\nconst failedUserFethc = {\r\n  status: \"FAILED\",\r\n  comment: \"handles: User with handle b not found\",\r\n};\r\n\r\nconst middlewre = [thunk, logger];\r\n\r\nconst combinedReducers = combineReducers({\r\n  userSubmissions: userSubmissionsReducer,\r\n  problemList: problemListReducer,\r\n  contestList: contestReducer,\r\n  userList: userReducer,\r\n});\r\n\r\nconst newCombinedReducers = (state, action) => {\r\n  const intermediateReducer = combinedReducers(state, action);\r\n  //console.log(intermediateReducer.problemList);\r\n\r\n  return {\r\n    userSubmissions: intermediateReducer.userSubmissions,\r\n    problemList: {\r\n      problems: intermediateReducer.problemList.problems,\r\n      error: intermediateReducer.problemList.error,\r\n      tags: intermediateReducer.problemList.tags,\r\n      loading: intermediateReducer.problemList.loading,\r\n    },\r\n    contestList: {\r\n      contests: intermediateReducer.contestList.contests,\r\n      error: intermediateReducer.contestList.error,\r\n      loading: intermediateReducer.contestList.loading,\r\n      problems: intermediateReducer.problemList.problems,\r\n    },\r\n    userList: intermediateReducer.userList,\r\n  };\r\n};\r\n\r\nconst store = createStore(\r\n  newCombinedReducers,\r\n  {},\r\n  applyMiddleware(...middlewre)\r\n);\r\n\r\nexport default store;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js",[],"F:\\web\\react\\codeforces-api\\src\\components\\Menu.js",["94","95"],"import { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  fetchContestList,\r\n  fetchProblemList,\r\n} from \"../data/actions/fetchActions\";\r\nimport { fetchUserSubmissions, fetchUsers } from \"../data/actions/userActions\";\r\n\r\nexport const PROBLEMS = \"/problems\";\r\nexport const CONTEST = \"/contests\";\r\n\r\nconst Menu = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n  const state = useSelector((state) => state);\r\n\r\n  const sync = () => {\r\n    fetchProblemList(dispatch);\r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n    fetchContestList(dispatch);\r\n  };\r\n\r\n  const submitUser = () => {\r\n    fetchUsers(dispatch, handle).then(() => {\r\n      fetchUserSubmissions(dispatch, state.userList.handles);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light p-2\">\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarTogglerDemo03\"\r\n        aria-controls=\"navbarTogglerDemo03\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n        BashForces\r\n      </Link>\r\n\r\n      <div\r\n        className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n        id=\"navbarTogglerDemo03\">\r\n        <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n          <li className=\"nav-item active\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                sync();\r\n              }}\r\n              href=\"#\">\r\n              <FontAwesomeIcon icon={faSync} />\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item active\">\r\n            <Link to={PROBLEMS} className=\"nav-link\" href=\"#\">\r\n              Problem List\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={CONTEST} className=\"nav-link\" href=\"#\">\r\n              Contest\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n        <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"btn btn-outline-success my-2 my-sm-0\"\r\n            type=\"submit\">\r\n            Enter\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\constants.js",[],"F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js",["96","97","98","99","100","101"],"F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js",["102","103","104","105"],"F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js",["106","107","108","109","110"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../util/constants\";\r\n\r\nconst ContestList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getInfo = (contestId, index) => {\r\n    let l = 0,\r\n      r = state.problemList.problems.length - 1,\r\n      ans = -1;\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (\r\n        state.problemList.problems[mid].contestId === contestId &&\r\n        state.problemList.problems[mid].index === index\r\n      ) {\r\n        ans = mid;\r\n        break;\r\n      }\r\n\r\n      if (\r\n        state.problemList.problems[mid].contestId > contestId ||\r\n        (state.problemList.problems[mid].contestId === contestId &&\r\n          state.problemList.problems[mid].index > index)\r\n      ) {\r\n        r = mid - 1;\r\n      } else l = mid + 1;\r\n    }\r\n\r\n    const EMPTY = \"EMPTY bg-dark\";\r\n\r\n    if (ans === -1 && index.length !== 1) return <td className={EMPTY}></td>;\r\n\r\n    if (ans === -1 && index.length === 1) {\r\n      let arr = [];\r\n      for (let i = 1; ; i++) {\r\n        let res = getInfo(contestId, index + i);\r\n        if (res.props.className === EMPTY) break;\r\n        arr.push(res);\r\n      }\r\n\r\n      if(arr.length == 0){\r\n        return (<td className={EMPTY}></td>)\r\n      }\r\n\r\n      if (arr.length < 3)\r\n        return (\r\n          <td className=\"bg-success p-0\">\r\n            <table key={contestId + index.charAt(0)}>\r\n              <tbody>\r\n                <td className=\"inside p-0\" key={contestId + index}>\r\n                  {arr.map((element) => element)}\r\n                </td>\r\n              </tbody>\r\n            </table>\r\n          </td>\r\n        );\r\n      else\r\n        return (\r\n          <td className=\"inside p-0\" key={contestId + index}>\r\n            More than 4\r\n          </td>\r\n        );\r\n    }\r\n\r\n    let solved = state.userSubmissions[SOLVED_PROBLEMS].has(contestId + index);\r\n    let attempted = state.userSubmissions[ATTEMPTED_PROBLEMS].has(\r\n      contestId + index\r\n    );\r\n\r\n    let name = state.problemList.problems[ans].name;\r\n    let id = state.problemList.problems[ans].id;\r\n    if (name.length > 10) name = name.substring(0, 9) + \"...\";\r\n\r\n    let className =\r\n      (solved ? \"bg-success\" : attempted ? \"bg-danger\" : \"\") + \" p-1\";\r\n\r\n    return (\r\n      <td className={className} key={id}>\r\n        <a\r\n          className=\"text-light text-decoration-none\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          tabIndex=\"0\"\r\n          data-bs-toggle=\"tooltip\"\r\n          title={\r\n            state.problemList.problems[ans].name +\r\n            \", Rating:\" +\r\n            state.problemList.problems[ans].rating\r\n          }\r\n          href={getProblemUrl(contestId, index)}>\r\n          {index + \". \"}\r\n          {name}\r\n        </a>\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const contestCard = (contest) => {\r\n    return (\r\n      <tr key={contest.id}>\r\n        <th scope=\"row\">{contest.id}</th>\r\n        <td>\r\n          <div className=\"name\">\r\n            <a\r\n              className=\"text-light text-decoration-none wrap\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title={formateDate(contest.startTimeSeconds)}\r\n              href={getContestUrl(contest.id)}>\r\n              {contest.name}\r\n            </a>\r\n          </div>\r\n          {props.filterState.showDate ? (\r\n            <div className=\"time\">{formateDate(contest.startTimeSeconds)}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </td>\r\n        {[...Array(7)].map((x, i) => {\r\n          return getInfo(contest.id, charInc(\"A\", i));\r\n        })}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.contestlist.map((contest) => {\r\n        return contestCard(contest);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ContestList;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js",["111","112","113"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../util/constants\";\r\n\r\nconst ProblemList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem) => {\r\n    let classes = \"bg-dark\";\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS) classes = \"bg-success\";\r\n    else if (problemState === ATTEMPTED_PROBLEMS) classes = \"bg-danger\";\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{problem.id}</td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className=\"text-light text-decoration-none\"\r\n            target=\"_blank\"\r\n            title={problem.tags}\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>{problem.rating}</td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.problems.map((problem) => {\r\n        return ProblemCard(problem);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.js",["114"],"import {\r\n  ADD_USER,\r\n  CLEAR_USERS,\r\n  CLEAR_USERS_SUBMISSIONS,\r\n  ERROR_FETCHING_USER,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING_USERS,\r\n  LOADING_USER_SUBMISSIONS,\r\n  REMOVE_USER,\r\n} from \"../actions/types\";\r\n\r\nimport {\r\n  SOLVED_PROBLEMS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  ATTEMPTED_CONTESTS,\r\n} from \"../../util/constants\";\r\nimport { act } from \"react-dom/test-utils\";\r\n\r\nconst userInitialState = {\r\n  handles: [],\r\n  userInfo: new Map(),\r\n  error: \"\",\r\n  loading: false,\r\n};\r\n\r\nexport const userReducer = (initState = userInitialState, action) => {\r\n  let newState = { ...initState, loading: false };\r\n  switch (action.type) {\r\n    case LOADING_USERS:\r\n      return { ...userInitialState, loading: true };\r\n    case ADD_USER:\r\n      newState.handles.push(action.payload.handle);\r\n      newState.userInfo.set(action.payload.handle, action.payload);\r\n      return newState;\r\n    case REMOVE_USER:\r\n      newState.handle = initState.handles.filter(\r\n        (handle) => handle !== action.payload.handle\r\n      );\r\n      newState.userInfo.delete(action.payload.handle);\r\n      return newState;\r\n    case ERROR_FETCHING_USER:\r\n      return {\r\n        handles: [],\r\n        userInfo: new Map(),\r\n        error: \"\",\r\n        loading: false,\r\n      };\r\n    case CLEAR_USERS:\r\n      return {\r\n        handles: [],\r\n        userInfo: new Map(),\r\n        error: \"\",\r\n        loading: false,\r\n      };\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n\r\nconst submissionsInitialState = {\r\n  [SOLVED_PROBLEMS]: new Set(),\r\n  [ATTEMPTED_PROBLEMS]: new Set(),\r\n  [SOLVED_CONTESTS]: new Set(),\r\n  [ATTEMPTED_CONTESTS]: new Set(),\r\n  error: \"\",\r\n  loading: false,\r\n};\r\n\r\nexport const userSubmissionsReducer = (\r\n  initState = submissionsInitialState,\r\n  action\r\n) => {\r\n  let currentState = submissionsInitialState;\r\n  switch (action.type) {\r\n    case CLEAR_USERS_SUBMISSIONS:\r\n      return {\r\n        [SOLVED_PROBLEMS]: new Set(),\r\n        [ATTEMPTED_PROBLEMS]: new Set(),\r\n        [SOLVED_CONTESTS]: new Set(),\r\n        [ATTEMPTED_CONTESTS]: new Set(),\r\n        error: \"\",\r\n        loading: false,\r\n      };\r\n    case FETCH_USER_SUBMISSIONS:\r\n      action.payload.result.forEach((element) => {\r\n        let contestId = element.problem.contestId.toString();\r\n        let verdict = element.verdict;\r\n        let problemIndex = element.problem.index;\r\n        if (verdict === \"OK\") {\r\n          currentState[SOLVED_PROBLEMS].add(contestId + problemIndex);\r\n          currentState[SOLVED_CONTESTS].add(contestId);\r\n        } else {\r\n          currentState[ATTEMPTED_PROBLEMS].add(contestId + problemIndex);\r\n          currentState[ATTEMPTED_CONTESTS].add(contestId);\r\n        }\r\n      });\r\n\r\n      for (let id of currentState[SOLVED_PROBLEMS]) {\r\n        currentState[ATTEMPTED_PROBLEMS].delete(id);\r\n      }\r\n\r\n      for (let contestId of currentState[SOLVED_CONTESTS])\r\n        currentState[ATTEMPTED_CONTESTS].delete(contestId);\r\n\r\n      return {\r\n        ...initState,\r\n        ...currentState,\r\n      };\r\n    case ERROR_FETCHING_USER_SUBMISSIONS:\r\n      return {\r\n        ...initState,\r\n        error: \"Error Fetching Submissions\",\r\n      };\r\n    case LOADING_USER_SUBMISSIONS:\r\n      return {\r\n        ...initState,\r\n        loading: true,\r\n      };\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.js",["115"],"import { getUserInfo, getUserSubmissions } from \"../../util/bashforces\";\r\nimport { load, errorFecthing } from \"./fetchActions\";\r\nimport {\r\n  ADD_USER,\r\n  CLEAR_USERS,\r\n  ERROR_FETCHING_USER,\r\n  LOADING_USERS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING_USER_SUBMISSIONS,\r\n  CLEAR_USERS_SUBMISSIONS,\r\n} from \"./types\";\r\n\r\nexport const clearUsers = (dispatch) =>\r\n  new Promise((resolve, reject) => {\r\n    dispatch({\r\n      type: CLEAR_USERS,\r\n    });\r\n    resolve();\r\n  });\r\n\r\nexport const fetchUsers = (dispatch, handle) =>\r\n  new Promise((resolve, reject) => {\r\n    dispatch(load(LOADING_USERS));\r\n    clearUsers(dispatch).then(() => {\r\n      fetch(getUserInfo(handle))\r\n        .then((res) => res.json())\r\n        .then(\r\n          (result) => {\r\n            if (result.status !== \"OK\")\r\n              dispatch(errorFecthing(ERROR_FETCHING_USER, result.comment));\r\n            else {\r\n              result.result.map((user) =>\r\n                dispatch({ type: ADD_USER, payload: user })\r\n              );\r\n            }\r\n          },\r\n          // Note: it's important to handle errors here\r\n          // instead of a catch() block so that we don't swallow\r\n          // exceptions from actual bugs in components.\r\n          (error) => {\r\n            dispatch(errorFecthing(ERROR_FETCHING_USER, \"ERROR FETCHING USER\"));\r\n          }\r\n        )\r\n        .catch((e) => {\r\n          //  console.log(e);\r\n          dispatch(errorFecthing(ERROR_FETCHING_USER, \"ERROR FETCHING USER\"));\r\n        });\r\n    });\r\n    resolve();\r\n  });\r\n\r\nconst userStatus = \"https://codeforces.com/api/user.status?handle=bashem\";\r\n\r\nexport const fetchUserSubmissions = (dispatch, handles) => {\r\n  dispatch({ type: CLEAR_USERS_SUBMISSIONS });\r\n  console.log(handles);\r\n  for (let handle of handles) {\r\n    dispatch(load(LOADING_USER_SUBMISSIONS));\r\n    console.log(getUserSubmissions(handle));\r\n    fetch(getUserSubmissions(handle))\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.status !== \"OK\")\r\n            return errorFecthing(\r\n              ERROR_FETCHING_USER_SUBMISSIONS,\r\n              \"Status Failed\"\r\n            );\r\n          console.log(result);\r\n          return dispatch({\r\n            type: FETCH_USER_SUBMISSIONS,\r\n            payload: { result: result.result, handle },\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          return dispatch(\r\n            errorFecthing(\r\n              ERROR_FETCHING_USER_SUBMISSIONS,\r\n              \"ERROR in User Submission\" + error\r\n            )\r\n          );\r\n        }\r\n      )\r\n      .catch((e) => {\r\n        // console.log(e);\r\n        return dispatch(\r\n          errorFecthing(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"ERROR in User Submission\" + e\r\n          )\r\n        );\r\n      });\r\n  }\r\n};\r\n",{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":28,"nodeType":"122","messageId":"123","endLine":2,"endColumn":36},{"ruleId":"120","severity":1,"message":"124","line":3,"column":27,"nodeType":"122","messageId":"123","endLine":3,"endColumn":33},{"ruleId":"120","severity":1,"message":"125","line":3,"column":50,"nodeType":"122","messageId":"123","endLine":3,"endColumn":54},{"ruleId":"120","severity":1,"message":"126","line":6,"column":3,"nodeType":"122","messageId":"123","endLine":6,"endColumn":19},{"ruleId":"120","severity":1,"message":"127","line":7,"column":3,"nodeType":"122","messageId":"123","endLine":7,"endColumn":19},{"ruleId":"120","severity":1,"message":"128","line":8,"column":3,"nodeType":"122","messageId":"123","endLine":8,"endColumn":23},{"ruleId":"120","severity":1,"message":"129","line":16,"column":9,"nodeType":"122","messageId":"123","endLine":16,"endColumn":17},{"ruleId":"120","severity":1,"message":"130","line":23,"column":7,"nodeType":"122","messageId":"123","endLine":23,"endColumn":14},{"ruleId":"120","severity":1,"message":"131","line":40,"column":7,"nodeType":"122","messageId":"123","endLine":40,"endColumn":18},{"ruleId":"120","severity":1,"message":"132","line":74,"column":7,"nodeType":"122","messageId":"123","endLine":74,"endColumn":22},{"ruleId":"120","severity":1,"message":"133","line":3,"column":17,"nodeType":"122","messageId":"123","endLine":3,"endColumn":26},{"ruleId":"134","severity":1,"message":"135","line":54,"column":13,"nodeType":"136","endLine":60,"endColumn":24},{"ruleId":"137","severity":1,"message":"138","line":84,"column":29,"nodeType":"139","messageId":"140","endLine":84,"endColumn":31},{"ruleId":"141","severity":1,"message":"142","line":93,"column":6,"nodeType":"143","endLine":93,"endColumn":26,"suggestions":"144"},{"ruleId":"137","severity":1,"message":"145","line":271,"column":37,"nodeType":"139","messageId":"140","endLine":271,"endColumn":39},{"ruleId":"137","severity":1,"message":"138","line":276,"column":35,"nodeType":"139","messageId":"140","endLine":276,"endColumn":37},{"ruleId":"137","severity":1,"message":"138","line":278,"column":38,"nodeType":"139","messageId":"140","endLine":278,"endColumn":40},{"ruleId":"146","severity":1,"message":"147","line":320,"column":29,"nodeType":"148","endLine":328,"endColumn":30},{"ruleId":"141","severity":1,"message":"149","line":66,"column":6,"nodeType":"143","endLine":66,"endColumn":26,"suggestions":"150"},{"ruleId":"137","severity":1,"message":"145","line":232,"column":41,"nodeType":"139","messageId":"140","endLine":232,"endColumn":43},{"ruleId":"137","severity":1,"message":"138","line":237,"column":39,"nodeType":"139","messageId":"140","endLine":237,"endColumn":41},{"ruleId":"137","severity":1,"message":"138","line":239,"column":42,"nodeType":"139","messageId":"140","endLine":239,"endColumn":44},{"ruleId":"120","severity":1,"message":"133","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":26},{"ruleId":"120","severity":1,"message":"121","line":1,"column":28,"nodeType":"122","messageId":"123","endLine":1,"endColumn":36},{"ruleId":"120","severity":1,"message":"151","line":10,"column":3,"nodeType":"122","messageId":"123","endLine":10,"endColumn":21},{"ruleId":"120","severity":1,"message":"152","line":12,"column":3,"nodeType":"122","messageId":"123","endLine":12,"endColumn":18},{"ruleId":"137","severity":1,"message":"138","line":54,"column":21,"nodeType":"139","messageId":"140","endLine":54,"endColumn":23},{"ruleId":"120","severity":1,"message":"133","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":26},{"ruleId":"120","severity":1,"message":"121","line":1,"column":28,"nodeType":"122","messageId":"123","endLine":1,"endColumn":36},{"ruleId":"153","severity":1,"message":"154","line":29,"column":11,"nodeType":"136","endLine":33,"endColumn":68},{"ruleId":"120","severity":1,"message":"155","line":19,"column":10,"nodeType":"122","messageId":"123","endLine":19,"endColumn":13},{"ruleId":"120","severity":1,"message":"156","line":53,"column":7,"nodeType":"122","messageId":"123","endLine":53,"endColumn":17},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Link' is defined but never used.","'fetchContestList' is defined but never used.","'fetchProblemList' is defined but never used.","'fetchUserSubmissions' is defined but never used.","'dispatch' is assigned a value but never used.","'problem' is assigned a value but never used.","'submissions' is assigned a value but never used.","'failedUserFethc' is assigned a value but never used.","'useEffect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterProblem' and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.","ArrayExpression",["159"],"Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'contestList' and 'filterContest'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["160"],"'ATTEMPTED_CONTESTS' is defined but never used.","'SOLVED_CONTESTS' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'act' is defined but never used.","'userStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [state, filterState, problemList, filterProblem]",{"range":"165","text":"166"},"Update the dependencies array to be: [state, filterState, contestList, filterContest]",{"range":"167","text":"168"},[2977,2997],"[state, filterState, problemList, filterProblem]",[1980,2000],"[state, filterState, contestList, filterContest]"]