[{"F:\\web\\react\\codeforces-api\\src\\index.tsx":"1","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx":"2","F:\\web\\react\\codeforces-api\\src\\App.tsx":"3","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx":"4","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx":"5","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx":"6","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx":"7","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx":"8","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx":"9","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts":"11","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts":"12","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts":"13","F:\\web\\react\\codeforces-api\\src\\data\\store.ts":"14","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts":"16","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts":"18","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts":"19","F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts":"20","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts":"21","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts":"22","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts":"23","F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts":"24","F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts":"25"},{"size":767,"mtime":1618398758923,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1617775898144,"results":"28","hashOfConfig":"27"},{"size":1689,"mtime":1618398631384,"results":"29","hashOfConfig":"27"},{"size":3753,"mtime":1618583568301,"results":"30","hashOfConfig":"27"},{"size":16749,"mtime":1618486458766,"results":"31","hashOfConfig":"27"},{"size":1147,"mtime":1618400510901,"results":"32","hashOfConfig":"27"},{"size":12669,"mtime":1618486441647,"results":"33","hashOfConfig":"27"},{"size":1948,"mtime":1618402097817,"results":"34","hashOfConfig":"27"},{"size":1524,"mtime":1617880137841,"results":"35","hashOfConfig":"27"},{"size":6490,"mtime":1618579759588,"results":"36","hashOfConfig":"27"},{"size":410,"mtime":1617879429205,"results":"37","hashOfConfig":"27"},{"size":1598,"mtime":1618485983769,"results":"38","hashOfConfig":"27"},{"size":998,"mtime":1618488169808,"results":"39","hashOfConfig":"27"},{"size":6048,"mtime":1618665475399,"results":"40","hashOfConfig":"27"},{"size":3020,"mtime":1618571435369,"results":"41","hashOfConfig":"27"},{"size":4845,"mtime":1618573273516,"results":"42","hashOfConfig":"27"},{"size":5587,"mtime":1618665350724,"results":"43","hashOfConfig":"27"},{"size":2760,"mtime":1618481606744,"results":"44","hashOfConfig":"27"},{"size":2108,"mtime":1618400044658,"results":"45","hashOfConfig":"27"},{"size":1231,"mtime":1617881099452,"results":"46","hashOfConfig":"27"},{"size":955,"mtime":1618400024844,"results":"47","hashOfConfig":"27"},{"size":1115,"mtime":1618485329167,"results":"48","hashOfConfig":"27"},{"size":2510,"mtime":1618665333803,"results":"49","hashOfConfig":"27"},{"size":141,"mtime":1618487216532,"results":"50","hashOfConfig":"27"},{"size":586,"mtime":1618579869282,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1flmqtp",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"F:\\web\\react\\codeforces-api\\src\\index.tsx",[],["113","114"],"F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx",[],["115","116"],"F:\\web\\react\\codeforces-api\\src\\App.tsx",["117","118","119","120","121","122"],"import \"./App.css\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchContestList,\r\n  fetchProblemList,\r\n  fetchSharedProblemList,\r\n} from \"./data/actions/fetchActions\";\r\n\r\nimport { fetchUserSubmissions } from \"./data/actions/userActions\";\r\n\r\nimport Menu from \"./components/Menu\";\r\nimport ProblemPage from \"./components/problem/ProblemPage\";\r\nimport ContestPage from \"./components/contest/ContestPage\";\r\nimport HomePage from \"./components/home/HomePage\";\r\nimport { PROBLEMS, CONTESTS } from \"./util/constants\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    // fetchProblemList(dispatch);\r\n    // fetchUserSubmissions(dispatch, state.userList.handles);\r\n    // fetchContestList(dispatch);\r\n    // fetchSharedProblemList(dispatch);\r\n    document.body.classList.add(\"bg-dark\");\r\n    document.title = \"BashForces\";\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App container-fluid bg-dark min-vh-100 d-flex justify-content-between  flex-column\">\r\n      <div className=\"top\">\r\n        <div className=\"menu w-100\">\r\n          <Menu />\r\n        </div>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route path={PROBLEMS} component={ProblemPage} />\r\n          <Route strict path={CONTESTS} component={ContestPage} />\r\n        </Switch>\r\n      </div>\r\n      <footer className=\"text-light text-center justify-content-center p-3 w-100 align-self-end\">\r\n        All rights reserved by @Bashem\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx",["123","124","125","126","127","128"],"import { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  fetchContestList,\r\n  fetchProblemList,\r\n  fetchSharedProblemList,\r\n} from \"../data/actions/fetchActions\";\r\nimport { fetchUserSubmissions, fetchUsers } from \"../data/actions/userActions\";\r\nimport { RootState, RootStateType } from \"../data/store\";\r\nimport { PROBLEMS, CONTESTS } from \"../util/constants\";\r\nimport { ProblemShared } from \"../util/DataTypes/Problem\";\r\nimport { Verdict } from \"../util/DataTypes/Submission\";\r\n\r\nconst Menu = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const [handle, setHandle] = useState(\r\n    state.userList.handles.length ? state.userList.handles.toString() : \"\"\r\n  );\r\n  console.log(state.userList.handles.toString());\r\n  useEffect(() => {\r\n     sync();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n  }, [state.userList]);\r\n\r\n  const sync = () => {\r\n    fetchProblemList(dispatch);\r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n    fetchContestList(dispatch);\r\n    fetchSharedProblemList(dispatch);\r\n  };\r\n\r\n  const submitUser = () => {\r\n    // Notification.info({\r\n    //   title: \"User submitted!\",\r\n    //   duration: 200,\r\n    //   description: \"hh\",\r\n    // });\r\n    // toast.error(\"🦄 Wow so easy!\", {\r\n    //   position: \"bottom-right\",\r\n    //   autoClose: 2001,\r\n    //   hideProgressBar: false,\r\n    //   closeOnClick: true,\r\n    //   pauseOnHover: true,\r\n    //   draggable: true,\r\n    //   progress: undefined,\r\n    // });\r\n    fetchUsers(dispatch, handle);\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light p-2\">\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarTogglerDemo03\"\r\n        aria-controls=\"navbarTogglerDemo03\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n        BashForces\r\n      </Link>\r\n\r\n      <div\r\n        className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n        id=\"navbarTogglerDemo03\">\r\n        <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n          <li className=\"nav-item active\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                sync();\r\n              }}\r\n              href=\"#\">\r\n              <FontAwesomeIcon icon={faSync} />\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item active\">\r\n            <Link to={PROBLEMS} className=\"nav-link\" href=\"#\">\r\n              Problem List\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={CONTESTS} className=\"nav-link\" href=\"#\">\r\n              Contest\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n        <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            name=\"handle\"\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx",["129","130","131"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport { sortByRating, sortBySolveCount } from \"../../util/sortMethods\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n  SEARCH,\r\n  PROBLEMS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport ProblemList from \"./ProblemList\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faSort,\r\n  faSortDown,\r\n  faSortUp,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst ProblemPage = () => {\r\n  const state = useSelector((state) => state);\r\n  const history = useHistory();\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = -1,\r\n    SORT_BY_RATING = 1,\r\n    SORT_BY_SOLVE = 2,\r\n    ASCENDING = 0,\r\n    DESCENDING = 1;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    rating: { min_rating: -1, max_rating: 4000 },\r\n    tags: new Set(),\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n    sortBy: SORT_BY_SOLVE,\r\n    order: DESCENDING,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [problemList, setProblemList] = useState({ problems: [], error: \"\" });\r\n  const [tagList, setTagList] = useState({ tags: [] });\r\n  const [randomProblem, setRandomProblem] = useState(-1);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n\r\n  const filterProblem = (problem) => {\r\n    let containTags = false;\r\n\r\n    if (filterState.tags.size === 0) containTags = true;\r\n    else\r\n      for (let tag of problem.tags)\r\n        if (filterState.tags.has(tag)) {\r\n          containTags = true;\r\n          break;\r\n        }\r\n    let ratingInside =\r\n      problem.rating <= filterState.rating.max_rating &&\r\n      problem.rating >= filterState.rating.min_rating;\r\n    let solveStatus = filterState.solveStatus.includes(getState(problem));\r\n\r\n    let searchIncluded = true;\r\n    let text = filterState.search.toLowerCase().trim();\r\n    if (text.length)\r\n      searchIncluded =\r\n        problem.name.toLowerCase().includes(text) ||\r\n        problem.id.toLowerCase().includes(text);\r\n\r\n    return solveStatus && ratingInside && containTags && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n      });\r\n    if (state.problemList.problems !== undefined) {\r\n      let newState = { problems: [] };\r\n      newState.problems = state.problemList.problems;\r\n\r\n      newState.problems = newState.problems.filter((problem) =>\r\n        filterProblem(problem)\r\n      );\r\n\r\n      if (filterState.sortBy === SORT_BY_RATING)\r\n        newState.problems.sort(sortByRating);\r\n      else newState.problems.sort(sortBySolveCount);\r\n      if (filterState.order === DESCENDING) newState.problems.reverse();\r\n\r\n      let tags = [];\r\n      for (let tag of state.problemList.tags) tags.push(tag);\r\n      setTagList({ tags });\r\n      setProblemList({ ...problemList, problems: newState.problems });\r\n    }\r\n    setRandomProblem(-1);\r\n    setSelected(0);\r\n  }, [state, filterState]);\r\n\r\n  const sortList = (sortBy) => {\r\n    if (filterState.sortBy === sortBy)\r\n      setFilterState({ ...filterState, order: filterState.order ^ 1 });\r\n    else\r\n      setFilterState({\r\n        ...filterState,\r\n        ...{\r\n          order: sortBy === SORT_BY_RATING ? ASCENDING : DESCENDING,\r\n          sortBy: sortBy,\r\n        },\r\n      });\r\n  };\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const searchData = (e) => {\r\n    setFilterState({ ...filterState, search: e.target.value });\r\n  };\r\n\r\n  const chooseRandom = () => {\r\n    if (problemList.problems.length === 0) return;\r\n    setRandomProblem(getRandomInteger(0, problemList.problems.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(problemList.problems.length, lo + filterState.perPage);\r\n\r\n    if (lo > high) return [];\r\n    return problemList.problems.slice(lo, high);\r\n  };\r\n\r\n  const nuetral = () => {\r\n    return <FontAwesomeIcon icon={faSort} />;\r\n  };\r\n\r\n  const less = () => {\r\n    return <FontAwesomeIcon icon={faSortUp} />;\r\n  };\r\n\r\n  const greater = () => {\r\n    return <FontAwesomeIcon icon={faSortDown} />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs d-flex justify-content-between container border-0 mt-3\">\r\n          <li className=\"nav-item col-4\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0\"\r\n              onSubmit={(e) => e.preventDefault()}>\r\n              <input\r\n                className=\"form-control mr-sm-2 bg-dark text-light\"\r\n                type=\"text\"\r\n                placeholder=\"Problem Name or Id\"\r\n                aria-label=\"Search\"\r\n                value={filterState.search}\r\n                onChange={(e) => {\r\n                  setFilterState({\r\n                    ...filterState,\r\n                    search: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n          <li className=\"nav-item text-secondary h-6\">\r\n            Showing {paginate().length} of {problemList.problems.length}\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                onClick={chooseRandom}\r\n                title=\"Find Random Contest\">\r\n                <FontAwesomeIcon icon={faRandom} />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                title=\"Cancel Random\"\r\n                onClick={() => setRandomProblem(-1)}>\r\n                <FontAwesomeIcon icon={faRedo} />\r\n              </button>\r\n            </div>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-bs-toggle=\"modal\"\r\n              data-bs-target=\"#exampleModal\">\r\n              {<FontAwesomeIcon icon={faFilter} />}\r\n            </button>\r\n            <div\r\n              className=\"modal\"\r\n              id=\"exampleModal\"\r\n              tabIndex={-1}\r\n              aria-labelledby=\"exampleModalLabel\"\r\n              aria-hidden=\"true\">\r\n              <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                      Modal title\r\n                    </h5>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"></button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <div className=\"group\">\r\n                      <form\r\n                        className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                        onSubmit={(e) => e.preventDefault()}>\r\n                        <div className=\"d-flex justify-content-between w-100\">\r\n                          <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                              <label\r\n                                className=\"input-group-text\"\r\n                                htmlFor=\"inputGroupSelect01\">\r\n                                Per Page\r\n                              </label>\r\n                            </div>\r\n                            <select\r\n                              className=\"custom-select\"\r\n                              id=\"inputGroupSelect01\"\r\n                              value={filterState.perPage}\r\n                              onChange={(e) => {\r\n                                let num: number = parseInt(e.target.value);\r\n                                setFilterState({\r\n                                  ...filterState,\r\n                                  perPage: num,\r\n                                });\r\n                              }}>\r\n                              <option value=\"20\">20</option>\r\n                              <option value=\"50\">50</option>\r\n                              <option value=\"100\">100</option>\r\n                              <option value={problemList.problems.length}>\r\n                                All\r\n                              </option>\r\n                            </select>\r\n                          </div>\r\n                          <div className=\"input-group d-flex justify-content-end\">\r\n                            <button\r\n                              className=\"btn btn-light nav-link h-6\"\r\n                              onClick={() => setFilterState(initFilterState)}\r\n                              title=\"Reset To Default State\">\r\n                              <FontAwesomeIcon icon={faRedoAlt} />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {initFilterState.solveStatus.map((solved) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.solveStatus.includes(solved)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={solved}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            let ind = filterState.solveStatus.indexOf(solved);\r\n                            if (ind != -1)\r\n                              myFilterState.solveStatus.splice(ind, 1);\r\n                            else myFilterState.solveStatus.push(solved);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {solved === SOLVED\r\n                            ? \"Solved\"\r\n                            : solved === ATTEMPTED\r\n                            ? \"Attempted\"\r\n                            : \"Unsolved\"}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <form\r\n                      className=\"\"\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}>\r\n                      <div className=\"d-flex\">\r\n                        <div className=\"input-group pe-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Min Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Min Rating\"\r\n                            value={filterState.rating.min_rating}\r\n                            name={\"minRating\"}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  min_rating: parseInt(e.target.value),\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <div className=\"input-group ps-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Max Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Max Rating\"\r\n                            value={filterState.rating.max_rating}\r\n                            name={\"maxRating\"}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  max_rating: parseInt(e.target.value),\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {tagList.tags.map((tag) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.tags.has(tag)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={tag}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            if (filterState.tags.has(tag))\r\n                              myFilterState.tags.delete(tag);\r\n                            else myFilterState.tags.add(tag);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {tag}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"p-2\">\r\n        <Pagination\r\n          totalCount={problemList.problems.length}\r\n          perPage={filterState.perPage}\r\n          selected={selected}\r\n          pageSelected={(e) => setSelected(e)}\r\n        />\r\n      </div>\r\n      <table className=\"table table-bordered table-dark container\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">SL</th>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_RATING)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Rating</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_RATING\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_SOLVE)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Solve Count</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_SOLVE\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {randomProblem === -1 ? (\r\n            <ProblemList problems={paginate()} />\r\n          ) : (\r\n            <ProblemList problems={[problemList.problems[randomProblem]]} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        totalCount={problemList.problems.length}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        pageSelected={(e) => setSelected(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx",["132","133"],"import React, { useEffect,useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { fetchUsers } from \"../../data/actions/userActions\";\r\nimport { CONTESTS } from \"../../util/constants\";\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst history = useHistory();\r\n\thistory.push(CONTESTS);\r\n\r\n\tconst submitUser = () => {\r\n\t\tfetchUsers(dispatch,handle);\r\n\t}\r\n\r\n  useEffect(() => {\r\n    // fetchProblemList(dispatch);\r\n    // fetchContestList(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\t\t\t{/* <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx",["134","135","136"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { charInc, getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport ContestList from \"./ContestList\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  CONTESTS,\r\n  SEARCH,\r\n  SOLVED_CONTESTS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst ContestPage = () => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const history = useHistory();\r\n\r\n  const [contestList, setContestList] = useState({ contests: [], error: \"\" });\r\n  const [randomContest, setRandomContest] = useState(-1);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = 2;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n    showDate: 0,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const contestStatus = (contestId) => {\r\n    if (state.userSubmissions[SOLVED_CONTESTS].has(contestId)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_CONTESTS].has(contestId))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const filterContest = (contest) => {\r\n    let solveStatus = filterState.solveStatus.includes(\r\n      contestStatus(contest.id.toString())\r\n    );\r\n\r\n    let searchIncluded = true;\r\n\r\n    let text = filterState.search.toLowerCase().trim();\r\n\r\n    if (text.length)\r\n      searchIncluded =\r\n        contest.name.toLowerCase().includes(text) ||\r\n        contest.id.toString().includes(text);\r\n\r\n    return solveStatus && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: CONTESTS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: CONTESTS,\r\n      });\r\n    let contests = state.contestList.contests;\r\n\r\n    const newContestList = contests.filter((contest) => filterContest(contest));\r\n\r\n    setContestList({ ...contestList, contests: newContestList });\r\n    setRandomContest(-1);\r\n  }, [state, filterState]);\r\n\r\n  const chooseRandom = () => {\r\n    if (contestList.contests.length === 0) return;\r\n    setRandomContest(getRandomInteger(0, contestList.contests.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(contestList.contests.length, lo + filterState.perPage);\r\n\r\n    if (lo > high) return [];\r\n    return contestList.contests.slice(lo, high);\r\n  };\r\n\r\n  return (\r\n    <div className=\"div\">\r\n      <div className=\"menu\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark container bg-dark p-2\">\r\n          <div\r\n            className=\"collapse navbar-collapse d-flex justify-content-between\"\r\n            id=\"navbarTogglerDemo03\">\r\n            <ul className=\"navbar w-100 navbar-dark d-flex justify-content-between bg-dark list-unstyled\">\r\n              <li className=\"nav-item col-6\">\r\n                <form\r\n                  className=\"form-inline d-flex my-2 my-lg-0\"\r\n                  onSubmit={(e) => e.preventDefault()}>\r\n                  <input\r\n                    className=\"form-control bg-dark text-light mr-sm-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Contest Name or Id\"\r\n                    aria-label=\"Search\"\r\n                    value={filterState.search}\r\n                    onChange={(e) => {\r\n                      setFilterState({\r\n                        ...filterState,\r\n                        search: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </form>\r\n              </li>\r\n              <li className=\"nav-item text-secondary\">\r\n                Showing {paginate().length} of {contestList.contests.length}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <div\r\n                  className=\"btn-group\"\r\n                  role=\"group\"\r\n                  aria-label=\"Basic example\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    onClick={chooseRandom}\r\n                    title=\"Find Random Contest\">\r\n                    <FontAwesomeIcon icon={faRandom} />\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    title=\"Cancel Random\"\r\n                    onClick={() => setRandomContest(-1)}>\r\n                    <FontAwesomeIcon icon={faRedo} />\r\n                  </button>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  data-bs-toggle=\"modal\"\r\n                  data-bs-target=\"#exampleModal\">\r\n                  {<FontAwesomeIcon icon={faFilter} />}\r\n                </button>\r\n                <div\r\n                  className=\"modal\"\r\n                  id=\"exampleModal\"\r\n                  tabIndex={-1}\r\n                  aria-labelledby=\"exampleModalLabel\"\r\n                  aria-hidden=\"true\">\r\n                  <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                      <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                          Filter\r\n                        </h5>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn-close\"\r\n                          data-bs-dismiss=\"modal\"\r\n                          aria-label=\"Close\"></button>\r\n                      </div>\r\n                      <div className=\"modal-body\">\r\n                        <div className=\"group\">\r\n                          <form\r\n                            className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                            onSubmit={(e) => e.preventDefault()}>\r\n                            <div className=\"d-flex justify-content-between w-100\">\r\n                              <div className=\"input-group mb-3\">\r\n                                <div className=\"input-group-prepend\">\r\n                                  <label\r\n                                    className=\"input-group-text\"\r\n                                    htmlFor=\"inputGroupSelect01\">\r\n                                    Per Page\r\n                                  </label>\r\n                                </div>\r\n                                <select\r\n                                  className=\"custom-select\"\r\n                                  id=\"inputGroupSelect01\"\r\n                                  value={filterState.perPage}\r\n                                  onChange={(e) => {\r\n                                    let num: number = parseInt(e.target.value);\r\n\r\n                                    setFilterState({\r\n                                      ...filterState,\r\n                                      perPage: num,\r\n                                    });\r\n                                  }}>\r\n                                  <option value=\"20\">20</option>\r\n                                  <option value=\"50\">50</option>\r\n                                  <option value=\"100\">100</option>\r\n                                  <option value={contestList.contests.length}>\r\n                                    All\r\n                                  </option>\r\n                                </select>\r\n                              </div>\r\n                              <div className=\"input-group d-flex justify-content-end\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Show Date\r\n                                </span>\r\n                                <div className=\"input-group-text\">\r\n                                  <input\r\n                                    className=\"form-check-input mt-0\"\r\n                                    type=\"checkbox\"\r\n                                    defaultChecked={filterState.showDate == 1}\r\n                                    onChange={() =>\r\n                                      setFilterState({\r\n                                        ...filterState,\r\n                                        showDate: filterState.showDate ^ 1,\r\n                                      })\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                              <button\r\n                                className=\"btn btn-secondary nav-link m-2 h-6\"\r\n                                onClick={() => setFilterState(initFilterState)}\r\n                                title=\"Reset To Default State\">\r\n                                <FontAwesomeIcon icon={faRedoAlt} />\r\n                              </button>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                        <div\r\n                          className=\"btn-group d-flex flex-wrap justify-content-between\"\r\n                          role=\"group\"\r\n                          aria-label=\"First group\">\r\n                          {initFilterState.solveStatus.map((solved) => (\r\n                            <button\r\n                              className={\r\n                                (filterState.solveStatus.includes(solved)\r\n                                  ? \"btn bg-success\"\r\n                                  : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                              }\r\n                              key={solved}\r\n                              onClick={() => {\r\n                                let myFilterState = { ...filterState };\r\n                                let ind = filterState.solveStatus.indexOf(\r\n                                  solved\r\n                                );\r\n                                if (ind != -1)\r\n                                  myFilterState.solveStatus.splice(ind, 1);\r\n                                else myFilterState.solveStatus.push(solved);\r\n                                setFilterState(myFilterState);\r\n                              }}>\r\n                              {solved === SOLVED\r\n                                ? \"Solved\"\r\n                                : solved === ATTEMPTED\r\n                                ? \"Attempted\"\r\n                                : \"Unsolved\"}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      {/* <PaginationComponent /> */}\r\n\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n      <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered table-dark overflow-auto\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th scope=\"col\" className=\"sticky-col\">SL</th>\r\n              <th scope=\"col\">#</th>\r\n              <th scope=\"col\">Contest Name</th>\r\n              {[...Array(10)].map((x, i) => {\r\n                return <th scope=\"col\">{charInc(\"A\", i)}</th>;\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <ContestList\r\n              contestlist={\r\n                randomContest === -1\r\n                  ? paginate()\r\n                  : [contestList.contests[randomContest]]\r\n              }\r\n              filterState={filterState}\r\n            />\r\n          </tbody>\r\n        </table>\r\n        <Pagination\r\n          pageSelected={(e) => setSelected(e)}\r\n          perPage={filterState.perPage}\r\n          selected={selected}\r\n          totalCount={contestList.contests.length}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx",["137","138"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\ninterface ProblemListProps {\r\n  problems: Problem[];\r\n}\r\n\r\nconst ProblemList = ({ problems }: ProblemListProps): JSX.Element => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getState = (problem: Problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem: Problem, index: number) => {\r\n    let classes = \"bg-dark\";\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS) classes = \"bg-success\";\r\n    else if (problemState === ATTEMPTED_PROBLEMS) classes = \"bg-danger\";\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{index+1}</td>\r\n        <td className={\"id font-weight-bold \" + classes}>{problem.id}</td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className=\"text-light text-decoration-none\"\r\n            target=\"_blank\"\r\n            title={problem.tags.toString()}\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>\r\n          {problem.rating != -1 ? problem.rating : \"Not Rated\"}\r\n        </td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {problems.map((problem: Problem, index: number) => {\r\n        return ProblemCard(problem, index);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx",[],"F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx",["139","140"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Contest from \"../../util/DataTypes/Contest\";\r\n\r\nconst ContestList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const related = state.sharedProblems.problems;\r\n\r\n  const getProblem = (contestId, index) => {\r\n    let l = 0,\r\n      r = state.problemList.problems.length - 1;\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (\r\n        state.problemList.problems[mid].contestId === contestId &&\r\n        state.problemList.problems[mid].index === index\r\n      )\r\n        return state.problemList.problems[mid];\r\n\r\n      if (\r\n        state.problemList.problems[mid].contestId > contestId ||\r\n        (state.problemList.problems[mid].contestId === contestId &&\r\n          state.problemList.problems[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getStatus = (contestId, index, id, solveStatus) => {\r\n    let res = state.userSubmissions[solveStatus].has(id);\r\n    if (!res) {\r\n      let sharedIndex = getSharedIndex(contestId, index);\r\n      if (sharedIndex != -1) {\r\n        for (let problem of related[sharedIndex].shared) {\r\n          res |= state.userSubmissions[solveStatus].has(problem.id);\r\n        }\r\n      }\r\n    }\r\n    //if(contestId == 1495)\r\n    return res;\r\n  };\r\n\r\n  const renderProblem = (problem) => {\r\n    let solved = getStatus(\r\n      problem.contestId,\r\n      problem.index,\r\n      problem.id,\r\n      SOLVED_PROBLEMS\r\n    );\r\n    let attempted = getStatus(\r\n      problem.contestId,\r\n      problem.index,\r\n      problem.id,\r\n      ATTEMPTED_PROBLEMS\r\n    );\r\n\r\n    let name = problem.name;\r\n    let id = problem.id;\r\n    if (name.length > 10) name = name.substring(0, 9) + \"...\";\r\n\r\n    let className =\r\n      (solved ? \"bg-success\" : attempted ? \"bg-danger\" : \"\") + \" p-1\";\r\n\r\n    return (\r\n      <td className={className} key={id}>\r\n        <a\r\n          className=\"text-light text-decoration-none\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          tabIndex={0}\r\n          data-bs-toggle=\"tooltip\"\r\n          title={problem.name + \", Rating:\" + problem.rating}\r\n          href={getProblemUrl(problem.contestId, problem.index)}>\r\n          {problem.index + \". \"}\r\n          {name}\r\n        </a>\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const getSharedIndex = (contestId, index) => {\r\n    let l = 0,\r\n      r = related.length - 1;\r\n\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (related[mid].contestId === contestId && related[mid].index === index)\r\n        return mid;\r\n      if (\r\n        related[mid].contestId > contestId ||\r\n        (related[mid].contestId === contestId && related[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getProblemsList = (contestId, index, first = true) => {\r\n    let problem = getProblem(contestId, index);\r\n\r\n    let problems = [];\r\n    if (problem === -1) {\r\n      let problem1 = getProblem(contestId, index + \"1\");\r\n      if (problem1 === -1 && first === true) {\r\n        let sharedIndex = getSharedIndex(contestId, index);\r\n        if (sharedIndex != -1) {\r\n          for (let sharedProblem of related[sharedIndex].shared) {\r\n            let currentGetInfo = getProblemsList(\r\n              sharedProblem.contestId,\r\n              sharedProblem.index,\r\n              false\r\n            );\r\n\r\n            if (currentGetInfo.length === 1 && currentGetInfo[0] === -1)\r\n              continue;\r\n            for (let currentProblem of currentGetInfo) {\r\n              let current = { ...currentProblem };\r\n              current.contestId = contestId;\r\n              current.index = current.index.split(\"\");\r\n              current.index[0] = index.charAt(0);\r\n              current.index = current.index.join(\"\");\r\n              current.id = current.contestId.toString() + index;\r\n              problems.push(current);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        problems.push(problem1);\r\n        for (let c: number = 2; c <= 3; c++) {\r\n          problem1 = getProblem(contestId, index + c.toString());\r\n          if (problem1 === -1) break;\r\n          problems.push(problem1);\r\n        }\r\n      }\r\n    } else problems.push(problem);\r\n\r\n    return problems;\r\n  };\r\n\r\n  const getInfo = (contestId, index) => {\r\n    const EMPTY = \"EMPTY bg-dark\";\r\n\r\n    let problems = getProblemsList(contestId, index);\r\n\r\n    if (problems.length === 0) {\r\n      return <td key={contestId + index} className={EMPTY}></td>;\r\n    }\r\n\r\n    if (problems.length === 1) {\r\n      return renderProblem(problems[0]);\r\n    }\r\n\r\n    if (problems.length === 2) {\r\n      let cnt : number = 0;\r\n\r\n      return (\r\n        <td className=\"p-0\" key={contestId + index.charAt(0)}>\r\n          <table>\r\n            <tbody>\r\n              <tr className=\"inside p-0\" key={contestId + index + cnt++}>\r\n                {problems.map((element) => renderProblem(element))}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </td>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <td className=\"inside p-0\" key={contestId + index}>\r\n        More than 4\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const contestCard = (contest, index) => {\r\n    return (\r\n      <tr key={contest.id}>\r\n        <th scope=\"row sticky-col\">{index + 1}</th>\r\n        <th scope=\"row\">{contest.id}</th>\r\n        <td>\r\n          <div className=\"name\">\r\n            <a\r\n              className=\"text-light text-decoration-none wrap\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title={formateDate(contest.startTimeSeconds)}\r\n              href={getContestUrl(contest.id)}>\r\n              {contest.name}\r\n            </a>\r\n          </div>\r\n          {props.filterState.showDate ? (\r\n            <div className=\"time\">{formateDate(contest.startTimeSeconds)}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </td>\r\n        {[...Array(10)].map((x, i) => {\r\n          return getInfo(contest.id, charInc(\"A\", i));\r\n        })}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.contestlist.map((contest: Contest, index: number) => {\r\n        return contestCard(contest, index);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ContestList;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.ts",["141","142","143","144","145","146","147"],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts",["148","149","150"],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts",["151","152"],"import {\r\n  getUserInfoURL,\r\n  getUserSubmissionsURL,\r\n  stringToArray,\r\n} from \"../../util/bashforces\";\r\nimport Submission from \"../../util/DataTypes/Submission\";\r\nimport { AppDispatch } from \"../store\";\r\nimport { load, createDispatch } from \"./fetchActions\";\r\nimport {\r\n  ADD_USER,\r\n  CLEAR_USERS,\r\n  ERROR_FETCHING_USER,\r\n  LOADING_USERS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING_USER_SUBMISSIONS,\r\n  CLEAR_USERS_SUBMISSIONS,\r\n} from \"./types\";\r\n\r\nexport const clearUsers = (dispatch) =>\r\n  new Promise<void>((resolve, reject) => {\r\n    dispatch({\r\n      type: CLEAR_USERS,\r\n    });\r\n    resolve();\r\n  });\r\n\r\nexport const fetchUsers = (dispatch, handle: string) => {\r\n  dispatch(load(LOADING_USERS));\r\n\r\n  clearUsers(dispatch).then(() => {\r\n    let handleArray: string[] = stringToArray(handle, \",\");\r\n    for (let handle of handleArray) {\r\n      if (handle.length === 0) continue;\r\n      dispatch({ type: ADD_USER, payload: { handle } });\r\n    }\r\n  });\r\n};\r\n\r\nexport const clearUsersSubmissions = (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_USERS_SUBMISSIONS,\r\n  });\r\n};\r\n\r\nexport const fetchUserSubmissions = (\r\n  dispatch: AppDispatch,\r\n  handles: string[],\r\n  limit?: number\r\n) => {\r\n  let currentId = Date.now();\r\n  if (handles.length === 0) clearUsersSubmissions(dispatch);\r\n\r\n  for (let handle of handles) {\r\n    dispatch(load(LOADING_USER_SUBMISSIONS));\r\n    fetch(getUserSubmissionsURL(handle, limit))\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.status !== \"OK\")\r\n            return dispatch(\r\n              createDispatch(\r\n                ERROR_FETCHING_USER_SUBMISSIONS,\r\n                \"Failed To fetch Submissions for User with handle \" + handle\r\n              )\r\n            );\r\n\r\n          let submissions: Submission[] = result.result;\r\n\r\n          submissions = submissions.filter((submission) => submission.contestId);\r\n\r\n          return dispatch({\r\n            type: FETCH_USER_SUBMISSIONS,\r\n            payload: { result: submissions, id: currentId },\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          return dispatch(\r\n            createDispatch(\r\n              ERROR_FETCHING_USER_SUBMISSIONS,\r\n              \"Failed To fetch Submissions for User\" + handle\r\n            )\r\n          );\r\n        }\r\n      )\r\n      .catch((e) => {\r\n        // console.log(e);\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"Failed To fetch Submissions for User\" + handle\r\n          )\r\n        );\r\n      });\r\n  }\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts",["153"],"import { AppReducerType, ErrorLog } from \"../actions/types\";\r\n\r\nexport class AppStateInterfac {\r\n  errorLog: string[];\r\n  successLog: string[];\r\n  darkMode: boolean;\r\n  loaded: boolean;\r\n}\r\n\r\nconst initAppState: AppStateInterfac = {\r\n  errorLog: [],\r\n  successLog: [],\r\n  darkMode: true,\r\n  loaded: false,\r\n};\r\n\r\nexport const AppReducer = (\r\n  initState: AppStateInterfac = initAppState,\r\n  action: { type: string; message: string }\r\n) => {\r\n  switch (action.type) {\r\n    case AppReducerType.ADD_ERROR_LOG:\r\n      let newState = { ...initState };\r\n      newState.errorLog.push(action.message);\r\n      return newState;\r\n    case AppReducerType.CLEAR_ERROR_LOG:\r\n      return { ...initState, ErrorLog: new Array<string>() };\r\n    case AppReducerType.TOGGLE_THEME:\r\n      return { ...initState, darkMode: !initState.darkMode };\r\n    case AppReducerType.APP_LOADED:\r\n      return { ...initState, loaded: true };\r\n    default:\r\n      return initState;\r\n  }\r\n};","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"154","replacedBy":"158"},{"ruleId":"156","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":6,"column":3,"nodeType":"162","messageId":"163","endLine":6,"endColumn":19},{"ruleId":"160","severity":1,"message":"164","line":7,"column":3,"nodeType":"162","messageId":"163","endLine":7,"endColumn":19},{"ruleId":"160","severity":1,"message":"165","line":8,"column":3,"nodeType":"162","messageId":"163","endLine":8,"endColumn":25},{"ruleId":"160","severity":1,"message":"166","line":11,"column":10,"nodeType":"162","messageId":"163","endLine":11,"endColumn":30},{"ruleId":"160","severity":1,"message":"167","line":20,"column":9,"nodeType":"162","messageId":"163","endLine":20,"endColumn":17},{"ruleId":"160","severity":1,"message":"168","line":21,"column":9,"nodeType":"162","messageId":"163","endLine":21,"endColumn":14},{"ruleId":"160","severity":1,"message":"169","line":12,"column":10,"nodeType":"162","messageId":"163","endLine":12,"endColumn":19},{"ruleId":"160","severity":1,"message":"170","line":14,"column":10,"nodeType":"162","messageId":"163","endLine":14,"endColumn":23},{"ruleId":"160","severity":1,"message":"171","line":15,"column":10,"nodeType":"162","messageId":"163","endLine":15,"endColumn":17},{"ruleId":"172","severity":1,"message":"173","line":28,"column":6,"nodeType":"174","endLine":28,"endColumn":8,"suggestions":"175"},{"ruleId":"172","severity":1,"message":"176","line":32,"column":6,"nodeType":"174","endLine":32,"endColumn":22,"suggestions":"177"},{"ruleId":"178","severity":1,"message":"179","line":80,"column":13,"nodeType":"180","endLine":86,"endColumn":24},{"ruleId":"172","severity":1,"message":"181","line":111,"column":6,"nodeType":"174","endLine":111,"endColumn":26,"suggestions":"182"},{"ruleId":"160","severity":1,"message":"183","line":133,"column":9,"nodeType":"162","messageId":"163","endLine":133,"endColumn":19},{"ruleId":"184","severity":1,"message":"185","line":293,"column":37,"nodeType":"186","messageId":"187","endLine":293,"endColumn":39},{"ruleId":"160","severity":1,"message":"188","line":9,"column":18,"nodeType":"162","messageId":"163","endLine":9,"endColumn":27},{"ruleId":"160","severity":1,"message":"189","line":15,"column":8,"nodeType":"162","messageId":"163","endLine":15,"endColumn":18},{"ruleId":"172","severity":1,"message":"190","line":85,"column":6,"nodeType":"174","endLine":85,"endColumn":26,"suggestions":"191"},{"ruleId":"184","severity":1,"message":"192","line":221,"column":74,"nodeType":"186","messageId":"187","endLine":221,"endColumn":76},{"ruleId":"184","severity":1,"message":"185","line":257,"column":41,"nodeType":"186","messageId":"187","endLine":257,"endColumn":43},{"ruleId":"193","severity":1,"message":"194","line":32,"column":11,"nodeType":"180","endLine":36,"endColumn":68},{"ruleId":"184","severity":1,"message":"185","line":41,"column":27,"nodeType":"186","messageId":"187","endLine":41,"endColumn":29},{"ruleId":"184","severity":1,"message":"185","line":44,"column":23,"nodeType":"186","messageId":"187","endLine":44,"endColumn":25},{"ruleId":"184","severity":1,"message":"185","line":119,"column":25,"nodeType":"186","messageId":"187","endLine":119,"endColumn":27},{"ruleId":"160","severity":1,"message":"195","line":18,"column":3,"nodeType":"162","messageId":"163","endLine":18,"endColumn":18},{"ruleId":"160","severity":1,"message":"196","line":19,"column":3,"nodeType":"162","messageId":"163","endLine":19,"endColumn":21},{"ruleId":"160","severity":1,"message":"197","line":20,"column":3,"nodeType":"162","messageId":"163","endLine":20,"endColumn":18},{"ruleId":"160","severity":1,"message":"198","line":21,"column":3,"nodeType":"162","messageId":"163","endLine":21,"endColumn":21},{"ruleId":"160","severity":1,"message":"199","line":24,"column":8,"nodeType":"162","messageId":"163","endLine":24,"endColumn":15},{"ruleId":"184","severity":1,"message":"185","line":72,"column":12,"nodeType":"186","messageId":"187","endLine":72,"endColumn":14},{"ruleId":"184","severity":1,"message":"192","line":76,"column":14,"nodeType":"186","messageId":"187","endLine":76,"endColumn":16},{"ruleId":"160","severity":1,"message":"200","line":14,"column":10,"nodeType":"162","messageId":"163","endLine":14,"endColumn":16},{"ruleId":"160","severity":1,"message":"201","line":24,"column":7,"nodeType":"162","messageId":"163","endLine":24,"endColumn":24},{"ruleId":"184","severity":1,"message":"192","line":156,"column":63,"nodeType":"186","messageId":"187","endLine":156,"endColumn":65},{"ruleId":"160","severity":1,"message":"202","line":2,"column":3,"nodeType":"162","messageId":"163","endLine":2,"endColumn":17},{"ruleId":"160","severity":1,"message":"203","line":12,"column":3,"nodeType":"162","messageId":"163","endLine":12,"endColumn":22},{"ruleId":"160","severity":1,"message":"204","line":1,"column":26,"nodeType":"162","messageId":"163","endLine":1,"endColumn":34},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],["205"],["206"],"@typescript-eslint/no-unused-vars","'fetchContestList' is defined but never used.","Identifier","unusedVar","'fetchProblemList' is defined but never used.","'fetchSharedProblemList' is defined but never used.","'fetchUserSubmissions' is defined but never used.","'dispatch' is assigned a value but never used.","'state' is assigned a value but never used.","'RootState' is defined but never used.","'ProblemShared' is defined but never used.","'Verdict' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sync'. Either include it or remove the dependency array.","ArrayExpression",["207"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["208"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'filterProblem', 'history', and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.",["209"],"'searchData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setHandle' is assigned a value but never used.","'submitUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'contestList', 'filterContest', and 'history'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["210"],"Expected '===' and instead saw '=='.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'SOLVED_PROBLEMS' is defined but never used.","'ATTEMPTED_PROBLEMS' is defined but never used.","'SOLVED_CONTESTS' is defined but never used.","'ATTEMPTED_CONTESTS' is defined but never used.","'Contest' is defined but never used.","'result' is defined but never used.","'sharedProblemsURL' is assigned a value but never used.","'getUserInfoURL' is defined but never used.","'ERROR_FETCHING_USER' is defined but never used.","'ErrorLog' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},"Update the dependencies array to be: [sync]",{"range":"219","text":"220"},"Update the dependencies array to be: [dispatch, state.userList]",{"range":"221","text":"222"},"Update the dependencies array to be: [state, filterState, history, problemList, filterProblem]",{"range":"223","text":"224"},"Update the dependencies array to be: [state, filterState, history, contestList, filterContest]",{"range":"225","text":"226"},[1066,1068],"[sync]",[1161,1177],"[dispatch, state.userList]",[3438,3458],"[state, filterState, history, problemList, filterProblem]",[2451,2471],"[state, filterState, history, contestList, filterContest]"]