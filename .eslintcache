[{"F:\\web\\react\\codeforces-api\\src\\index.tsx":"1","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx":"2","F:\\web\\react\\codeforces-api\\src\\App.tsx":"3","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx":"4","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx":"5","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx":"6","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx":"7","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx":"8","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx":"9","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts":"11","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts":"12","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts":"13","F:\\web\\react\\codeforces-api\\src\\data\\store.ts":"14","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts":"16","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts":"18","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts":"19","F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts":"20","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts":"21","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts":"22","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts":"23","F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts":"24","F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts":"25","F:\\web\\react\\codeforces-api\\src\\util\\Theme.ts":"26"},{"size":767,"mtime":1618398758923,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1617775898144,"results":"29","hashOfConfig":"28"},{"size":2205,"mtime":1621168152300,"results":"30","hashOfConfig":"28"},{"size":5002,"mtime":1621168269606,"results":"31","hashOfConfig":"28"},{"size":18234,"mtime":1621168461310,"results":"32","hashOfConfig":"28"},{"size":1147,"mtime":1618400510901,"results":"33","hashOfConfig":"28"},{"size":13745,"mtime":1621168475540,"results":"34","hashOfConfig":"28"},{"size":2105,"mtime":1621176404276,"results":"35","hashOfConfig":"28"},{"size":1584,"mtime":1621168438759,"results":"36","hashOfConfig":"28"},{"size":6342,"mtime":1621176370073,"results":"37","hashOfConfig":"28"},{"size":410,"mtime":1617879429205,"results":"38","hashOfConfig":"28"},{"size":1669,"mtime":1620794512714,"results":"39","hashOfConfig":"28"},{"size":998,"mtime":1618488169808,"results":"40","hashOfConfig":"28"},{"size":6816,"mtime":1620818124019,"results":"41","hashOfConfig":"28"},{"size":3020,"mtime":1618571435369,"results":"42","hashOfConfig":"28"},{"size":5154,"mtime":1621176742871,"results":"43","hashOfConfig":"28"},{"size":5430,"mtime":1621161905198,"results":"44","hashOfConfig":"28"},{"size":2911,"mtime":1620802353426,"results":"45","hashOfConfig":"28"},{"size":2301,"mtime":1621161389008,"results":"46","hashOfConfig":"28"},{"size":181555,"mtime":1620645259517,"results":"47","hashOfConfig":"28"},{"size":3435,"mtime":1621162492076,"results":"48","hashOfConfig":"28"},{"size":1115,"mtime":1618485329167,"results":"49","hashOfConfig":"28"},{"size":2510,"mtime":1618665333803,"results":"50","hashOfConfig":"28"},{"size":141,"mtime":1618487216532,"results":"51","hashOfConfig":"28"},{"size":586,"mtime":1618579869282,"results":"52","hashOfConfig":"28"},{"size":1169,"mtime":1621176474161,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1flmqtp",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\web\\react\\codeforces-api\\src\\index.tsx",[],["117","118"],"F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx",[],["119","120"],"F:\\web\\react\\codeforces-api\\src\\App.tsx",["121","122","123","124","125","126","127"],"import \"./App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchContestList,\r\n  fetchProblemList,\r\n  fetchSharedProblemList,\r\n} from \"./data/actions/fetchActions\";\r\n\r\nimport { fetchUserSubmissions } from \"./data/actions/userActions\";\r\n\r\nimport Menu from \"./components/Menu\";\r\nimport ProblemPage from \"./components/problem/ProblemPage\";\r\nimport ContestPage from \"./components/contest/ContestPage\";\r\nimport HomePage from \"./components/home/HomePage\";\r\nimport { PROBLEMS, CONTESTS } from \"./util/constants\";\r\nimport { RootStateType } from \"./data/store\";\r\nimport { ThemesType } from \"./util/Theme\";\r\n\r\nfunction App() {\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    if (state.appState.themeMod === ThemesType.DARK) {\r\n      document.body.classList.add(\"bg-dark\");\r\n      document.body.classList.remove(\"bg-light\");\r\n    } else {\r\n      document.body.classList.add(\"bg-light\");\r\n      document.body.classList.remove(\"bg-dark\");\r\n    }\r\n\r\n    document.title = \"CFTracker\";\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (state.appState.themeMod === ThemesType.DARK) {\r\n      document.body.classList.add(\"bg-dark\");\r\n      document.body.classList.remove(\"bg-light\");\r\n    } else {\r\n      document.body.classList.add(\"bg-light\");\r\n      document.body.classList.remove(\"bg-dark\");\r\n    }\r\n  }, [state.appState.themeMod]);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"App container-fluid p-0 min-vh-100 d-flex justify-content-between  flex-column \" + state.appState.theme.bgText\r\n      }>\r\n      <div className=\"top\">\r\n        <div className=\"menu w-100\">\r\n          <Menu />\r\n        </div>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route path={PROBLEMS} component={ProblemPage} />\r\n          <Route strict path={CONTESTS} component={ContestPage} />\r\n        </Switch>\r\n      </div>\r\n      <footer className=\"text-light text-center justify-content-center p-3 w-100 align-self-end\">\r\n        All rights reserved by @Bashem\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx",["128","129","130","131","132","133","134"],"import { faMoon } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faSun, faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  changeAppState,\r\n  fetchContestList,\r\n  fetchProblemList,\r\n  fetchSharedProblemList,\r\n} from \"../data/actions/fetchActions\";\r\nimport { AppReducerType } from \"../data/actions/types\";\r\nimport { fetchUserSubmissions, fetchUsers } from \"../data/actions/userActions\";\r\nimport { RootState, RootStateType } from \"../data/store\";\r\nimport { PROBLEMS, CONTESTS } from \"../util/constants\";\r\nimport { ProblemShared } from \"../util/DataTypes/Problem\";\r\nimport { Verdict } from \"../util/DataTypes/Submission\";\r\nimport { ThemesType } from \"../util/Theme\";\r\n\r\nconst Menu = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const [handle, setHandle] = useState(\r\n    state.userList.handles.length ? state.userList.handles.toString() : \"\"\r\n  );\r\n  console.log(state.userList.handles.toString());\r\n  useEffect(() => {\r\n    fetchProblemList(dispatch);\r\n    fetchContestList(dispatch);\r\n    fetchSharedProblemList(dispatch);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    sync();\r\n  }, [state.userList]);\r\n\r\n  const sync = () => {\r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n  };\r\n\r\n  const submitUser = () => {\r\n    // Notification.info({\r\n    //   title: \"User submitted!\",\r\n    //   duration: 200,\r\n    //   description: \"hh\",\r\n    // });\r\n    // toast.error(\"🦄 Wow so easy!\", {\r\n    //   position: \"bottom-right\",\r\n    //   autoClose: 2001,\r\n    //   hideProgressBar: false,\r\n    //   closeOnClick: true,\r\n    //   pauseOnHover: true,\r\n    //   draggable: true,\r\n    //   progress: undefined,\r\n    // });\r\n    fetchUsers(dispatch, handle);\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={\"navbar navbar-expand-lg p-2 ps-4 pe-4 \" + state.appState.theme.navbar}>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarTogglerDemo03\"\r\n        aria-controls=\"navbarTogglerDemo03\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n        CFTracker\r\n      </Link>\r\n\r\n      <div\r\n        className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n        id=\"navbarTogglerDemo03\">\r\n        <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n          <li className=\"nav-item active\">\r\n            <Link to={PROBLEMS} className=\"nav-link\" href=\"#\">\r\n              Problem List\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={CONTESTS} className=\"nav-link\" href=\"#\">\r\n              Contest\r\n            </Link>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className={\"btn-transparent border-0 nav-link\"}\r\n              href=\"#\"\r\n              title=\"Change Theme\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                if (state.appState.themeMod === ThemesType.DARK)\r\n                  changeAppState(\r\n                    dispatch,\r\n                    AppReducerType.CHANGE_THEME,\r\n                    ThemesType.LIGHT\r\n                  );\r\n                else\r\n                  changeAppState(\r\n                    dispatch,\r\n                    AppReducerType.CHANGE_THEME,\r\n                    ThemesType.DARK\r\n                  );\r\n              }}>\r\n              <FontAwesomeIcon\r\n                icon={\r\n                  state.appState.themeMod === ThemesType.DARK ? faMoon : faSun\r\n                }\r\n              />\r\n            </a>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0 nav-item\"\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n                submitUser();\r\n              }}>\r\n              <input\r\n                name=\"handle\"\r\n                className=\"form-control mr-sm-2\"\r\n                type=\"search\"\r\n                placeholder=\"handle1,handle2,..\"\r\n                aria-label=\"Search\"\r\n                value={handle}\r\n                onChange={(e) => setHandle(e.target.value)}\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                sync();\r\n              }}\r\n              title=\"Refresh Submissions\"\r\n              href=\"#\">\r\n              <FontAwesomeIcon icon={faSync} />\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx",["135","136","137","138","139","140"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport { sortByRating, sortBySolveCount } from \"../../util/sortMethods\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n  SEARCH,\r\n  PROBLEMS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport ProblemList from \"./ProblemList\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faSort,\r\n  faSortDown,\r\n  faSortUp,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\nimport { RootStateType } from \"../../data/store\";\r\nimport { changeAppState } from \"../../data/actions/fetchActions\";\r\nimport { AppReducerType } from \"../../data/actions/types\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\nconst ProblemPage = () => {\r\n  const state: RootStateType = useSelector((state) => state);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = -1,\r\n    SORT_BY_RATING = 1,\r\n    SORT_BY_SOLVE = 2,\r\n    ASCENDING = 0,\r\n    DESCENDING = 1;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    rating: { min_rating: -1, max_rating: 4000 },\r\n    tags: new Set(),\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n    sortBy: SORT_BY_SOLVE,\r\n    order: DESCENDING,\r\n  };\r\n\r\n  const [problemList, setProblemList] = useState({ problems: [], error: \"\" });\r\n  const [tagList, setTagList] = useState({ tags: [] });\r\n  const [randomProblem, setRandomProblem] = useState(-1);\r\n  const [selected, setSelected] = useState(0);\r\n  const [perPage, setPerPage] = useState(100);\r\n  const [minRating, setMinRating] = useState(-1);\r\n  const [maxRating, setMaxRating] = useState(4000);\r\n  const [showUnrated, setShowUnrated] = useState(true);\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n\r\n  const filterProblem = (problem) => {\r\n    let containTags = false;\r\n\r\n    if (filterState.tags.size === 0) containTags = true;\r\n    else\r\n      for (let tag of problem.tags)\r\n        if (filterState.tags.has(tag)) {\r\n          containTags = true;\r\n          break;\r\n        }\r\n    let ratingInside =\r\n      problem.rating <= state.appState.problemPage.maxRating &&\r\n      problem.rating >= state.appState.problemPage.minRating;\r\n    // if (problem.rating == -1 && showUnrated == false) ratingInside = false;\r\n    // else if (problem.rating == -1 && showUnrated) ratingInside = true;\r\n    let solveStatus = filterState.solveStatus.includes(getState(problem));\r\n\r\n    let searchIncluded = true;\r\n    let text = filterState.search.toLowerCase().trim();\r\n    if (text.length)\r\n      searchIncluded =\r\n        problem.name.toLowerCase().includes(text) ||\r\n        problem.id.toLowerCase().includes(text);\r\n\r\n    return solveStatus && ratingInside && containTags && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPerPage(state.appState.problemPage.perPage);\r\n    setMinRating(state.appState.problemPage.minRating);\r\n    setMaxRating(state.appState.problemPage.maxRating);\r\n    setShowUnrated(state.appState.problemPage.showUnrated);\r\n\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n      });\r\n    if (state.problemList.problems !== undefined) {\r\n      let newState = { problems: [] };\r\n      newState.problems = state.problemList.problems;\r\n\r\n      let used = new Set<string>();\r\n\r\n      newState.problems = newState.problems.filter((problem: Problem) => {\r\n        if (used.has(problem.getId())) return false;\r\n\r\n        return filterProblem(problem);\r\n      });\r\n\r\n      if (filterState.sortBy === SORT_BY_RATING)\r\n        newState.problems.sort(sortByRating);\r\n      else newState.problems.sort(sortBySolveCount);\r\n      if (filterState.order === DESCENDING) newState.problems.reverse();\r\n\r\n      let tags = [];\r\n      for (let tag of state.problemList.tags) tags.push(tag);\r\n      setTagList({ tags });\r\n      setProblemList({ ...problemList, problems: newState.problems });\r\n    }\r\n    setRandomProblem(-1);\r\n    setSelected(0);\r\n  }, [state, filterState]);\r\n\r\n  const sortList = (sortBy) => {\r\n    if (filterState.sortBy === sortBy)\r\n      setFilterState({ ...filterState, order: filterState.order ^ 1 });\r\n    else\r\n      setFilterState({\r\n        ...filterState,\r\n        ...{\r\n          order: sortBy === SORT_BY_RATING ? ASCENDING : DESCENDING,\r\n          sortBy: sortBy,\r\n        },\r\n      });\r\n  };\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const searchData = (e) => {\r\n    setFilterState({ ...filterState, search: e.target.value });\r\n  };\r\n\r\n  const chooseRandom = () => {\r\n    if (problemList.problems.length === 0) return;\r\n    setRandomProblem(getRandomInteger(0, problemList.problems.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * perPage;\r\n    let high = Math.min(problemList.problems.length, lo + perPage);\r\n\r\n    if (lo > high) return [];\r\n    return problemList.problems.slice(lo, high);\r\n  };\r\n\r\n  const nuetral = () => {\r\n    return <FontAwesomeIcon icon={faSort} />;\r\n  };\r\n\r\n  const less = () => {\r\n    return <FontAwesomeIcon icon={faSortUp} />;\r\n  };\r\n\r\n  const greater = () => {\r\n    return <FontAwesomeIcon icon={faSortDown} />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs d-flex justify-content-between container border-0 mt-3\">\r\n          <li className=\"nav-item col-4\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0\"\r\n              onSubmit={(e) => e.preventDefault()}>\r\n              <input\r\n                className={\r\n                  \"form-control mr-sm-2 \" + state.appState.theme.bgText\r\n                }\r\n                type=\"text\"\r\n                placeholder=\"Problem Name or Id\"\r\n                aria-label=\"Search\"\r\n                value={filterState.search}\r\n                onChange={(e) => {\r\n                  setFilterState({\r\n                    ...filterState,\r\n                    search: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n          <li className=\"nav-item text-secondary h-6\">\r\n            Showing {paginate().length} of {problemList.problems.length}\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                type=\"button\"\r\n                className={\"btn nav-link \" + state.appState.theme.btn}\r\n                onClick={chooseRandom}\r\n                title=\"Find Random Problem\">\r\n                <FontAwesomeIcon icon={faRandom} />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className={\"btn nav-link \" + state.appState.theme.btn}\r\n                title=\"Cancel Random\"\r\n                onClick={() => setRandomProblem(-1)}>\r\n                <FontAwesomeIcon icon={faRedo} />\r\n              </button>\r\n            </div>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-bs-toggle=\"modal\"\r\n              data-bs-target=\"#exampleModal\">\r\n              {<FontAwesomeIcon icon={faFilter} />}\r\n            </button>\r\n            <div\r\n              className=\"modal\"\r\n              id=\"exampleModal\"\r\n              tabIndex={-1}\r\n              aria-labelledby=\"exampleModalLabel\"\r\n              aria-hidden=\"true\">\r\n              <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                      Filter\r\n                    </h5>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"></button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <div className=\"group\">\r\n                      <form\r\n                        className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                        onSubmit={(e) => e.preventDefault()}>\r\n                        <div className=\"d-flex justify-content-between w-100\">\r\n                          <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                              <label\r\n                                className=\"input-group-text\"\r\n                                htmlFor=\"inputGroupSelect01\">\r\n                                Per Page\r\n                              </label>\r\n                            </div>\r\n                            <select\r\n                              className=\"custom-select\"\r\n                              id=\"inputGroupSelect01\"\r\n                              value={perPage}\r\n                              onChange={(e) => {\r\n                                let num: number = parseInt(e.target.value);\r\n                                changeAppState(\r\n                                  dispatch,\r\n                                  AppReducerType.CHANGE_PER_PAGE,\r\n                                  num,\r\n                                  false\r\n                                );\r\n                              }}>\r\n                              <option value=\"20\">20</option>\r\n                              <option value=\"50\">50</option>\r\n                              <option value=\"100\">100</option>\r\n                              <option value={problemList.problems.length}>\r\n                                All\r\n                              </option>\r\n                            </select>\r\n                          </div>\r\n                          <div className=\"input-group d-flex justify-content-end\">\r\n                            <button\r\n                              className=\"btn btn-light nav-link h-6\"\r\n                              onClick={() => setFilterState(initFilterState)}\r\n                              title=\"Reset To Default State\">\r\n                              <FontAwesomeIcon icon={faRedoAlt} />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {initFilterState.solveStatus.map((solved) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.solveStatus.includes(solved)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={solved}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            let ind = filterState.solveStatus.indexOf(solved);\r\n                            if (ind != -1)\r\n                              myFilterState.solveStatus.splice(ind, 1);\r\n                            else myFilterState.solveStatus.push(solved);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {solved === SOLVED\r\n                            ? \"Solved\"\r\n                            : solved === ATTEMPTED\r\n                            ? \"Attempted\"\r\n                            : \"Unsolved\"}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <form\r\n                      className=\"\"\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}>\r\n                      <div className=\"d-flex\">\r\n                        <div\r\n                          className=\"input-group pe-1\"\r\n                          title=\"place -1 to show unrated\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Min Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Min Rating\"\r\n                            value={minRating}\r\n                            name={\"minRating\"}\r\n                            onChange={(e) => {\r\n                              let num: number = parseInt(e.target.value);\r\n\r\n                              if (num != null && num != undefined)\r\n                                changeAppState(\r\n                                  dispatch,\r\n                                  AppReducerType.CHANGE_MIN_RATING,\r\n                                  num,\r\n                                  false\r\n                                );\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div className=\"input-group ps-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Max Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Max Rating\"\r\n                            value={maxRating}\r\n                            name={\"maxRating\"}\r\n                            onChange={(e) => {\r\n                              let num: number = parseInt(e.target.value);\r\n\r\n                              if (num != null && num != undefined)\r\n                                changeAppState(\r\n                                  dispatch,\r\n                                  AppReducerType.CHANGE_MAX_RATING,\r\n                                  num,\r\n                                  false\r\n                                );\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {tagList.tags.map((tag) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.tags.has(tag)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={tag}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            if (filterState.tags.has(tag))\r\n                              myFilterState.tags.delete(tag);\r\n                            else myFilterState.tags.add(tag);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {tag}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"p-2\">\r\n        <Pagination\r\n          totalCount={problemList.problems.length}\r\n          perPage={perPage}\r\n          selected={selected}\r\n          theme={state.appState.theme}\r\n          pageSelected={(e) => setSelected(e)}\r\n        />\r\n      </div>\r\n      <table\r\n        className={\r\n          \"table table-bordered container \" + state.appState.theme.table\r\n        }>\r\n        <thead className={state.appState.theme.thead}>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">ID</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_RATING)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Rating</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_RATING\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_SOLVE)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Solve Count</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_SOLVE\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {randomProblem === -1 ? (\r\n            <ProblemList problems={paginate()} />\r\n          ) : (\r\n            <ProblemList problems={[problemList.problems[randomProblem]]} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        totalCount={problemList.problems.length}\r\n        perPage={perPage}\r\n        selected={selected}\r\n        theme={state.appState.theme}\r\n        pageSelected={(e) => setSelected(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx",["141","142"],"import React, { useEffect,useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { fetchUsers } from \"../../data/actions/userActions\";\r\nimport { CONTESTS } from \"../../util/constants\";\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst history = useHistory();\r\n\thistory.push(CONTESTS);\r\n\r\n\tconst submitUser = () => {\r\n\t\tfetchUsers(dispatch,handle);\r\n\t}\r\n\r\n  useEffect(() => {\r\n    // fetchProblemList(dispatch);\r\n    // fetchContestList(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\t\t\t{/* <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx",["143","144","145"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { charInc, getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport ContestList from \"./ContestList\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  CONTESTS,\r\n  SEARCH,\r\n  SOLVED_CONTESTS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\nimport { RootStateType } from \"../../data/store\";\r\nimport { changeAppState } from \"../../data/actions/fetchActions\";\r\nimport { AppReducerType } from \"../../data/actions/types\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\nconst ContestPage = () => {\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [contestList, setContestList] = useState({ contests: [], error: \"\" });\r\n  const [randomContest, setRandomContest] = useState(-1);\r\n  const [perPage, setPerPage] = useState(100);\r\n  const [showDate, setShowDate] = useState(false);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = 2;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const contestStatus = (contestId) => {\r\n    if (state.userSubmissions[SOLVED_CONTESTS].has(contestId)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_CONTESTS].has(contestId))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const filterContest = (contest) => {\r\n    let solveStatus = filterState.solveStatus.includes(\r\n      contestStatus(contest.id)\r\n    );\r\n\r\n    let searchIncluded = true;\r\n\r\n    let text = filterState.search.toLowerCase().trim();\r\n\r\n    if (text.length)\r\n      searchIncluded =\r\n        contest.name.toLowerCase().includes(text) ||\r\n        contest.id.toString().includes(text);\r\n\r\n    return solveStatus && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setPerPage(state.appState.contestPage.perPage);\r\n    setShowDate(state.appState.contestPage.showDate);\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: CONTESTS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: CONTESTS,\r\n      });\r\n    let contests = state.contestList.contests;\r\n\r\n    const newContestList = contests.filter((contest) => filterContest(contest));\r\n\r\n    setContestList({ ...contestList, contests: newContestList });\r\n    setRandomContest(-1);\r\n  }, [state, filterState]);\r\n\r\n  const chooseRandom = () => {\r\n    if (contestList.contests.length === 0) return;\r\n    setRandomContest(getRandomInteger(0, contestList.contests.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    // let lo = selected * filterState.perPage;\r\n    let lo = selected * perPage;\r\n    let high = Math.min(contestList.contests.length, lo + perPage);\r\n\r\n    if (lo > high) return [];\r\n    return contestList.contests.slice(lo, high);\r\n  };\r\n\r\n  return (\r\n    <div className=\"div\">\r\n      <div className=\"menu\">\r\n        <nav className=\"navbar navbar-expand-lg container p-2\">\r\n          <div\r\n            className=\"collapse navbar-collapse d-flex justify-content-between\"\r\n            id=\"navbarTogglerDemo03\">\r\n            <ul className=\"navbar w-100 d-flex justify-content-between list-unstyled\">\r\n              <li className=\"nav-item col-6\">\r\n                <form\r\n                  className=\"form-inline d-flex my-2 my-lg-0\"\r\n                  onSubmit={(e) => e.preventDefault()}>\r\n                  <input\r\n                    className={\r\n                      \"form-control mr-sm-2 \" + state.appState.theme.bgText\r\n                    }\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Contest Name or Id\"\r\n                    aria-label=\"Search\"\r\n                    value={filterState.search}\r\n                    onChange={(e) => {\r\n                      setFilterState({\r\n                        ...filterState,\r\n                        search: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </form>\r\n              </li>\r\n              <li className=\"nav-item text-secondary\">\r\n                Showing {paginate().length} of {contestList.contests.length}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <div\r\n                  className=\"btn-group\"\r\n                  role=\"group\"\r\n                  aria-label=\"Basic example\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className={\"btn nav-link \" + state.appState.theme.btn}\r\n                    onClick={chooseRandom}\r\n                    title=\"Find Random Contest\">\r\n                    <FontAwesomeIcon icon={faRandom} />\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className={\"btn nav-link \" + state.appState.theme.btn}\r\n                    title=\"Cancel Random\"\r\n                    onClick={() => setRandomContest(-1)}>\r\n                    <FontAwesomeIcon icon={faRedo} />\r\n                  </button>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  data-bs-toggle=\"modal\"\r\n                  data-bs-target=\"#exampleModal\">\r\n                  {<FontAwesomeIcon icon={faFilter} />}\r\n                </button>\r\n                <div\r\n                  className=\"modal\"\r\n                  id=\"exampleModal\"\r\n                  tabIndex={-1}\r\n                  aria-labelledby=\"exampleModalLabel\"\r\n                  aria-hidden=\"true\">\r\n                  <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                      <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                          Filter\r\n                        </h5>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn-close\"\r\n                          data-bs-dismiss=\"modal\"\r\n                          aria-label=\"Close\"></button>\r\n                      </div>\r\n                      <div className=\"modal-body\">\r\n                        <div className=\"group\">\r\n                          <form\r\n                            className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                            onSubmit={(e) => e.preventDefault()}>\r\n                            <div className=\"d-flex justify-content-between w-100\">\r\n                              <div className=\"input-group mb-3\">\r\n                                <div className=\"input-group-prepend\">\r\n                                  <label\r\n                                    className=\"input-group-text\"\r\n                                    htmlFor=\"inputGroupSelect01\">\r\n                                    Per Page\r\n                                  </label>\r\n                                </div>\r\n                                <select\r\n                                  className=\"custom-select\"\r\n                                  id=\"inputGroupSelect01\"\r\n                                  value={perPage}\r\n                                  onChange={(e) => {\r\n                                    let num: number = parseInt(e.target.value);\r\n\r\n                                    // setFilterState({\r\n                                    //   ...filterState,\r\n                                    //   perPage: num,\r\n                                    // });\r\n                                    changeAppState(\r\n                                      dispatch,\r\n                                      AppReducerType.CHANGE_PER_PAGE,\r\n                                      num,\r\n                                      true\r\n                                    );\r\n                                  }}>\r\n                                  <option value=\"20\">20</option>\r\n                                  <option value=\"50\">50</option>\r\n                                  <option value=\"100\">100</option>\r\n                                  <option value={contestList.contests.length}>\r\n                                    All\r\n                                  </option>\r\n                                </select>\r\n                              </div>\r\n                              <div className=\"input-group d-flex justify-content-end\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Show Date\r\n                                </span>\r\n                                <div className=\"input-group-text\">\r\n                                  <input\r\n                                    className=\"form-check-input mt-0\"\r\n                                    type=\"checkbox\"\r\n                                    defaultChecked={showDate}\r\n                                    onChange={() =>\r\n                                      changeAppState(\r\n                                        dispatch,\r\n                                        AppReducerType.TOGGLE_DATE,\r\n                                        +!!!showDate,\r\n                                        true\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                              <button\r\n                                className=\"btn btn-secondary nav-link m-2 h-6\"\r\n                                onClick={() => setFilterState(initFilterState)}\r\n                                title=\"Reset To Default State\">\r\n                                <FontAwesomeIcon icon={faRedoAlt} />\r\n                              </button>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                        <div\r\n                          className=\"btn-group d-flex flex-wrap justify-content-between\"\r\n                          role=\"group\"\r\n                          aria-label=\"First group\">\r\n                          {initFilterState.solveStatus.map((solved) => (\r\n                            <button\r\n                              className={\r\n                                (filterState.solveStatus.includes(solved)\r\n                                  ? \"btn bg-success\"\r\n                                  : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                              }\r\n                              key={solved}\r\n                              onClick={() => {\r\n                                let myFilterState = { ...filterState };\r\n                                let ind =\r\n                                  filterState.solveStatus.indexOf(solved);\r\n                                if (ind != -1)\r\n                                  myFilterState.solveStatus.splice(ind, 1);\r\n                                else myFilterState.solveStatus.push(solved);\r\n                                setFilterState(myFilterState);\r\n                              }}>\r\n                              {solved === SOLVED\r\n                                ? \"Solved\"\r\n                                : solved === ATTEMPTED\r\n                                ? \"Attempted\"\r\n                                : \"Unsolved\"}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      {/* <PaginationComponent /> */}\r\n\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={perPage}\r\n        selected={selected}\r\n        theme={state.appState.theme}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n      <div className=\"table-responsive p-3\">\r\n        <table\r\n          className={\r\n            \"table table-bordered overflow-auto \" + state.appState.theme.table\r\n          }>\r\n          <thead className={state.appState.theme.thead}>\r\n            <tr>\r\n              <th scope=\"col\" className=\"sticky-col\">\r\n                #\r\n              </th>\r\n              <th scope=\"col\">ID</th>\r\n              <th scope=\"col\">Contest Name</th>\r\n              {[...Array(10)].map((x, i) => {\r\n                return <th scope=\"col\">{charInc(\"A\", i)}</th>;\r\n              })}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <ContestList\r\n              contestlist={\r\n                randomContest === -1\r\n                  ? paginate()\r\n                  : [contestList.contests[randomContest]]\r\n              }\r\n              filterState={filterState}\r\n              showDate={showDate}\r\n            />\r\n          </tbody>\r\n        </table>\r\n        <Pagination\r\n          pageSelected={(e) => setSelected(e)}\r\n          perPage={perPage}\r\n          selected={selected}\r\n          theme={state.appState.theme}\r\n          totalCount={contestList.contests.length}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx",["146","147","148"],"F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx",[],"F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx",["149"],"F:\\web\\react\\codeforces-api\\src\\util\\constants.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.ts",["150","151","152","153","154"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  problemListReducer,\r\n  contestReducer,\r\n  sharedProblemsReducer,\r\n  ContestListStateInterface,\r\n  ProblemListStateInterface,\r\n  SharedProblemInterface,\r\n} from \"./reducers/fetchReducers\";\r\nimport {\r\n  userSubmissionsReducer,\r\n  userReducer,\r\n  SubmissionStateType,\r\n} from \"./reducers/userReducers\";\r\nimport {\r\n  SOLVED_PROBLEMS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  ATTEMPTED_CONTESTS,\r\n} from \"../util/constants\";\r\nimport { AppReducer, AppStateType } from \"./reducers/appReducers\";\r\nimport Contest from \"../util/DataTypes/Contest\";\r\nimport Problem, { ProblemLite, ProblemShared } from \"../util/DataTypes/Problem\";\r\nimport { sortByCompare } from \"../util/sortMethods\";\r\nimport lowerBound from \"../util/lowerBound\";\r\nimport { cursorTo } from \"node:readline\";\r\nimport { AppReducerType } from \"./actions/types\";\r\n\r\nconst middlewre = [thunk, logger];\r\n\r\nconst combinedReducers = combineReducers({\r\n  userSubmissions: userSubmissionsReducer,\r\n  problemList: problemListReducer,\r\n  contestList: contestReducer,\r\n  userList: userReducer,\r\n  sharedProblems: sharedProblemsReducer,\r\n  appState: AppReducer,\r\n});\r\n\r\nexport interface RootStateType {\r\n  userSubmissions: SubmissionStateType;\r\n  problemList: ProblemListStateInterface;\r\n  contestList: ContestListStateInterface;\r\n  userList: any;\r\n  sharedProblems: any;\r\n  appState: AppStateType;\r\n}\r\n\r\nexport class RootStateForSave {\r\n  userSubmissions: SubmissionStateType;\r\n  problemList: ProblemListStateInterface;\r\n  contestList: ContestListStateInterface;\r\n  userList: any;\r\n  sharedProblems: SharedProblemInterface;\r\n  appState: AppStateType;\r\n}\r\n\r\nconst addSharedToProblems = (\r\n  problemList: Problem[],\r\n  sharedProblems: ProblemShared[]\r\n): Problem[] => {\r\n  problemList = [...problemList];\r\n  const addProblems: Problem[] = new Array<Problem>();\r\n  const added: Set<string> = new Set<string>();\r\n\r\n  for (let problem of sharedProblems) {\r\n    let currentProblem: ProblemShared = new ProblemShared(\r\n      problem.contestId,\r\n      problem.index,\r\n      problem.shared\r\n    );\r\n    let lb: number = lowerBound(problemList, currentProblem as ProblemLite);\r\n    if (lb != problemList.length && currentProblem.equal(problemList[lb])) {\r\n      for (let sharedProblem of problem.shared) {\r\n        lb = lowerBound(problemList, sharedProblem as ProblemLite);\r\n        if (\r\n          lb == problemList.length ||\r\n          !sharedProblem.equal(problemList[lb]) ||\r\n          added.has(problemList[lb].getId())\r\n        )\r\n          continue;\r\n        const newProblem: Problem = new Problem(\r\n          sharedProblem.contestId,\r\n          sharedProblem.index,\r\n          problemList[lb].name,\r\n          problemList[lb].type,\r\n          problemList[lb].rating,\r\n          problemList[lb].getTags(),\r\n          problemList[lb].solvedCount\r\n        );\r\n\r\n        addProblems.push(newProblem);\r\n        added.add(newProblem.getId());\r\n      }\r\n    }\r\n  }\r\n\r\n  return problemList.concat(addProblems).sort(sortByCompare);\r\n};\r\n\r\nconst addSharedToSubmissions = (\r\n  userSubmissions: SubmissionStateType,\r\n  sharedProblems: ProblemShared[]\r\n): SubmissionStateType => {\r\n  let currUserSubmissions = userSubmissions.clone();\r\n\r\n  for (let problem of sharedProblems) {\r\n    let currentProblem: ProblemShared = new ProblemShared(\r\n      problem.contestId,\r\n      problem.index,\r\n      problem.shared\r\n    );\r\n\r\n    if (userSubmissions[SOLVED_PROBLEMS].has(currentProblem.getId())) {\r\n      for (let sharedProblem of problem.shared) {\r\n        let sharedObject: ProblemShared = new ProblemShared(\r\n          sharedProblem.contestId,\r\n          sharedProblem.index\r\n        );\r\n        currUserSubmissions[SOLVED_PROBLEMS].add(sharedObject.getId());\r\n        if (sharedObject.contestId) {\r\n          currUserSubmissions[SOLVED_CONTESTS].add(sharedObject.contestId);\r\n          // if (sharedObject.contestId == 1508){\r\n          //   console.log(sharedObject.contestId);\r\n          // }\r\n        }\r\n      }\r\n    } else if (\r\n      userSubmissions[ATTEMPTED_PROBLEMS].has(currentProblem.getId())\r\n    ) {\r\n      for (let sharedProblem of problem.shared) {\r\n        let sharedObject: ProblemShared = new ProblemShared(\r\n          sharedProblem.contestId,\r\n          sharedProblem.index\r\n        );\r\n\r\n        currUserSubmissions[ATTEMPTED_PROBLEMS].add(sharedObject.getId());\r\n        if (sharedObject.contestId)\r\n          currUserSubmissions[ATTEMPTED_CONTESTS].add(sharedObject.contestId);\r\n      }\r\n    }\r\n  }\r\n\r\n  // console.log(\"What!\");\r\n\r\n  return currUserSubmissions;\r\n};\r\n\r\nconst newCombinedReducers = (state: any, action: any): RootStateType => {\r\n  const intermediateReducer = combinedReducers(state, action);\r\n\r\n  intermediateReducer.userSubmissions = addSharedToSubmissions(\r\n    intermediateReducer.userSubmissions,\r\n    intermediateReducer.sharedProblems.problems\r\n  );\r\n\r\n  intermediateReducer.problemList.problems = addSharedToProblems(\r\n    intermediateReducer.problemList.problems,\r\n    intermediateReducer.sharedProblems.problems\r\n  );\r\n\r\n  return {\r\n    userSubmissions: intermediateReducer.userSubmissions,\r\n    problemList: intermediateReducer.problemList,\r\n    contestList: intermediateReducer.contestList,\r\n    userList: intermediateReducer.userList,\r\n    sharedProblems: intermediateReducer.sharedProblems,\r\n    appState: intermediateReducer.appState,\r\n  };\r\n};\r\n\r\nconst saveToLocalStorage = (state: RootStateType) => {\r\n  try {\r\n    const newState = {\r\n      userList: state.userList,\r\n      appState: state.appState,\r\n    };\r\n    const serializedState: string = JSON.stringify(newState);\r\n    localStorage.setItem(\"statev2\", serializedState);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst loadFromLocalStorage = (): any => {\r\n  try {\r\n    const serialLizedState = localStorage.getItem(\"statev2\");\r\n    console.log(serialLizedState);\r\n    if (serialLizedState == null) return {};\r\n    const persedData = JSON.parse(serialLizedState);\r\n\r\n    let appState = new AppStateType();\r\n    if (persedData.appState) {\r\n      appState.init(persedData.appState);\r\n    }\r\n    persedData.appState = appState;\r\n    console.log(persedData);\r\n    return persedData;\r\n  } catch (e) {\r\n    console.log(e);\r\n    return {};\r\n  }\r\n};\r\n\r\nconst store = createStore(\r\n  newCombinedReducers,\r\n  loadFromLocalStorage(),\r\n  applyMiddleware(...middlewre)\r\n);\r\n\r\nstore.subscribe(() => saveToLocalStorage(store.getState()));\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts",["155","156","157"],"import {\r\n  AppReducerType,\r\n  ERROR_FETCHING_CONTEST_LIST,\r\n  ERROR_FETCHING_PROBLEMS,\r\n  ERROR_FETCHING_SHARED_PROBLEMS,\r\n  FETCH_CONTEST_LIST,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_SHARED_PROBLEMS,\r\n  FINISHED,\r\n  LOADING_CONTEST_LIST,\r\n  LOADING_PROBLEM_LIST,\r\n} from \"./types\";\r\n\r\nimport { jsonData } from \"../jsons/related\";\r\nimport { result } from \"lodash\";\r\nimport Problem, {\r\n  ProblemShared,\r\n  ProblemStatistics,\r\n} from \"../../util/DataTypes/Problem\";\r\nimport { AppDispatch } from \"../store\";\r\nimport Contest from \"../../util/DataTypes/Contest\";\r\nimport { ThemesType } from \"../../util/Theme\";\r\n\r\nconst allContestURL = \"https://codeforces.com/api/contest.list?lang=en\";\r\nconst problemSetURL = \"https://codeforces.com/api/problemset.problems?lang=en\";\r\nconst sharedProblemsURL = \"../jsons/related.json\";\r\n\r\nexport const createDispatch = (type: any, message: any) => {\r\n  return {\r\n    type: type,\r\n    payload: message,\r\n  };\r\n};\r\n\r\nexport interface AppPayloadType {\r\n  type: AppReducerType;\r\n  payload: {\r\n    isContest: boolean;\r\n    data: string | number | ThemesType;\r\n  };\r\n}\r\n\r\nexport const changeAppState = (\r\n  dispatch: AppDispatch,\r\n  type: AppReducerType,\r\n  data: number | ThemesType,\r\n  isContest: boolean = false\r\n) => {\r\n  let curr: AppPayloadType = {\r\n    type: type,\r\n    payload: {\r\n      isContest: isContest,\r\n      data: data,\r\n    },\r\n  };\r\n  dispatch(curr);\r\n};\r\n\r\nexport const load = (type) => {\r\n  return { type: type };\r\n};\r\n\r\nexport const fetchProblemList = (dispatch: AppDispatch) => {\r\n  dispatch(load(LOADING_PROBLEM_LIST));\r\n  //fetchSharedProblemList(dispatch);\r\n  fetch(problemSetURL)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(\r\n            createDispatch(ERROR_FETCHING_PROBLEMS, \"Problem Status Failed\")\r\n          );\r\n        //   console.log(result);\r\n        let problems: Problem[] = result.result.problems;\r\n        let problemStatistics: ProblemStatistics[] =\r\n          result.result.problemStatistics;\r\n\r\n        problems = problems.filter((problem) =>\r\n          problem.contestId ? true : false\r\n        );\r\n\r\n        problemStatistics = problemStatistics.filter((problem) =>\r\n          problem.contestId ? true : false\r\n        );\r\n\r\n        for (let i = 0; i < problems.length; i++) {\r\n          problems[i].rating = problems[i].rating ?? -1;\r\n          problems[i].solvedCount = problemStatistics[i].solvedCount;\r\n          problems[i].id = problems[i].contestId.toString() + problems[i].index;\r\n        }\r\n\r\n        const finalProblemArray: Problem[] = [];\r\n        for (let problem of problems) {\r\n          finalProblemArray.push(\r\n            new Problem(\r\n              problem.contestId,\r\n              problem.index,\r\n              problem.name,\r\n              problem.type,\r\n              problem.rating,\r\n              problem.tags,\r\n              problem.solvedCount\r\n            )\r\n          );\r\n        }\r\n\r\n        return dispatch(createDispatch(FETCH_PROBLEM_LIST, finalProblemArray));\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_PROBLEMS,\r\n            \"ERROR in PROBLEM LIST \" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        createDispatch(ERROR_FETCHING_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n      );\r\n    });\r\n};\r\n\r\nexport const fetchSharedProblemList = (dispatch) => {\r\n  if (jsonData != null) {\r\n    const result = jsonData;\r\n    if (result.status !== \"OK\")\r\n      return dispatch(\r\n        createDispatch(\r\n          ERROR_FETCHING_SHARED_PROBLEMS,\r\n          \"Error fetching shared problems\"\r\n        )\r\n      );\r\n    const res: ProblemShared[] = result.result as ProblemShared[];\r\n    return dispatch(createDispatch(FETCH_SHARED_PROBLEMS, res));\r\n    //\tconsole.log(result.result.length)\r\n  } else\r\n    return dispatch(\r\n      createDispatch(ERROR_FETCHING_SHARED_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n    );\r\n};\r\n\r\nexport const fetchContestList = (dispatch: AppDispatch) => {\r\n  dispatch(load(LOADING_CONTEST_LIST));\r\n  fetch(allContestURL)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(createDispatch(ERROR_FETCHING_CONTEST_LIST, \"Eroor\"));\r\n        let contests: Contest[] = result.result;\r\n\r\n        contests = contests.filter((contest) => contest.phase == FINISHED);\r\n\r\n        return dispatch({\r\n          type: FETCH_CONTEST_LIST,\r\n          payload: contests,\r\n        });\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_CONTEST_LIST,\r\n            \"FAiled to fethc contestList \" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        createDispatch(\r\n          ERROR_FETCHING_CONTEST_LIST,\r\n          \"FAiled to fethc contestList\"\r\n        )\r\n      );\r\n    });\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts",["158","159"],"import {\r\n  delay,\r\n  getUserInfoURL,\r\n  getUserSubmissionsURL,\r\n  stringToArray,\r\n} from \"../../util/bashforces\";\r\nimport Submission from \"../../util/DataTypes/Submission\";\r\nimport { AppDispatch } from \"../store\";\r\nimport { load, createDispatch } from \"./fetchActions\";\r\nimport {\r\n  ADD_USER,\r\n  CLEAR_USERS,\r\n  ERROR_FETCHING_USER,\r\n  LOADING_USERS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING_USER_SUBMISSIONS,\r\n  CLEAR_USERS_SUBMISSIONS,\r\n} from \"./types\";\r\n\r\nexport const clearUsers = (dispatch) =>\r\n  new Promise<void>((resolve, reject) => {\r\n    dispatch({\r\n      type: CLEAR_USERS,\r\n    });\r\n    resolve();\r\n  });\r\n\r\nexport const fetchUsers = (dispatch, handle: string) => {\r\n  dispatch(load(LOADING_USERS));\r\n  let currentId = Date.now();\r\n\r\n  let handleArray: string[] = stringToArray(handle, \",\");\r\n  handleArray = handleArray.filter((handle) => handle.length);\r\n\r\n  for (let handle of handleArray) {\r\n    if (handle.length === 0) continue;\r\n    dispatch({ type: ADD_USER, payload: { handle, id: currentId } });\r\n  }\r\n};\r\n\r\nexport const clearUsersSubmissions = (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_USERS_SUBMISSIONS,\r\n  });\r\n};\r\n\r\nexport const fetchUserSubmissions = async (\r\n  dispatch: AppDispatch,\r\n  handles: string[],\r\n  limit?: number\r\n) => {\r\n  let currentId = Date.now();\r\n  if (handles.length === 0) clearUsersSubmissions(dispatch);\r\n\r\n  await delay(1000);\r\n\r\n  for (let handle of handles) {\r\n    dispatch(load(LOADING_USER_SUBMISSIONS));\r\n\r\n    await delay(300);\r\n\r\n    fetch(getUserSubmissionsURL(handle, limit))\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.status !== \"OK\")\r\n            return dispatch(\r\n              createDispatch(\r\n                ERROR_FETCHING_USER_SUBMISSIONS,\r\n                \"Failed To fetch Submissions for User with handle \" + handle\r\n              )\r\n            );\r\n\r\n          let submissions: Submission[] = result.result;\r\n\r\n          submissions = submissions.filter(\r\n            (submission) => submission.contestId\r\n          );\r\n\r\n          return dispatch({\r\n            type: FETCH_USER_SUBMISSIONS,\r\n            payload: { result: submissions, id: currentId },\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          return dispatch(\r\n            createDispatch(\r\n              ERROR_FETCHING_USER_SUBMISSIONS,\r\n              \"Failed To fetch Submissions for User\" + handle\r\n            )\r\n          );\r\n        }\r\n      )\r\n      .catch((e) => {\r\n        // console.log(e);\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"Failed To fetch Submissions for User\" + handle\r\n          )\r\n        );\r\n      });\r\n  }\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts",["160","161","162","163"],"import Theme, { ThemesType } from \"../../util/Theme\";\r\nimport { AppPayloadType } from \"../actions/fetchActions\";\r\nimport { AppReducerType, ErrorLog } from \"../actions/types\";\r\n\r\nexport class AppStateType {\r\n  errorLog: string[];\r\n  successLog: string[];\r\n  theme: Theme;\r\n  themeMod: ThemesType;\r\n  loaded: boolean;\r\n  contestPage: {\r\n    perPage: number;\r\n    showDate: boolean;\r\n  };\r\n  problemPage: {\r\n    perPage: number;\r\n    minRating: number;\r\n    maxRating: number;\r\n    showUnrated: boolean;\r\n  };\r\n\r\n  constructor() {\r\n    this.errorLog = new Array<string>();\r\n    this.successLog = new Array<string>();\r\n    this.theme = new Theme();\r\n    this.themeMod = ThemesType.DARK;\r\n\r\n    this.loaded = false;\r\n\r\n    this.contestPage = { perPage: 100, showDate: false };\r\n    this.problemPage = {\r\n      perPage: 100,\r\n      minRating: -1,\r\n      maxRating: 4000,\r\n      showUnrated: true,\r\n    };\r\n  }\r\n\r\n  init = (data?: any) => {\r\n    if (data.themeMod != undefined) {\r\n      this.themeMod = data.themeMod as ThemesType;\r\n      this.theme = new Theme(this.themeMod);\r\n    }\r\n\r\n    if (data.contestPage) {\r\n      if (data.contestPage.perPage)\r\n        this.contestPage.perPage = data.contestPage.perPage;\r\n      if (data.contestPage.showDate != undefined)\r\n        this.contestPage.showDate = data.contestPage.showDate;\r\n    }\r\n\r\n    if (data.problemPage) {\r\n      if (data.problemPage.perPage)\r\n        this.problemPage.perPage = data.problemPage.perPage;\r\n      if (data.problemPage.minRating)\r\n        this.problemPage.minRating = data.problemPage.minRating;\r\n      if (data.problemPage.maxRating)\r\n        this.problemPage.maxRating = data.problemPage.maxRating;\r\n      if (data.problemPage.showUnrated != undefined)\r\n        this.problemPage.showUnrated = data.showUnrated;\r\n    }\r\n  };\r\n\r\n  clone = (): AppStateType => {\r\n    const cloned = new AppStateType();\r\n\r\n    cloned.errorLog = this.errorLog;\r\n    cloned.successLog = this.successLog;\r\n    cloned.themeMod = this.themeMod;\r\n    cloned.loaded = this.loaded;\r\n    cloned.contestPage = this.contestPage;\r\n    cloned.problemPage = this.problemPage;\r\n\r\n    return cloned;\r\n  };\r\n}\r\n\r\nconst initAppState: AppStateType = new AppStateType();\r\n\r\n// dispatch(CHANGE_PER_PAGE,payload: )\r\n\r\nexport const AppReducer = (\r\n  initState: AppStateType = initAppState,\r\n  action: AppPayloadType\r\n) => {\r\n  let curr = initState.clone();\r\n  switch (action.type) {\r\n    case AppReducerType.CLEAR_ERROR_LOG:\r\n      curr.errorLog = new Array<string>();\r\n      return curr;\r\n    case AppReducerType.CHANGE_THEME:\r\n      curr.themeMod = action.payload.data as ThemesType;\r\n      curr.theme = new Theme(curr.themeMod);\r\n      return curr;\r\n    case AppReducerType.TOGGLE_DATE:\r\n      curr.contestPage.showDate = !initState.contestPage.showDate;\r\n      return curr;\r\n    case AppReducerType.APP_LOADED:\r\n      return { ...initState, loaded: true };\r\n    case AppReducerType.CHANGE_MAX_RATING:\r\n      curr.problemPage.maxRating = action.payload.data as number;\r\n      return curr;\r\n    case AppReducerType.CHANGE_MIN_RATING:\r\n      curr.problemPage.minRating = action.payload.data as number;\r\n      return curr;\r\n    case AppReducerType.CHANGE_PER_PAGE:\r\n      if (action.payload.isContest)\r\n        curr.contestPage.perPage = action.payload.data as number;\r\n      else curr.problemPage.perPage = action.payload.data as number;\r\n      return curr;\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\Theme.ts",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"164","replacedBy":"168"},{"ruleId":"166","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":2,"column":28,"nodeType":"172","messageId":"173","endLine":2,"endColumn":36},{"ruleId":"170","severity":1,"message":"174","line":4,"column":10,"nodeType":"172","messageId":"173","endLine":4,"endColumn":21},{"ruleId":"170","severity":1,"message":"175","line":6,"column":3,"nodeType":"172","messageId":"173","endLine":6,"endColumn":19},{"ruleId":"170","severity":1,"message":"176","line":7,"column":3,"nodeType":"172","messageId":"173","endLine":7,"endColumn":19},{"ruleId":"170","severity":1,"message":"177","line":8,"column":3,"nodeType":"172","messageId":"173","endLine":8,"endColumn":25},{"ruleId":"170","severity":1,"message":"178","line":11,"column":10,"nodeType":"172","messageId":"173","endLine":11,"endColumn":30},{"ruleId":"179","severity":1,"message":"180","line":34,"column":6,"nodeType":"181","endLine":34,"endColumn":8,"suggestions":"182"},{"ruleId":"170","severity":1,"message":"183","line":15,"column":10,"nodeType":"172","messageId":"173","endLine":15,"endColumn":19},{"ruleId":"170","severity":1,"message":"184","line":17,"column":10,"nodeType":"172","messageId":"173","endLine":17,"endColumn":23},{"ruleId":"170","severity":1,"message":"185","line":18,"column":10,"nodeType":"172","messageId":"173","endLine":18,"endColumn":17},{"ruleId":"179","severity":1,"message":"186","line":34,"column":6,"nodeType":"181","endLine":34,"endColumn":8,"suggestions":"187"},{"ruleId":"179","severity":1,"message":"188","line":38,"column":6,"nodeType":"181","endLine":38,"endColumn":22,"suggestions":"189"},{"ruleId":"190","severity":1,"message":"191","line":95,"column":13,"nodeType":"192","endLine":113,"endColumn":18},{"ruleId":"190","severity":1,"message":"191","line":142,"column":13,"nodeType":"192","endLine":149,"endColumn":24},{"ruleId":"170","severity":1,"message":"193","line":60,"column":10,"nodeType":"172","messageId":"173","endLine":60,"endColumn":21},{"ruleId":"179","severity":1,"message":"194","line":130,"column":6,"nodeType":"181","endLine":130,"endColumn":26,"suggestions":"195"},{"ruleId":"170","severity":1,"message":"196","line":152,"column":9,"nodeType":"172","messageId":"173","endLine":152,"endColumn":19},{"ruleId":"197","severity":1,"message":"198","line":316,"column":37,"nodeType":"199","messageId":"200","endLine":316,"endColumn":39},{"ruleId":"197","severity":1,"message":"198","line":350,"column":54,"nodeType":"199","messageId":"200","endLine":350,"endColumn":56},{"ruleId":"197","severity":1,"message":"198","line":373,"column":54,"nodeType":"199","messageId":"200","endLine":373,"endColumn":56},{"ruleId":"170","severity":1,"message":"201","line":9,"column":18,"nodeType":"172","messageId":"173","endLine":9,"endColumn":27},{"ruleId":"170","severity":1,"message":"202","line":15,"column":8,"nodeType":"172","messageId":"173","endLine":15,"endColumn":18},{"ruleId":"170","severity":1,"message":"203","line":23,"column":8,"nodeType":"172","messageId":"173","endLine":23,"endColumn":15},{"ruleId":"179","severity":1,"message":"204","line":92,"column":6,"nodeType":"181","endLine":92,"endColumn":26,"suggestions":"205"},{"ruleId":"197","severity":1,"message":"198","line":274,"column":41,"nodeType":"199","messageId":"200","endLine":274,"endColumn":43},{"ruleId":"206","severity":1,"message":"207","line":35,"column":11,"nodeType":"192","endLine":39,"endColumn":68},{"ruleId":"208","severity":1,"message":"209","line":36,"column":47,"nodeType":"199","messageId":"210","endLine":36,"endColumn":48},{"ruleId":"197","severity":1,"message":"198","line":44,"column":27,"nodeType":"199","messageId":"200","endLine":44,"endColumn":29},{"ruleId":"197","severity":1,"message":"198","line":107,"column":25,"nodeType":"199","messageId":"200","endLine":107,"endColumn":27},{"ruleId":"170","severity":1,"message":"211","line":24,"column":8,"nodeType":"172","messageId":"173","endLine":24,"endColumn":15},{"ruleId":"170","severity":1,"message":"212","line":28,"column":10,"nodeType":"172","messageId":"173","endLine":28,"endColumn":18},{"ruleId":"170","severity":1,"message":"213","line":29,"column":10,"nodeType":"172","messageId":"173","endLine":29,"endColumn":24},{"ruleId":"197","severity":1,"message":"198","line":75,"column":12,"nodeType":"199","messageId":"200","endLine":75,"endColumn":14},{"ruleId":"197","severity":1,"message":"214","line":79,"column":14,"nodeType":"199","messageId":"200","endLine":79,"endColumn":16},{"ruleId":"170","severity":1,"message":"215","line":15,"column":10,"nodeType":"172","messageId":"173","endLine":15,"endColumn":16},{"ruleId":"170","severity":1,"message":"216","line":26,"column":7,"nodeType":"172","messageId":"173","endLine":26,"endColumn":24},{"ruleId":"197","severity":1,"message":"214","line":160,"column":63,"nodeType":"199","messageId":"200","endLine":160,"endColumn":65},{"ruleId":"170","severity":1,"message":"217","line":3,"column":3,"nodeType":"172","messageId":"173","endLine":3,"endColumn":17},{"ruleId":"170","severity":1,"message":"218","line":13,"column":3,"nodeType":"172","messageId":"173","endLine":13,"endColumn":22},{"ruleId":"170","severity":1,"message":"219","line":3,"column":26,"nodeType":"172","messageId":"173","endLine":3,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":40,"column":23,"nodeType":"199","messageId":"200","endLine":40,"endColumn":25},{"ruleId":"197","severity":1,"message":"198","line":48,"column":37,"nodeType":"199","messageId":"200","endLine":48,"endColumn":39},{"ruleId":"197","severity":1,"message":"198","line":59,"column":40,"nodeType":"199","messageId":"200","endLine":59,"endColumn":42},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],["220"],["221"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'fetchContestList' is defined but never used.","'fetchProblemList' is defined but never used.","'fetchSharedProblemList' is defined but never used.","'fetchUserSubmissions' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state.appState.themeMod'. Either include it or remove the dependency array.","ArrayExpression",["222"],"'RootState' is defined but never used.","'ProblemShared' is defined but never used.","'Verdict' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["223"],"React Hook useEffect has a missing dependency: 'sync'. Either include it or remove the dependency array.",["224"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'showUnrated' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filterProblem', 'history', and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.",["225"],"'searchData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setHandle' is assigned a value but never used.","'submitUser' is assigned a value but never used.","'Problem' is defined but never used.","React Hook useEffect has missing dependencies: 'contestList', 'filterContest', and 'history'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["226"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Contest' is defined but never used.","'cursorTo' is defined but never used.","'AppReducerType' is defined but never used.","Expected '===' and instead saw '=='.","'result' is defined but never used.","'sharedProblemsURL' is assigned a value but never used.","'getUserInfoURL' is defined but never used.","'ERROR_FETCHING_USER' is defined but never used.","'ErrorLog' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},"Update the dependencies array to be: [state.appState.themeMod]",{"range":"237","text":"238"},"Update the dependencies array to be: [dispatch]",{"range":"239","text":"240"},"Update the dependencies array to be: [state.userList, sync]",{"range":"241","text":"242"},"Update the dependencies array to be: [state, filterState, history, problemList, filterProblem]",{"range":"243","text":"244"},"Update the dependencies array to be: [state, filterState, history, contestList, filterContest]",{"range":"245","text":"246"},[1153,1155],"[state.appState.themeMod]",[1348,1350],"[dispatch]",[1395,1411],"[state.userList, sync]",[4436,4456],"[state, filterState, history, problemList, filterProblem]",[2905,2925],"[state, filterState, history, contestList, filterContest]"]