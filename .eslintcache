[{"F:\\web\\react\\codeforces-api\\src\\index.js":"1","F:\\web\\react\\codeforces-api\\src\\App.js":"2","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js":"3","F:\\web\\react\\codeforces-api\\src\\data\\store.js":"4","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js":"5","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js":"6","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js":"7","F:\\web\\react\\codeforces-api\\src\\components\\Menu.js":"8","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js":"9","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.js":"11","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js":"12","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js":"13","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js":"14","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.js":"16","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.js":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.js":"18"},{"size":806,"mtime":1613735479823,"results":"19","hashOfConfig":"20"},{"size":1239,"mtime":1615372920252,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":3055,"mtime":1614769608642,"results":"23","hashOfConfig":"20"},{"size":1661,"mtime":1614772267326,"results":"24","hashOfConfig":"20"},{"size":1098,"mtime":1614949897362,"results":"25","hashOfConfig":"20"},{"size":3313,"mtime":1615375745672,"results":"26","hashOfConfig":"20"},{"size":3072,"mtime":1615290471651,"results":"27","hashOfConfig":"20"},{"size":487,"mtime":1613730924343,"results":"28","hashOfConfig":"20"},{"size":1027,"mtime":1615200658131,"results":"29","hashOfConfig":"20"},{"size":306,"mtime":1614517891347,"results":"30","hashOfConfig":"20"},{"size":15832,"mtime":1615202105087,"results":"31","hashOfConfig":"20"},{"size":11799,"mtime":1615202109558,"results":"32","hashOfConfig":"20"},{"size":4128,"mtime":1615204227399,"results":"33","hashOfConfig":"20"},{"size":1605,"mtime":1614767956158,"results":"34","hashOfConfig":"20"},{"size":3738,"mtime":1615375815814,"results":"35","hashOfConfig":"20"},{"size":1591,"mtime":1614767592001,"results":"36","hashOfConfig":"20"},{"size":3069,"mtime":1615375704840,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1pnglh",{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\web\\react\\codeforces-api\\src\\index.js",[],["81","82"],"F:\\web\\react\\codeforces-api\\src\\App.js",["83","84","85","86","87","88","89"],"F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.js",["90","91","92"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport { problemListReducer, contestReducer } from \"./reducers/fetchReducers\";\r\nimport { userSubmissionsReducer, userReducer } from \"./reducers/userReducers\";\r\n\r\nexport const contestList = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 1476,\r\n      name: \"Educational Codeforces Round 103 (Rated for Div. 2)\",\r\n      type: \"ICPC\",\r\n      phase: \"FINISHED\",\r\n      frozen: false,\r\n      durationSeconds: 7200,\r\n      startTimeSeconds: 1611930900,\r\n      relativeTimeSeconds: 418636,\r\n    },\r\n  ],\r\n};\r\n\r\nconst problem = {\r\n  status: \"OK\",\r\n  result: {\r\n    problems: [\r\n      {\r\n        contestId: 1478,\r\n        index: \"C\",\r\n        name: \"Nezzar and Symmetric Array\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1500,\r\n        rating: 1700,\r\n        tags: [\"implementation\", \"math\", \"sortings\"],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst submissions = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 105129023,\r\n      contestId: 1368,\r\n      creationTimeSeconds: 1611387508,\r\n      relativeTimeSeconds: 2147483647,\r\n      problem: {\r\n        contestId: 1368,\r\n        index: \"D\",\r\n        name: \"AND, OR and square sum\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1750,\r\n        rating: 1700,\r\n        tags: [\"bitmasks\", \"greedy\", \"math\"],\r\n      },\r\n      author: {\r\n        contestId: 1368,\r\n        members: [{ handle: \"bashem\" }],\r\n        participantType: \"PRACTICE\",\r\n        ghost: false,\r\n        startTimeSeconds: 1592491500,\r\n      },\r\n      programmingLanguage: \"GNU C++14\",\r\n      verdict: \"OK\",\r\n      testset: \"TESTS\",\r\n      passedTestCount: 17,\r\n      timeConsumedMillis: 109,\r\n      memoryConsumedBytes: 1638400,\r\n    },\r\n  ],\r\n};\r\n\r\nconst failedUserFethc = {\r\n  status: \"FAILED\",\r\n  comment: \"handles: User with handle b not found\",\r\n};\r\n\r\nconst middlewre = [thunk, logger];\r\n\r\nconst combinedReducers = combineReducers({\r\n  userSubmissions: userSubmissionsReducer,\r\n  problemList: problemListReducer,\r\n  contestList: contestReducer,\r\n  userList: userReducer,\r\n});\r\n\r\nconst newCombinedReducers = (state, action) => {\r\n  const intermediateReducer = combinedReducers(state, action);\r\n  //console.log(intermediateReducer.problemList);\r\n\r\n  return {\r\n    userSubmissions: intermediateReducer.userSubmissions,\r\n    problemList: {\r\n      problems: intermediateReducer.problemList.problems,\r\n      error: intermediateReducer.problemList.error,\r\n      tags: intermediateReducer.problemList.tags,\r\n      loading: intermediateReducer.problemList.loading,\r\n    },\r\n    contestList: {\r\n      contests: intermediateReducer.contestList.contests,\r\n      error: intermediateReducer.contestList.error,\r\n      loading: intermediateReducer.contestList.loading,\r\n      problems: intermediateReducer.problemList.problems,\r\n    },\r\n    userList: intermediateReducer.userList,\r\n  };\r\n};\r\n\r\nconst store = createStore(\r\n  newCombinedReducers,\r\n  {},\r\n  applyMiddleware(...middlewre)\r\n);\r\n\r\nexport default store;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js",[],"F:\\web\\react\\codeforces-api\\src\\components\\Menu.js",["93","94"],"import { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  fetchContestList,\r\n  fetchProblemList,\r\n} from \"../data/actions/fetchActions\";\r\nimport { fetchUserSubmissions, fetchUsers } from \"../data/actions/userActions\";\r\n\r\nexport const PROBLEMS = \"/problems\";\r\nexport const CONTEST = \"/contests\";\r\n\r\nconst Menu = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n  const state = useSelector((state) => state);\r\n\r\n  useEffect(()=>{\r\n    console.log(state)\r\n    \r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n  },[state.userList])\r\n\r\n  const sync = () => {\r\n    fetchProblemList(dispatch);\r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n    fetchContestList(dispatch);\r\n  };\r\n\r\n  const submitUser = () => {\r\n    fetchUsers(dispatch, handle)\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light p-2\">\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarTogglerDemo03\"\r\n        aria-controls=\"navbarTogglerDemo03\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n        BashForces\r\n      </Link>\r\n\r\n      <div\r\n        className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n        id=\"navbarTogglerDemo03\">\r\n        <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n          <li className=\"nav-item active\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                sync();\r\n              }}\r\n              href=\"#\">\r\n              <FontAwesomeIcon icon={faSync} />\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item active\">\r\n            <Link to={PROBLEMS} className=\"nav-link\" href=\"#\">\r\n              Problem List\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={CONTEST} className=\"nav-link\" href=\"#\">\r\n              Contest\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n        <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"btn btn-outline-success my-2 my-sm-0\"\r\n            type=\"submit\">\r\n            Enter\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\constants.js",[],"F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js",["95","96","97","98","99","100"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getRandomInteger } from \"../../util/bashforces\";\r\nimport { sortByRating, sortBySolveCount } from \"../../util/sortMethods\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport ProblemList from \"./ProblemList\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faSort,\r\n  faSortDown,\r\n  faSortUp,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ProblemPage = () => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = -1,\r\n    SORT_BY_RATING = 1,\r\n    SORT_BY_SOLVE = 2,\r\n    ASCENDING = 0,\r\n    DESCENDING = 1;\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    rating: { min_rating: -1, max_rating: 4000 },\r\n    tags: new Set(),\r\n    search: \"\",\r\n    sortBy: SORT_BY_SOLVE,\r\n    order: DESCENDING,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [problemList, setProblemList] = useState({ problems: [], error: \"\" });\r\n  const [tagList, setTagList] = useState({ tags: [] });\r\n  const [randomProblem, setRandomProblem] = useState(-1);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n\r\n  const filterProblem = (problem) => {\r\n    let containTags = false;\r\n\r\n    if (filterState.tags.size === 0) containTags = true;\r\n    else\r\n      for (let tag of problem.tags)\r\n        if (filterState.tags.has(tag)) {\r\n          containTags = true;\r\n          break;\r\n        }\r\n    let ratingInside =\r\n      problem.rating <= filterState.rating.max_rating &&\r\n      problem.rating >= filterState.rating.min_rating;\r\n    let solveStatus = filterState.solveStatus.includes(getState(problem));\r\n\r\n    let searchIncluded = true;\r\n    let text = filterState.search.toLowerCase().trim();\r\n    if (text.length)\r\n      searchIncluded =\r\n        problem.name.toLowerCase().includes(text) ||\r\n        problem.id.toLowerCase().includes(text);\r\n\r\n    return solveStatus && ratingInside && containTags && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (state.problemList.problems !== undefined) {\r\n      let newState = { problems: [] };\r\n      newState.problems = state.problemList.problems;\r\n\r\n      newState.problems = newState.problems.filter((problem) =>\r\n        filterProblem(problem)\r\n      );\r\n\r\n      if (filterState.sortBy === SORT_BY_RATING)\r\n        newState.problems.sort(sortByRating);\r\n      else newState.problems.sort(sortBySolveCount);\r\n      if (filterState.order == DESCENDING) newState.problems.reverse();\r\n\r\n      let tags = [];\r\n      for (let tag of state.problemList.tags) tags.push(tag);\r\n      setTagList({ tags });\r\n      setProblemList({ ...problemList, problems: newState.problems });\r\n    }\r\n    setRandomProblem(-1);\r\n    setSelected(0);\r\n  }, [state, filterState]);\r\n\r\n  const sortList = (sortBy) => {\r\n    if (filterState.sortBy === sortBy)\r\n      setFilterState({ ...filterState, order: filterState.order ^ 1 });\r\n    else\r\n      setFilterState({\r\n        ...filterState,\r\n        ...{\r\n          order: sortBy === SORT_BY_RATING ? ASCENDING : DESCENDING,\r\n          sortBy: sortBy,\r\n        },\r\n      });\r\n  };\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const searchData = (e) => {\r\n    setFilterState({ ...filterState, search: e.target.value });\r\n  };\r\n\r\n  const chooseRandom = () => {\r\n    if (problemList.problems.length === 0) return;\r\n    setRandomProblem(getRandomInteger(0, problemList.problems.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(problemList.problems.length, lo + filterState.perPage);\r\n\r\n    if (lo > high) return [];\r\n    return problemList.problems.slice(lo, high);\r\n  };\r\n\r\n  const nuetral = () => {\r\n    return <FontAwesomeIcon icon={faSort} />;\r\n  };\r\n\r\n  const less = () => {\r\n    return <FontAwesomeIcon icon={faSortDown} />;\r\n  };\r\n\r\n  const greater = () => {\r\n    return <FontAwesomeIcon icon={faSortUp} />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs d-flex justify-content-between container border-0 mt-3\">\r\n          <li className=\"nav-item col-4\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0\"\r\n              onSubmit={(e) => e.preventDefault()}>\r\n              <input\r\n                className=\"form-control mr-sm-2 bg-dark text-light\"\r\n                type=\"text\"\r\n                placeholder=\"Problem Name or Id\"\r\n                aria-label=\"Search\"\r\n                value={filterState.search}\r\n                onChange={(e) =>\r\n                  setFilterState({\r\n                    ...filterState,\r\n                    search: e.target.value,\r\n                  })\r\n                }\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n          <li className=\"nav-item text-secondary h-6\">\r\n            Showing {paginate().length} of {problemList.problems.length}\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                onClick={chooseRandom}\r\n                title=\"Find Random Contest\"\r\n                href=\"#\">\r\n                <FontAwesomeIcon icon={faRandom} />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                title=\"Cancel Random\"\r\n                onClick={() => setRandomProblem(-1)}\r\n                href=\"#\">\r\n                <FontAwesomeIcon icon={faRedo} />\r\n              </button>\r\n            </div>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-bs-toggle=\"modal\"\r\n              data-bs-target=\"#exampleModal\">\r\n              {<FontAwesomeIcon icon={faFilter} />}\r\n            </button>\r\n            <div\r\n              className=\"modal\"\r\n              id=\"exampleModal\"\r\n              tabIndex=\"-1\"\r\n              aria-labelledby=\"exampleModalLabel\"\r\n              aria-hidden=\"true\">\r\n              <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                      Modal title\r\n                    </h5>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"></button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <div className=\"group\">\r\n                      <form\r\n                        className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                        onSubmit={(e) => e.preventDefault()}>\r\n                        <div className=\"d-flex justify-content-between w-100\">\r\n                          <div className=\"input-group\">\r\n                            <span\r\n                              className=\"input-group-text\"\r\n                              id=\"perpage-input\">\r\n                              Per Page\r\n                            </span>\r\n                            <input\r\n                              className=\"form-control mr-sm-2\"\r\n                              type=\"number\"\r\n                              aria-label=\"perpage\"\r\n                              aria-describedby=\"perpage-input\"\r\n                              value={filterState.perPage}\r\n                              onChange={(e) =>\r\n                                setFilterState({\r\n                                  ...filterState,\r\n                                  perPage: e.target.value,\r\n                                })\r\n                              }\r\n                            />\r\n                          </div>\r\n                          <div className=\"input-group d-flex justify-content-end\">\r\n                            <button\r\n                              className=\"btn btn-light nav-link h-6\"\r\n                              onClick={() => setFilterState(initFilterState)}\r\n                              title=\"Reset To Default State\"\r\n                              href=\"#\">\r\n                              <FontAwesomeIcon icon={faRedoAlt} />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {initFilterState.solveStatus.map((solved) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.solveStatus.includes(solved)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={solved}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            let ind = filterState.solveStatus.indexOf(solved);\r\n                            if (ind != -1)\r\n                              myFilterState.solveStatus.splice(ind, 1);\r\n                            else myFilterState.solveStatus.push(solved);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {solved == SOLVED\r\n                            ? \"Solved\"\r\n                            : solved == ATTEMPTED\r\n                            ? \"Attempted\"\r\n                            : \"Unsolved\"}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <form\r\n                      className=\"\"\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}>\r\n                      <div className=\"d-flex\">\r\n                        <div className=\"input-group pe-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Min Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Min Rating\"\r\n                            value={filterState.rating.min_rating}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  min_rating: e.target.value,\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <div className=\"input-group ps-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Max Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Max Rating\"\r\n                            value={filterState.rating.max_rating}\r\n                            onChange={searchData}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  max_rating: e.target.value,\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {tagList.tags.map((tag) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.tags.has(tag)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={tag}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            if (filterState.tags.has(tag))\r\n                              myFilterState.tags.delete(tag);\r\n                            else myFilterState.tags.add(tag);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {tag}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"p-2\">\r\n        <Pagination\r\n          totalCount={problemList.problems.length}\r\n          perPage={filterState.perPage}\r\n          selected={selected}\r\n          pageSelected={(e) => setSelected(e)}\r\n        />\r\n      </div>\r\n      <table className=\"table table-bordered table-dark container\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_RATING)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Rating</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_RATING\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_SOLVE)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Solve Count</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_SOLVE\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {randomProblem === -1 ? (\r\n            <ProblemList problems={paginate()} />\r\n          ) : (\r\n            <ProblemList problems={[problemList.problems[randomProblem]]} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        totalCount={problemList.problems.length}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        pageSelected={(e) => setSelected(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js",["101","102","103","104"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getRandomInteger } from \"../../util/bashforces\";\r\nimport ContestList from \"./ContestList\";\r\nimport { ATTEMPTED_CONTESTS, SOLVED_CONTESTS } from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ContestPage = () => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const [contestList, setContestList] = useState({ contests: [], error: \"\" });\r\n  const [randomContest, setRandomContest] = useState(-1);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = 2;\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    search: \"\",\r\n    showDate: 0,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const contestStatus = (contestId) => {\r\n    if (state.userSubmissions[SOLVED_CONTESTS].has(contestId)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_CONTESTS].has(contestId))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const filterContest = (contest) => {\r\n    let solveStatus = filterState.solveStatus.includes(\r\n      contestStatus(contest.id.toString())\r\n    );\r\n\r\n    let searchIncluded = true;\r\n\r\n    let text = filterState.search.toLowerCase().trim();\r\n\r\n    if (text.length)\r\n      searchIncluded =\r\n        contest.name.toLowerCase().includes(text) ||\r\n        contest.id.toString().includes(text);\r\n\r\n    return solveStatus && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    let contests = state.contestList.contests;\r\n\r\n    const newContestList = contests.filter((contest) => filterContest(contest));\r\n\r\n    setContestList({ ...contestList, contests: newContestList });\r\n    setRandomContest(-1);\r\n  }, [state, filterState]);\r\n\r\n  const chooseRandom = () => {\r\n    if (contestList.contests.length === 0) return;\r\n    setRandomContest(getRandomInteger(0, contestList.contests.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(contestList.contests.length, lo + filterState.perPage);\r\n\r\n    if (lo > high) return [];\r\n    return contestList.contests.slice(lo, high);\r\n  };\r\n\r\n  return (\r\n    <div className=\"div\">\r\n      <div className=\"menu\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark container bg-dark p-2\">\r\n          <div\r\n            className=\"collapse navbar-collapse d-flex justify-content-between\"\r\n            id=\"navbarTogglerDemo03\">\r\n            <ul className=\"navbar w-100 navbar-dark d-flex justify-content-between bg-dark list-unstyled\">\r\n              <li className=\"nav-item col-6\">\r\n                <form\r\n                  className=\"form-inline d-flex my-2 my-lg-0\"\r\n                  onSubmit={(e) => e.preventDefault()}>\r\n                  <input\r\n                    className=\"form-control bg-dark text-light mr-sm-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Contest Name or Id\"\r\n                    aria-label=\"Search\"\r\n                    value={filterState.search}\r\n                    onChange={(e) =>\r\n                      setFilterState({ ...filterState, search: e.target.value })\r\n                    }\r\n                  />\r\n                </form>\r\n              </li>\r\n              <li className=\"nav-item text-secondary\">\r\n                Showing {paginate().length} of {contestList.contests.length}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <div\r\n                  className=\"btn-group\"\r\n                  role=\"group\"\r\n                  aria-label=\"Basic example\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    onClick={chooseRandom}\r\n                    title=\"Find Random Contest\"\r\n                    href=\"#\">\r\n                    <FontAwesomeIcon icon={faRandom} />\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    title=\"Cancel Random\"\r\n                    onClick={() => setRandomContest(-1)}\r\n                    href=\"#\">\r\n                    <FontAwesomeIcon icon={faRedo} />\r\n                  </button>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  data-bs-toggle=\"modal\"\r\n                  data-bs-target=\"#exampleModal\">\r\n                  {<FontAwesomeIcon icon={faFilter} />}\r\n                </button>\r\n                <div\r\n                  className=\"modal\"\r\n                  id=\"exampleModal\"\r\n                  tabIndex=\"-1\"\r\n                  aria-labelledby=\"exampleModalLabel\"\r\n                  aria-hidden=\"true\">\r\n                  <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                      <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                          Filter\r\n                        </h5>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn-close\"\r\n                          data-bs-dismiss=\"modal\"\r\n                          aria-label=\"Close\"></button>\r\n                      </div>\r\n                      <div className=\"modal-body\">\r\n                        <div className=\"group\">\r\n                          <form\r\n                            className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                            onSubmit={(e) => e.preventDefault()}>\r\n                            <div className=\"d-flex justify-content-between w-100\">\r\n                              <div className=\"input-group\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Per Page:\r\n                                </span>\r\n                                <input\r\n                                  className=\"form-control mr-sm-2\"\r\n                                  type=\"number\"\r\n                                  aria-label=\"perpage\"\r\n                                  aria-describedby=\"perpage-input\"\r\n                                  value={filterState.perPage}\r\n                                  onChange={(e) =>\r\n                                    setFilterState({\r\n                                      ...filterState,\r\n                                      perPage: e.target.value\r\n                                        .toLowerCase()\r\n                                        .trim(),\r\n                                    })\r\n                                  }\r\n                                />\r\n                              </div>\r\n                              <div className=\"input-group d-flex justify-content-end\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Show Date\r\n                                </span>\r\n                                <div className=\"input-group-text\">\r\n                                  <input\r\n                                    className=\"form-check-input mt-0\"\r\n                                    type=\"checkbox\"\r\n                                    defaultChecked={filterState.showDate}\r\n                                    onChange={() =>\r\n                                      setFilterState({\r\n                                        ...filterState,\r\n                                        showDate: filterState.showDate ^ 1,\r\n                                      })\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                              <button\r\n                                className=\"btn btn-secondary nav-link m-2 h-6\"\r\n                                onClick={() => setFilterState(initFilterState)}\r\n                                title=\"Reset To Default State\"\r\n                                href=\"#\">\r\n                                <FontAwesomeIcon icon={faRedoAlt} />\r\n                              </button>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                        <div\r\n                          className=\"btn-group d-flex flex-wrap justify-content-between\"\r\n                          role=\"group\"\r\n                          aria-label=\"First group\">\r\n                          {initFilterState.solveStatus.map((solved) => (\r\n                            <button\r\n                              className={\r\n                                (filterState.solveStatus.includes(solved)\r\n                                  ? \"btn bg-success\"\r\n                                  : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                              }\r\n                              key={solved}\r\n                              onClick={() => {\r\n                                let myFilterState = { ...filterState };\r\n                                let ind = filterState.solveStatus.indexOf(\r\n                                  solved\r\n                                );\r\n                                if (ind != -1)\r\n                                  myFilterState.solveStatus.splice(ind, 1);\r\n                                else myFilterState.solveStatus.push(solved);\r\n                                setFilterState(myFilterState);\r\n                              }}>\r\n                              {solved == SOLVED\r\n                                ? \"Solved\"\r\n                                : solved == ATTEMPTED\r\n                                ? \"Attempted\"\r\n                                : \"Unsolved\"}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      {/* <PaginationComponent /> */}\r\n\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n\r\n      <table className=\"table table-bordered table-dark\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Contest Name</th>\r\n            <th scope=\"col\">A</th>\r\n            <th scope=\"col\">B</th>\r\n            <th scope=\"col\">C</th>\r\n            <th scope=\"col\">D</th>\r\n            <th scope=\"col\">E</th>\r\n            <th scope=\"col\">F</th>\r\n            <th scope=\"col\">G</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <ContestList\r\n            contestlist={\r\n              randomContest === -1\r\n                ? paginate()\r\n                : [contestList.contests[randomContest]]\r\n            }\r\n            filterState={filterState}\r\n          />\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js",["105","106"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\n\r\nconst ContestList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getInfo = (contestId, index) => {\r\n    let l = 0,\r\n      r = state.problemList.problems.length - 1,\r\n      ans = -1;\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (\r\n        state.problemList.problems[mid].contestId === contestId &&\r\n        state.problemList.problems[mid].index === index\r\n      ) {\r\n        ans = mid;\r\n        break;\r\n      }\r\n\r\n      if (\r\n        state.problemList.problems[mid].contestId > contestId ||\r\n        (state.problemList.problems[mid].contestId === contestId &&\r\n          state.problemList.problems[mid].index > index)\r\n      ) {\r\n        r = mid - 1;\r\n      } else l = mid + 1;\r\n    }\r\n\r\n    const EMPTY = \"EMPTY bg-dark\";\r\n\r\n    if (ans === -1 && index.length !== 1)\r\n      return <td key={contestId + index} className={EMPTY}></td>;\r\n\r\n    if (ans === -1 && index.length === 1) {\r\n      let arr = [];\r\n      for (let i = 1; ; i++) {\r\n        let res = getInfo(contestId, index + i);\r\n        if (res.props.className === EMPTY) break;\r\n        arr.push(res);\r\n      }\r\n\r\n      if (arr.length == 0) {\r\n        return <td key={contestId + index} className={EMPTY}></td>;\r\n      }\r\n\r\n      if (arr.length < 3)\r\n        return (\r\n          <td className=\"p-0\" key={contestId + index.charAt(0)}>\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <td className=\"inside p-0\" key={contestId + index}>\r\n                    {arr.map((element) => element)}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </td>\r\n        );\r\n      else\r\n        return (\r\n          <td className=\"inside p-0\" key={contestId + index}>\r\n            More than 4\r\n          </td>\r\n        );\r\n    }\r\n\r\n    let solved = state.userSubmissions[SOLVED_PROBLEMS].has(\r\n      contestId.toString() + index\r\n    );\r\n    let attempted = state.userSubmissions[ATTEMPTED_PROBLEMS].has(\r\n      contestId + index\r\n    );\r\n\r\n    let name = state.problemList.problems[ans].name;\r\n    let id = state.problemList.problems[ans].id;\r\n    if (name.length > 10) name = name.substring(0, 9) + \"...\";\r\n\r\n    let className =\r\n      (solved ? \"bg-success\" : attempted ? \"bg-danger\" : \"\") + \" p-1\";\r\n\r\n    return (\r\n      <td className={className} key={id}>\r\n        <a\r\n          className=\"text-light text-decoration-none\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          tabIndex=\"0\"\r\n          data-bs-toggle=\"tooltip\"\r\n          title={\r\n            state.problemList.problems[ans].name +\r\n            \", Rating:\" +\r\n            state.problemList.problems[ans].rating\r\n          }\r\n          href={getProblemUrl(contestId, index)}>\r\n          {index + \". \"}\r\n          {name}\r\n        </a>\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const renderProblem = () => {};\r\n\r\n  const contestCard = (contest) => {\r\n    return (\r\n      <tr key={contest.id}>\r\n        <th scope=\"row\">{contest.id}</th>\r\n        <td>\r\n          <div className=\"name\">\r\n            <a\r\n              className=\"text-light text-decoration-none wrap\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title={formateDate(contest.startTimeSeconds)}\r\n              href={getContestUrl(contest.id)}>\r\n              {contest.name}\r\n            </a>\r\n          </div>\r\n          {props.filterState.showDate ? (\r\n            <div className=\"time\">{formateDate(contest.startTimeSeconds)}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </td>\r\n        {[...Array(7)].map((x, i) => {\r\n          return getInfo(contest.id, charInc(\"A\", i));\r\n        })}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.contestlist.map((contest) => {\r\n        return contestCard(contest);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ContestList;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js",["107","108","109"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../util/constants\";\r\n\r\nconst ProblemList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem) => {\r\n    let classes = \"bg-dark\";\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS) classes = \"bg-success\";\r\n    else if (problemState === ATTEMPTED_PROBLEMS) classes = \"bg-danger\";\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{problem.id}</td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className=\"text-light text-decoration-none\"\r\n            target=\"_blank\"\r\n            title={problem.tags}\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>{problem.rating}</td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.problems.map((problem) => {\r\n        return ProblemCard(problem);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\Pagination.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.js",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":28,"nodeType":"116","messageId":"117","endLine":2,"endColumn":36},{"ruleId":"114","severity":1,"message":"118","line":3,"column":27,"nodeType":"116","messageId":"117","endLine":3,"endColumn":33},{"ruleId":"114","severity":1,"message":"119","line":3,"column":50,"nodeType":"116","messageId":"117","endLine":3,"endColumn":54},{"ruleId":"114","severity":1,"message":"120","line":4,"column":10,"nodeType":"116","messageId":"117","endLine":4,"endColumn":21},{"ruleId":"114","severity":1,"message":"121","line":6,"column":3,"nodeType":"116","messageId":"117","endLine":6,"endColumn":19},{"ruleId":"114","severity":1,"message":"122","line":7,"column":3,"nodeType":"116","messageId":"117","endLine":7,"endColumn":19},{"ruleId":"114","severity":1,"message":"123","line":8,"column":3,"nodeType":"116","messageId":"117","endLine":8,"endColumn":23},{"ruleId":"114","severity":1,"message":"124","line":23,"column":7,"nodeType":"116","messageId":"117","endLine":23,"endColumn":14},{"ruleId":"114","severity":1,"message":"125","line":40,"column":7,"nodeType":"116","messageId":"117","endLine":40,"endColumn":18},{"ruleId":"114","severity":1,"message":"126","line":74,"column":7,"nodeType":"116","messageId":"117","endLine":74,"endColumn":22},{"ruleId":"127","severity":1,"message":"128","line":25,"column":5,"nodeType":"129","endLine":25,"endColumn":21,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":58,"column":13,"nodeType":"133","endLine":64,"endColumn":24},{"ruleId":"134","severity":1,"message":"135","line":83,"column":29,"nodeType":"136","messageId":"137","endLine":83,"endColumn":31},{"ruleId":"127","severity":1,"message":"138","line":92,"column":6,"nodeType":"129","endLine":92,"endColumn":26,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":270,"column":37,"nodeType":"136","messageId":"137","endLine":270,"endColumn":39},{"ruleId":"134","severity":1,"message":"135","line":275,"column":35,"nodeType":"136","messageId":"137","endLine":275,"endColumn":37},{"ruleId":"134","severity":1,"message":"135","line":277,"column":38,"nodeType":"136","messageId":"137","endLine":277,"endColumn":40},{"ruleId":"141","severity":1,"message":"142","line":319,"column":29,"nodeType":"143","endLine":327,"endColumn":30},{"ruleId":"127","severity":1,"message":"144","line":67,"column":6,"nodeType":"129","endLine":67,"endColumn":26,"suggestions":"145"},{"ruleId":"134","severity":1,"message":"140","line":233,"column":41,"nodeType":"136","messageId":"137","endLine":233,"endColumn":43},{"ruleId":"134","severity":1,"message":"135","line":238,"column":39,"nodeType":"136","messageId":"137","endLine":238,"endColumn":41},{"ruleId":"134","severity":1,"message":"135","line":240,"column":42,"nodeType":"136","messageId":"137","endLine":240,"endColumn":44},{"ruleId":"134","severity":1,"message":"135","line":50,"column":22,"nodeType":"136","messageId":"137","endLine":50,"endColumn":24},{"ruleId":"114","severity":1,"message":"146","line":111,"column":9,"nodeType":"116","messageId":"117","endLine":111,"endColumn":22},{"ruleId":"114","severity":1,"message":"147","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":1,"column":28,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"148","severity":1,"message":"149","line":29,"column":11,"nodeType":"133","endLine":33,"endColumn":68},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Link' is defined but never used.","'useDispatch' is defined but never used.","'fetchContestList' is defined but never used.","'fetchProblemList' is defined but never used.","'fetchUserSubmissions' is defined but never used.","'problem' is assigned a value but never used.","'submissions' is assigned a value but never used.","'failedUserFethc' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'state'. Either include them or remove the dependency array.","ArrayExpression",["152"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'filterProblem' and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.",["153"],"Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'contestList' and 'filterContest'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["154"],"'renderProblem' is assigned a value but never used.","'useEffect' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [dispatch, state, state.userList]",{"range":"161","text":"162"},"Update the dependencies array to be: [state, filterState, problemList, filterProblem]",{"range":"163","text":"164"},"Update the dependencies array to be: [state, filterState, contestList, filterContest]",{"range":"165","text":"166"},[800,816],"[dispatch, state, state.userList]",[2975,2995],"[state, filterState, problemList, filterProblem]",[1982,2002],"[state, filterState, contestList, filterContest]"]