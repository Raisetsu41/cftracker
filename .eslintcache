[{"F:\\web\\react\\codeforces-api\\src\\index.js":"1","F:\\web\\react\\codeforces-api\\src\\App.js":"2","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js":"3","F:\\web\\react\\codeforces-api\\src\\data\\store.js":"4","F:\\web\\react\\codeforces-api\\src\\components\\Card.js":"5","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js":"6","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js":"7","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js":"8","F:\\web\\react\\codeforces-api\\src\\components\\ProblemList.js":"9","F:\\web\\react\\codeforces-api\\src\\data\\actions\\connectors.js":"10","F:\\web\\react\\codeforces-api\\src\\components\\Menu.js":"11"},{"size":705,"mtime":1612440057070,"results":"12","hashOfConfig":"13"},{"size":1260,"mtime":1613217263243,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":2065,"mtime":1612868570258,"results":"16","hashOfConfig":"13"},{"size":937,"mtime":1613042704980,"results":"17","hashOfConfig":"13"},{"size":2658,"mtime":1613213549141,"results":"18","hashOfConfig":"13"},{"size":204,"mtime":1613213474850,"results":"19","hashOfConfig":"13"},{"size":2778,"mtime":1613214277385,"results":"20","hashOfConfig":"13"},{"size":2782,"mtime":1613136901739,"results":"21","hashOfConfig":"13"},{"size":483,"mtime":1613213111568,"results":"22","hashOfConfig":"13"},{"size":1509,"mtime":1613217308696,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"1pnglh",{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"27"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\web\\react\\codeforces-api\\src\\index.js",["53"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore } from \"redux\";\nimport store from \"./data/store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["54","55"],"F:\\web\\react\\codeforces-api\\src\\App.js",["56","57","58","59","60","61"],"F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.js",["62","63","64"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  userSubmissionsReducer,\r\n  problemListReducer,\r\n  errorReducer,\r\n  unsolvedProblemsReducer,\r\n} from \"./reducers/fetchReducers\";\r\n\r\nexport const contestList = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 1476,\r\n      name: \"Educational Codeforces Round 103 (Rated for Div. 2)\",\r\n      type: \"ICPC\",\r\n      phase: \"FINISHED\",\r\n      frozen: false,\r\n      durationSeconds: 7200,\r\n      startTimeSeconds: 1611930900,\r\n      relativeTimeSeconds: 418636,\r\n    },\r\n  ],\r\n};\r\n\r\nconst problem = {\r\n  status: \"OK\",\r\n  result: {\r\n    problems: [\r\n      {\r\n        contestId: 1478,\r\n        index: \"C\",\r\n        name: \"Nezzar and Symmetric Array\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1500,\r\n        rating: 1700,\r\n        tags: [\"implementation\", \"math\", \"sortings\"],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst z = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 105129023,\r\n      contestId: 1368,\r\n      creationTimeSeconds: 1611387508,\r\n      relativeTimeSeconds: 2147483647,\r\n      problem: {\r\n        contestId: 1368,\r\n        index: \"D\",\r\n        name: \"AND, OR and square sum\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1750,\r\n        rating: 1700,\r\n        tags: [\"bitmasks\", \"greedy\", \"math\"],\r\n      },\r\n      author: {\r\n        contestId: 1368,\r\n        members: [{ handle: \"bashem\" }],\r\n        participantType: \"PRACTICE\",\r\n        ghost: false,\r\n        startTimeSeconds: 1592491500,\r\n      },\r\n      programmingLanguage: \"GNU C++14\",\r\n      verdict: \"OK\",\r\n      testset: \"TESTS\",\r\n      passedTestCount: 17,\r\n      timeConsumedMillis: 109,\r\n      memoryConsumedBytes: 1638400,\r\n    },\r\n  ],\r\n};\r\n\r\n\r\nconst middlewre = [thunk, logger];\r\n\r\nconst combinedReducers = combineReducers({\r\n  userSubmissions:userSubmissionsReducer,\r\n  problemList: problemListReducer,\r\n  errorReducer,\r\n});\r\n\r\nconst store = createStore(combinedReducers, {}, applyMiddleware(...middlewre));\r\n\r\nexport default store;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Card.js",["65"],"import React, { useEffect, useState } from \"react\";\r\n\r\nexport function IndividualProblem(params) {}\r\n\r\nfunction Card(id, name) {\r\n  const [solveCount, setSolveCount] = useState(0);\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  return (\r\n    <div className=\"card bg-light\" key={id}>\r\n      <h3 className=\"text-secondary\">\r\n        {id} , {name} , {solveCount}\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function problemCard(problem) {\r\n  return (\r\n    <div className=\"card bg-dark\" key={problem.contestId + problem.index}>\r\n      <div className=\"card-header d-flex justify-content-between text-light\">\r\n        <div className=\"id font-weight-bold\">\r\n          {problem.contestId + problem.index}\r\n        </div>\r\n        <div className=\"name\">{problem.name}</div>\r\n        <div className=\"rating\">{problem.rating}</div>\r\n\r\n        <div className=\"solvedCount\">{problem.solvedCount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js",["66","67","68","69","70"],"import {\r\n  ERROR_FETCHING,\r\n  FETCH_POSTS,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING,\r\n} from \"../actions/types\";\r\nimport store from \"../store\";\r\n\r\n// Map problem <key,<key,[]>> => <problemId:string,<Verdict:string,[Array]>>\r\n// contestAttempted => {contestId: {solvedIndex: [],attemptedIndex:[]}};\r\n\r\nconst submissionsInitialStore = {\r\n  solvedProblems: new Set(),\r\n  attemptedProblems: new Set(),\r\n};\r\n\r\nexport function userSubmissionsReducer(\r\n  initState = submissionsInitialStore,\r\n  action\r\n) {\r\n  // console.log(action);\r\n  let currentState = {\r\n    solvedProblems: new Set(),\r\n    attemptedProblems: new Set(),\r\n  };\r\n  if (action.type === FETCH_USER_SUBMISSIONS) {\r\n    action.payload.forEach((element) => {\r\n      let contestId = element.problem.contestId.toString();\r\n      let verdict = element.verdict;\r\n      let problemIndex = element.problem.index;\r\n      if (verdict == \"OK\") {\r\n        currentState.solvedProblems.add(contestId + problemIndex);\r\n      } else {\r\n        currentState.attemptedProblems.add(contestId + problemIndex);\r\n      }\r\n\r\n      // if (!(contestId in currentState)) currentState[contestId] = {};\r\n      // if (!(problemIndex in currentState[contestId]))\r\n      //   currentState[contestId][problemIndex] = {};\r\n      // if (!(verdict in currentState[contestId][problemIndex]))\r\n      //   currentState[contestId][problemIndex][verdict] = [];\r\n      // let submissionId = element.id;\r\n\r\n      // currentState[contestId][problemIndex][verdict].push(submissionId);\r\n    });\r\n\r\n    for (let item of currentState.solvedProblems) {\r\n      currentState.attemptedProblems.delete(item);\r\n    }\r\n\r\n    // return { ...initState, problems: currentState };\r\n    return currentState;\r\n  }\r\n  // console.log(\"CurrentState:\");\r\n  //console.log(currentState);\r\n\r\n  return initState;\r\n}\r\n\r\nconst problemList = { problems: [] };\r\n\r\nexport function problemListReducer(initState = problemList, action) {\r\n  // console.log(action);\r\n  // console.log(problemList);\r\n  if (action.type === FETCH_PROBLEM_LIST) {\r\n    return {\r\n      problems: action.payload,\r\n    };\r\n  }\r\n\r\n  return initState;\r\n}\r\n\r\nexport function errorReducer(initState = \"\", action) {\r\n  // console.log(action);\r\n  //console.log(initState);\r\n  if (action.type == ERROR_FETCHING) {\r\n    initState = action.payload;\r\n  } else if (action.type == LOADING) {\r\n    initState = action.payload;\r\n  }\r\n  return initState;\r\n}\r\n\r\n// export function unsolvedProblemsReducer(initState = {}, action) {\r\n//   let unsolvedProblems = {problems:[]};\r\n//  // let allProblems = store.getState();\r\n//  // console.log(store.getState());\r\n//   return unsolvedProblems;\r\n// }\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js",["71","72","73","74","75","76"],"// import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nimport {\r\n  ERROR_FETCHING,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_USER_SUBMISSIONS,\r\n} from \"./types\";\r\nimport store from \"../store\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst allContest = \"https://codeforces.com/api/contest.list\";\r\nlet id = 5,\r\n  user = \"h\";\r\nconst individualContestURL =\r\n  \"https://codeforces.com/api/contest.status?contestId=\" +\r\n  id +\r\n  \"&handle=\" +\r\n  user;\r\nconst problemSet = \"https://codeforces.com/api/problemset.problems\";\r\nconst userStatus = \"https://codeforces.com/api/user.status?handle=bashem\";\r\n\r\nconst errorFecthing = (message) => {\r\n  return {\r\n    type: ERROR_FETCHING,\r\n    payload: message,\r\n  };\r\n};\r\n\r\nexport const fetchUserSubmissions = (dispatch) => {\r\n//  const dispatch = useDispatch();\r\n\r\n  // console.log(\"fetchUSerSubmissions\");\r\n  fetch(userStatus)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status != \"OK\") return errorFecthing(\"Status Failed\");\r\n        console.log(result);\r\n        return dispatch({\r\n          type: FETCH_USER_SUBMISSIONS,\r\n          payload: result.result,\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      // console.log(e);\r\n      return dispatch(errorFecthing(\"ERROR in User Submission\" + e));\r\n    });\r\n};\r\n\r\nexport const fetchProblemList = (dispatch) => {\r\n  //const dispatch = useDispatch();\r\n  //console.log(\"FetchProblemList\");\r\n  //return (dispatch) => {\r\n  fetch(problemSet)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status != \"OK\")\r\n          return dispatch(errorFecthing(\"Problem Status Failed\"));\r\n        //   console.log(result);\r\n        let problems = result.result.problems;\r\n\r\n        for (let i = 0; i < result.result.problemStatistics.length; i++) {\r\n          if (!(\"rating\" in problems[i])) problems[i][\"rating\"] = -1;\r\n          problems[i][\"solvedCount\"] =\r\n            result.result.problemStatistics[i].solvedCount;\r\n        }\r\n\r\n        return dispatch({\r\n          type: FETCH_PROBLEM_LIST,\r\n          payload: problems,\r\n        });\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(errorFecthing(\"ERROR in PROBLEM LIST\"));\r\n    });\r\n};\r\n\r\nexport const fetchContestList = () => {};\r\n","F:\\web\\react\\codeforces-api\\src\\components\\ProblemList.js",["77","78","79","80","81","82","83","84"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { problemCard } from \"./Card\";\r\nimport {\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n} from \"../data/actions/connectors\";\r\nimport { unstable_concurrentAct } from \"react-dom/test-utils\";\r\n\r\nexport const sortByRating = (a, b) => {\r\n  if (a.rating < b.rating) return -1;\r\n  if (a.rating > b.rating) return 1;\r\n  return 0;\r\n};\r\n\r\nexport const sortBySolveCount = (a, b) => {\r\n  if (a.solvedCount < b.solvedCount) return -1;\r\n  if (a.solvedCount > b.solvedCount) return 1;\r\n  return 0;\r\n};\r\n\r\nexport function ProblemList() {\r\n  const state = useSelector((state) => state);\r\n  // console.log(state.problemList);\r\n  const [unSolvedProblems, setUnsolvedProblems] = useState({ problems: [] });\r\n\r\n  useEffect(() => {\r\n    console.log(state);\r\n    if (state.problemList.problems != undefined) {\r\n      let newState = { problems: [] };\r\n      for (let problem of state.problemList.problems) {\r\n        let id = problem.contestId.toString() + problem.index;\r\n        if (!state.userSubmissions.solvedProblems.has(id)) {\r\n          newState.problems.push(problem);\r\n        }\r\n      }\r\n      console.log(\"NEW State\");\r\n      setUnsolvedProblems(newState);\r\n    }\r\n  }, [state]);\r\n  console.log(unSolvedProblems);\r\n\r\n  const sortList = (reverse, rating) => {\r\n    let newUnSolvedProblem ={...unSolvedProblems};\r\n    //newUnSolvedProblem.problems = [...unSolvedProblems.problems];\r\n    if (rating) newUnSolvedProblem.problems.sort(sortByRating);\r\n    else newUnSolvedProblem.problems.sort(sortBySolveCount);\r\n    if (reverse) newUnSolvedProblem.problems.reverse();\r\n    console.log(newUnSolvedProblem.problems == unSolvedProblems.problems);\r\n    console.log(reverse + \" \" + rating);\r\n    setUnsolvedProblems(newUnSolvedProblem);\r\n    console.log(unSolvedProblems);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs\">\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className=\"nav-link active\"\r\n              onClick={() => sortList(false, false)}\r\n              href=\"#\"\r\n            >\r\n              Sort By SolvedCount\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={() => sortList(false, true)}\r\n              href=\"#\"\r\n            >\r\n              Sort By Rating\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"problems\">\r\n        {unSolvedProblems.problems.map((problem) => {\r\n          return problemCard(problem);\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(ProblemList);\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\connectors.js",[],"F:\\web\\react\\codeforces-api\\src\\components\\Menu.js",["85","86","87","88","89"],{"ruleId":"90","severity":1,"message":"91","line":6,"column":10,"nodeType":"92","messageId":"93","endLine":6,"endColumn":21},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"90","severity":1,"message":"98","line":2,"column":28,"nodeType":"92","messageId":"93","endLine":2,"endColumn":36},{"ruleId":"90","severity":1,"message":"99","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":13},{"ruleId":"90","severity":1,"message":"100","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":17},{"ruleId":"90","severity":1,"message":"101","line":6,"column":10,"nodeType":"92","messageId":"93","endLine":6,"endColumn":25},{"ruleId":"90","severity":1,"message":"102","line":6,"column":27,"nodeType":"92","messageId":"93","endLine":6,"endColumn":45},{"ruleId":"90","severity":1,"message":"103","line":18,"column":9,"nodeType":"92","messageId":"93","endLine":18,"endColumn":14},{"ruleId":"90","severity":1,"message":"104","line":8,"column":3,"nodeType":"92","messageId":"93","endLine":8,"endColumn":26},{"ruleId":"90","severity":1,"message":"105","line":27,"column":7,"nodeType":"92","messageId":"93","endLine":27,"endColumn":14},{"ruleId":"90","severity":1,"message":"106","line":44,"column":7,"nodeType":"92","messageId":"93","endLine":44,"endColumn":8},{"ruleId":"90","severity":1,"message":"107","line":6,"column":22,"nodeType":"92","messageId":"93","endLine":6,"endColumn":35},{"ruleId":"90","severity":1,"message":"108","line":3,"column":3,"nodeType":"92","messageId":"93","endLine":3,"endColumn":14},{"ruleId":"90","severity":1,"message":"99","line":8,"column":8,"nodeType":"92","messageId":"93","endLine":8,"endColumn":13},{"ruleId":"109","severity":1,"message":"110","line":32,"column":19,"nodeType":"111","messageId":"112","endLine":32,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":78,"column":19,"nodeType":"111","messageId":"112","endLine":78,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":80,"column":26,"nodeType":"111","messageId":"112","endLine":80,"endColumn":28},{"ruleId":"90","severity":1,"message":"99","line":8,"column":8,"nodeType":"92","messageId":"93","endLine":8,"endColumn":13},{"ruleId":"90","severity":1,"message":"113","line":10,"column":10,"nodeType":"92","messageId":"93","endLine":10,"endColumn":21},{"ruleId":"90","severity":1,"message":"114","line":12,"column":7,"nodeType":"92","messageId":"93","endLine":12,"endColumn":17},{"ruleId":"90","severity":1,"message":"115","line":15,"column":7,"nodeType":"92","messageId":"93","endLine":15,"endColumn":27},{"ruleId":"109","severity":1,"message":"116","line":38,"column":27,"nodeType":"111","messageId":"112","endLine":38,"endColumn":29},{"ruleId":"109","severity":1,"message":"116","line":66,"column":27,"nodeType":"111","messageId":"112","endLine":66,"endColumn":29},{"ruleId":"90","severity":1,"message":"100","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":17},{"ruleId":"90","severity":1,"message":"101","line":5,"column":3,"nodeType":"92","messageId":"93","endLine":5,"endColumn":18},{"ruleId":"90","severity":1,"message":"102","line":6,"column":3,"nodeType":"92","messageId":"93","endLine":6,"endColumn":21},{"ruleId":"90","severity":1,"message":"117","line":8,"column":10,"nodeType":"92","messageId":"93","endLine":8,"endColumn":32},{"ruleId":"109","severity":1,"message":"116","line":29,"column":36,"nodeType":"111","messageId":"112","endLine":29,"endColumn":38},{"ruleId":"109","severity":1,"message":"110","line":49,"column":45,"nodeType":"111","messageId":"112","endLine":49,"endColumn":47},{"ruleId":"118","severity":1,"message":"119","line":60,"column":13,"nodeType":"120","endLine":64,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":69,"column":13,"nodeType":"120","endLine":73,"endColumn":14},{"ruleId":"90","severity":1,"message":"121","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"98","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"118","severity":1,"message":"119","line":16,"column":7,"nodeType":"120","endLine":16,"endColumn":44},{"ruleId":"118","severity":1,"message":"119","line":23,"column":13,"nodeType":"120","endLine":23,"endColumn":46},{"ruleId":"118","severity":1,"message":"119","line":28,"column":13,"nodeType":"120","endLine":28,"endColumn":46},"no-unused-vars","'createStore' is defined but never used.","Identifier","unusedVar","no-native-reassign",["122"],"no-negated-in-lhs",["123"],"'useState' is defined but never used.","'store' is defined but never used.","'connect' is defined but never used.","'mapStateToProps' is defined but never used.","'mapDispatchToProps' is defined but never used.","'state' is assigned a value but never used.","'unsolvedProblemsReducer' is defined but never used.","'problem' is assigned a value but never used.","'z' is assigned a value but never used.","'setSolveCount' is assigned a value but never used.","'FETCH_POSTS' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useDispatch' is defined but never used.","'allContest' is assigned a value but never used.","'individualContestURL' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'unstable_concurrentAct' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]