[{"F:\\web\\react\\codeforces-api\\src\\index.js":"1","F:\\web\\react\\codeforces-api\\src\\App.js":"2","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js":"3","F:\\web\\react\\codeforces-api\\src\\data\\store.js":"4","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js":"5","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js":"6","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js":"7","F:\\web\\react\\codeforces-api\\src\\components\\Menu.js":"8","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js":"9","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.js":"11","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js":"12","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js":"13","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js":"14","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.js":"16","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.js":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.js":"18"},{"size":806,"mtime":1613735479823,"results":"19","hashOfConfig":"20"},{"size":1088,"mtime":1614767749729,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":3055,"mtime":1614769608642,"results":"23","hashOfConfig":"20"},{"size":1661,"mtime":1614772267326,"results":"24","hashOfConfig":"20"},{"size":1098,"mtime":1614949897362,"results":"25","hashOfConfig":"20"},{"size":3025,"mtime":1614944871204,"results":"26","hashOfConfig":"20"},{"size":3022,"mtime":1614949615377,"results":"27","hashOfConfig":"20"},{"size":487,"mtime":1613730924343,"results":"28","hashOfConfig":"20"},{"size":1021,"mtime":1614948873933,"results":"29","hashOfConfig":"20"},{"size":306,"mtime":1614517891347,"results":"30","hashOfConfig":"20"},{"size":16201,"mtime":1614767409838,"results":"31","hashOfConfig":"20"},{"size":11892,"mtime":1614767934313,"results":"32","hashOfConfig":"20"},{"size":3978,"mtime":1614767945783,"results":"33","hashOfConfig":"20"},{"size":1605,"mtime":1614767956158,"results":"34","hashOfConfig":"20"},{"size":3336,"mtime":1614949961741,"results":"35","hashOfConfig":"20"},{"size":1591,"mtime":1614767592001,"results":"36","hashOfConfig":"20"},{"size":3004,"mtime":1614950062673,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1pnglh",{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},"F:\\web\\react\\codeforces-api\\src\\index.js",[],["82","83"],"F:\\web\\react\\codeforces-api\\src\\App.js",["84","85","86","87","88","89","90"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  fetchContestList,\n  fetchProblemList,\n  fetchUserSubmissions,\n} from \"./data/actions/fetchActions\";\n\nimport Menu, { CONTEST, PROBLEMS } from \"./components/Menu\";\nimport ProblemPage from \"./components/problem/ProblemPage\";\nimport ContestPage from \"./components/contest/ContestPage\";\n\nfunction App(props) {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // fetchProblemList(dispatch);\n    // fetchContestList(dispatch);\n  }, []);\n\n  return (\n    <div className=\"App container-fluid bg-dark\">\n      <div className=\"menu\">\n        <Menu />\n      </div>\n\n      <Switch>\n        <Route path={PROBLEMS} component={ProblemPage} />\n        <Route strict path={CONTEST} component={ContestPage}/>\n\n      </Switch>\n      <footer className=\"text-light d-flex justify-content-center p-3\">\n        All rights reserved by @Bashem\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.js",["91","92","93"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport { problemListReducer, contestReducer } from \"./reducers/fetchReducers\";\r\nimport { userSubmissionsReducer, userReducer } from \"./reducers/userReducers\";\r\n\r\nexport const contestList = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 1476,\r\n      name: \"Educational Codeforces Round 103 (Rated for Div. 2)\",\r\n      type: \"ICPC\",\r\n      phase: \"FINISHED\",\r\n      frozen: false,\r\n      durationSeconds: 7200,\r\n      startTimeSeconds: 1611930900,\r\n      relativeTimeSeconds: 418636,\r\n    },\r\n  ],\r\n};\r\n\r\nconst problem = {\r\n  status: \"OK\",\r\n  result: {\r\n    problems: [\r\n      {\r\n        contestId: 1478,\r\n        index: \"C\",\r\n        name: \"Nezzar and Symmetric Array\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1500,\r\n        rating: 1700,\r\n        tags: [\"implementation\", \"math\", \"sortings\"],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst submissions = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 105129023,\r\n      contestId: 1368,\r\n      creationTimeSeconds: 1611387508,\r\n      relativeTimeSeconds: 2147483647,\r\n      problem: {\r\n        contestId: 1368,\r\n        index: \"D\",\r\n        name: \"AND, OR and square sum\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1750,\r\n        rating: 1700,\r\n        tags: [\"bitmasks\", \"greedy\", \"math\"],\r\n      },\r\n      author: {\r\n        contestId: 1368,\r\n        members: [{ handle: \"bashem\" }],\r\n        participantType: \"PRACTICE\",\r\n        ghost: false,\r\n        startTimeSeconds: 1592491500,\r\n      },\r\n      programmingLanguage: \"GNU C++14\",\r\n      verdict: \"OK\",\r\n      testset: \"TESTS\",\r\n      passedTestCount: 17,\r\n      timeConsumedMillis: 109,\r\n      memoryConsumedBytes: 1638400,\r\n    },\r\n  ],\r\n};\r\n\r\nconst failedUserFethc = {\r\n  status: \"FAILED\",\r\n  comment: \"handles: User with handle b not found\",\r\n};\r\n\r\nconst middlewre = [thunk, logger];\r\n\r\nconst combinedReducers = combineReducers({\r\n  userSubmissions: userSubmissionsReducer,\r\n  problemList: problemListReducer,\r\n  contestList: contestReducer,\r\n  userList: userReducer,\r\n});\r\n\r\nconst newCombinedReducers = (state, action) => {\r\n  const intermediateReducer = combinedReducers(state, action);\r\n  //console.log(intermediateReducer.problemList);\r\n\r\n  return {\r\n    userSubmissions: intermediateReducer.userSubmissions,\r\n    problemList: {\r\n      problems: intermediateReducer.problemList.problems,\r\n      error: intermediateReducer.problemList.error,\r\n      tags: intermediateReducer.problemList.tags,\r\n      loading: intermediateReducer.problemList.loading,\r\n    },\r\n    contestList: {\r\n      contests: intermediateReducer.contestList.contests,\r\n      error: intermediateReducer.contestList.error,\r\n      loading: intermediateReducer.contestList.loading,\r\n      problems: intermediateReducer.problemList.problems,\r\n    },\r\n    userList: intermediateReducer.userList,\r\n  };\r\n};\r\n\r\nconst store = createStore(\r\n  newCombinedReducers,\r\n  {},\r\n  applyMiddleware(...middlewre)\r\n);\r\n\r\nexport default store;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js",[],"F:\\web\\react\\codeforces-api\\src\\components\\Menu.js",["94","95"],"F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\constants.js",[],"F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js",["96","97","98","99","100","101"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getRandomInteger } from \"../../util/bashforces\";\r\nimport Fuse from \"fuse.js\";\r\nimport { sortByRating, sortBySolveCount } from \"../../util/sortMethods\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport ProblemList from \"./ProblemList\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faSort,\r\n  faSortDown,\r\n  faSortUp,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ProblemPage = () => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = -1,\r\n    SORT_BY_RATING = 1,\r\n    SORT_BY_SOLVE = 2,\r\n    ASCENDING = 0,\r\n    DESCENDING = 1;\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    rating: { min_rating: -1, max_rating: 4000 },\r\n    tags: new Set(),\r\n    search: \"\",\r\n    sortBy: SORT_BY_SOLVE,\r\n    order: DESCENDING,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [problemList, setProblemList] = useState({ problems: [], error: \"\" });\r\n  const [tagList, setTagList] = useState({ tags: [] });\r\n  const [randomProblem, setRandomProblem] = useState(-1);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n\r\n  const filterProblem = (problem) => {\r\n    let containTags = false;\r\n\r\n    if (filterState.tags.size === 0) containTags = true;\r\n    else\r\n      for (let tag of problem.tags)\r\n        if (filterState.tags.has(tag)) {\r\n          containTags = true;\r\n          break;\r\n        }\r\n    let ratingInside =\r\n      problem.rating <= filterState.rating.max_rating &&\r\n      problem.rating >= filterState.rating.min_rating;\r\n    let solveStatus = filterState.solveStatus.includes(getState(problem));\r\n\r\n    return solveStatus && ratingInside && containTags;\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(filterState);\r\n\r\n    if (state.problemList.problems !== undefined) {\r\n      let newState = { problems: [] };\r\n      if (filterState.search.trim().length !== 0) {\r\n        newState.problems = new Fuse(state.problemList.problems, {\r\n          keys: [\"name\", \"id\"],\r\n          distance: 1,\r\n          ignoreLocation: true,\r\n          threshold: 0.3,\r\n          shouldSort: false,\r\n        }).search(filterState.search);\r\n        newState.problems = newState.problems.map((element) => element.item);\r\n      } else newState.problems = state.problemList.problems;\r\n\r\n      newState.problems = newState.problems.filter((problem) =>\r\n        filterProblem(problem)\r\n      );\r\n\r\n      if (filterState.sortBy === SORT_BY_RATING)\r\n        newState.problems.sort(sortByRating);\r\n      else newState.problems.sort(sortBySolveCount);\r\n      if (filterState.order == DESCENDING) newState.problems.reverse();\r\n\r\n      let tags = [];\r\n      for (let tag of state.problemList.tags) tags.push(tag);\r\n      setTagList({ tags });\r\n      setProblemList({ ...problemList, problems: newState.problems });\r\n    }\r\n    setRandomProblem(-1);\r\n    setSelected(0);\r\n  }, [state, filterState]);\r\n\r\n  const sortList = (sortBy) => {\r\n    console.log(\"BEFFORE:\");\r\n    console.log(filterState);\r\n    if (filterState.sortBy === sortBy)\r\n      setFilterState({ ...filterState, order: filterState.order ^ 1 });\r\n    else\r\n      setFilterState({\r\n        ...filterState,\r\n        ...{\r\n          order: sortBy === SORT_BY_RATING ? ASCENDING : DESCENDING,\r\n          sortBy: sortBy,\r\n        },\r\n      });\r\n  };\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const searchData = (e) => {\r\n    setFilterState({ ...filterState, search: e.target.value });\r\n  };\r\n\r\n  const chooseRandom = () => {\r\n    if (problemList.problems.length === 0) return;\r\n    setRandomProblem(getRandomInteger(0, problemList.problems.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(\r\n      problemList.problems.length - 1,\r\n      lo + filterState.perPage\r\n    );\r\n\r\n    if (lo > high) return [];\r\n    return problemList.problems.slice(lo, high);\r\n  };\r\n\r\n  const nuetral = () => {\r\n    return <FontAwesomeIcon icon={faSort} />;\r\n  };\r\n\r\n  const less = () => {\r\n    console.log(\"LESS\");\r\n    return <FontAwesomeIcon icon={faSortDown} />;\r\n  };\r\n\r\n  const greater = () => {\r\n    return <FontAwesomeIcon icon={faSortUp} />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs d-flex justify-content-between container border-0 mt-3\">\r\n          <li className=\"nav-item col-4\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0\"\r\n              onSubmit={(e) => e.preventDefault()}>\r\n              <input\r\n                className=\"form-control mr-sm-2 bg-dark text-light\"\r\n                type=\"text\"\r\n                placeholder=\"Problem Name or Id\"\r\n                aria-label=\"Search\"\r\n                value={filterState.search}\r\n                onChange={(e) =>\r\n                  setFilterState({ ...filterState, search: e.target.value })\r\n                }\r\n              />\r\n            </form>\r\n          </li>\r\n          \r\n          <li className=\"nav-item text-secondary h-6\">\r\n            Showing {paginate().length} of {problemList.problems.length}\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                onClick={chooseRandom}\r\n                title=\"Find Random Contest\"\r\n                href=\"#\">\r\n                <FontAwesomeIcon icon={faRandom} />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                title=\"Cancel Random\"\r\n                onClick={() => setRandomProblem(-1)}\r\n                href=\"#\">\r\n                <FontAwesomeIcon icon={faRedo} />\r\n              </button>\r\n            </div>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-bs-toggle=\"modal\"\r\n              data-bs-target=\"#exampleModal\">\r\n              {<FontAwesomeIcon icon={faFilter} />}\r\n            </button>\r\n            <div\r\n              className=\"modal\"\r\n              id=\"exampleModal\"\r\n              tabIndex=\"-1\"\r\n              aria-labelledby=\"exampleModalLabel\"\r\n              aria-hidden=\"true\">\r\n              <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                      Modal title\r\n                    </h5>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"></button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <div className=\"group\">\r\n                      <form\r\n                        className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                        onSubmit={(e) => e.preventDefault()}>\r\n                        <div className=\"d-flex justify-content-between w-100\">\r\n                          <div className=\"input-group\">\r\n                            <span\r\n                              className=\"input-group-text\"\r\n                              id=\"perpage-input\">\r\n                              Per Page\r\n                            </span>\r\n                            <input\r\n                              className=\"form-control mr-sm-2\"\r\n                              type=\"number\"\r\n                              aria-label=\"perpage\"\r\n                              aria-describedby=\"perpage-input\"\r\n                              value={filterState.perPage}\r\n                              onChange={(e) =>\r\n                                setFilterState({\r\n                                  ...filterState,\r\n                                  perPage: e.target.value,\r\n                                })\r\n                              }\r\n                            />\r\n                          </div>\r\n                          <div className=\"input-group d-flex justify-content-end\">\r\n                            <button\r\n                              className=\"btn btn-light nav-link h-6\"\r\n                              onClick={() => setFilterState(initFilterState)}\r\n                              title=\"Reset To Default State\"\r\n                              href=\"#\">\r\n                              <FontAwesomeIcon icon={faRedoAlt} />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {initFilterState.solveStatus.map((solved) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.solveStatus.includes(solved)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={solved}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            let ind = filterState.solveStatus.indexOf(solved);\r\n                            if (ind != -1)\r\n                              myFilterState.solveStatus.splice(ind, 1);\r\n                            else myFilterState.solveStatus.push(solved);\r\n                            setFilterState(myFilterState);\r\n                            console.log(filterState);\r\n                          }}>\r\n                          {solved == SOLVED\r\n                            ? \"Solved\"\r\n                            : solved == ATTEMPTED\r\n                            ? \"Attempted\"\r\n                            : \"Unsolved\"}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <form\r\n                      className=\"\"\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}>\r\n                      <div className=\"d-flex\">\r\n                        <div className=\"input-group pe-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Min Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Min Rating\"\r\n                            value={filterState.rating.min_rating}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  min_rating: e.target.value,\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <div className=\"input-group ps-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Max Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Max Rating\"\r\n                            value={filterState.rating.max_rating}\r\n                            onChange={searchData}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  max_rating: e.target.value,\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {tagList.tags.map((tag) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.tags.has(tag)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={tag}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            if (filterState.tags.has(tag))\r\n                              myFilterState.tags.delete(tag);\r\n                            else myFilterState.tags.add(tag);\r\n                            console.log(myFilterState);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {tag}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"p-2\">\r\n        <Pagination\r\n          totalCount={problemList.problems.length}\r\n          perPage={filterState.perPage}\r\n          selected={selected}\r\n          pageSelected={(e) => setSelected(e)}\r\n        />\r\n      </div>\r\n      <table className=\"table table-bordered table-dark container\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_RATING)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Rating</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_RATING\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_SOLVE)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Solve Count</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_SOLVE\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {randomProblem === -1 ? (\r\n            <ProblemList problems={paginate()} />\r\n          ) : (\r\n            <ProblemList problems={[problemList.problems[randomProblem]]} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        totalCount={problemList.problems.length}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        pageSelected={(e) => setSelected(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js",["102","103","104","105","106","107","108","109","110","111","112","113"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getRandomInteger,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport Fuse from \"fuse.js\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport ContestList from \"./ContestList\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst ContestPage = () => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const [contestList, setContestList] = useState({ contests: [], error: \"\" });\r\n  const [randomContest, setRandomContest] = useState(-1);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = 2;\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    search: \"\",\r\n    showDate: 0,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const contestStatus = (contestId) => {\r\n    if (state.userSubmissions[SOLVED_CONTESTS].has(contestId)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_CONTESTS].has(contestId))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const filterContest = (contest) => {\r\n    let solveStatus = filterState.solveStatus.includes(\r\n      contestStatus(contest.id.toString())\r\n    );\r\n    return solveStatus;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let contests = state.contestList.contests;\r\n\r\n    if (filterState.search.trim().length !== 0) {\r\n      contests = new Fuse(contests, {\r\n        keys: [\"name\", \"id\"],\r\n        ignoreLocation: true,\r\n        threshold: 0.1,\r\n        shouldSort: false,\r\n      })\r\n        .search(filterState.search)\r\n        .map((element) => element.item);\r\n    }\r\n\r\n    console.log(filterState);\r\n\r\n    const newContestList = contests.filter((contest) => filterContest(contest));\r\n\r\n    setContestList({ ...contestList, contests: newContestList });\r\n    setRandomContest(-1);\r\n  }, [state, filterState]);\r\n\r\n  const chooseRandom = () => {\r\n    if (contestList.contests.length === 0) return;\r\n    setRandomContest(getRandomInteger(0, contestList.contests.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(\r\n      contestList.contests.length - 1,\r\n      lo + filterState.perPage\r\n    );\r\n\r\n    if (lo > high) return [];\r\n    return contestList.contests.slice(lo, high);\r\n  };\r\n\r\n  return (\r\n    <div className=\"div\">\r\n      <div className=\"menu\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark container bg-dark p-2\">\r\n          <div\r\n            className=\"collapse navbar-collapse d-flex justify-content-between\"\r\n            id=\"navbarTogglerDemo03\">\r\n            <ul className=\"navbar w-100 navbar-dark d-flex justify-content-between bg-dark list-unstyled\">\r\n              <li className=\"nav-item col-6\">\r\n                <form\r\n                  className=\"form-inline d-flex my-2 my-lg-0\"\r\n                  onSubmit={(e) => e.preventDefault()}>\r\n                  <input\r\n                    className=\"form-control bg-dark text-light mr-sm-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Contest Name or Id\"\r\n                    aria-label=\"Search\"\r\n                    value={filterState.search}\r\n                    onChange={(e) =>\r\n                      setFilterState({ ...filterState, search: e.target.value })\r\n                    }\r\n                  />\r\n                </form>\r\n              </li>\r\n              <li className=\"nav-item text-secondary\">\r\n                Showing {paginate().length} of {contestList.contests.length}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <div\r\n                  className=\"btn-group\"\r\n                  role=\"group\"\r\n                  aria-label=\"Basic example\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    onClick={chooseRandom}\r\n                    title=\"Find Random Contest\"\r\n                    href=\"#\">\r\n                    <FontAwesomeIcon icon={faRandom} />\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    title=\"Cancel Random\"\r\n                    onClick={() => setRandomContest(-1)}\r\n                    href=\"#\">\r\n                    <FontAwesomeIcon icon={faRedo} />\r\n                  </button>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  data-bs-toggle=\"modal\"\r\n                  data-bs-target=\"#exampleModal\">\r\n                  {<FontAwesomeIcon icon={faFilter} />}\r\n                </button>\r\n                <div\r\n                  className=\"modal\"\r\n                  id=\"exampleModal\"\r\n                  tabIndex=\"-1\"\r\n                  aria-labelledby=\"exampleModalLabel\"\r\n                  aria-hidden=\"true\">\r\n                  <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                      <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                          Filter\r\n                        </h5>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn-close\"\r\n                          data-bs-dismiss=\"modal\"\r\n                          aria-label=\"Close\"></button>\r\n                      </div>\r\n                      <div className=\"modal-body\">\r\n                        <div className=\"group\">\r\n                          <form\r\n                            className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                            onSubmit={(e) => e.preventDefault()}>\r\n                            <div className=\"d-flex justify-content-between w-100\">\r\n                              <div className=\"input-group\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Per Page:\r\n                                </span>\r\n                                <input\r\n                                  className=\"form-control mr-sm-2\"\r\n                                  type=\"number\"\r\n                                  aria-label=\"perpage\"\r\n                                  aria-describedby=\"perpage-input\"\r\n                                  value={filterState.perPage}\r\n                                  onChange={(e) =>\r\n                                    setFilterState({\r\n                                      ...filterState,\r\n                                      perPage: e.target.value,\r\n                                    })\r\n                                  }\r\n                                />\r\n                              </div>\r\n                              <div className=\"input-group d-flex justify-content-end\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Show Date\r\n                                </span>\r\n                                <div className=\"input-group-text\">\r\n                                  <input\r\n                                    className=\"form-check-input mt-0\"\r\n                                    type=\"checkbox\"\r\n                                    defaultChecked={filterState.showDate}\r\n                                    onChange={() =>\r\n                                      setFilterState({\r\n                                        ...filterState,\r\n                                        showDate: filterState.showDate ^ 1,\r\n                                      })\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                              <button\r\n                                className=\"btn btn-secondary nav-link m-2 h-6\"\r\n                                onClick={() => setFilterState(initFilterState)}\r\n                                title=\"Reset To Default State\"\r\n                                href=\"#\">\r\n                                <FontAwesomeIcon icon={faRedoAlt} />\r\n                              </button>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                        <div\r\n                          className=\"btn-group d-flex flex-wrap justify-content-between\"\r\n                          role=\"group\"\r\n                          aria-label=\"First group\">\r\n                          {initFilterState.solveStatus.map((solved) => (\r\n                            <button\r\n                              className={\r\n                                (filterState.solveStatus.includes(solved)\r\n                                  ? \"btn bg-success\"\r\n                                  : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                              }\r\n                              key={solved}\r\n                              onClick={() => {\r\n                                let myFilterState = { ...filterState };\r\n                                let ind = filterState.solveStatus.indexOf(\r\n                                  solved\r\n                                );\r\n                                if (ind != -1)\r\n                                  myFilterState.solveStatus.splice(ind, 1);\r\n                                else myFilterState.solveStatus.push(solved);\r\n                                setFilterState(myFilterState);\r\n                                console.log(filterState);\r\n                              }}>\r\n                              {solved == SOLVED\r\n                                ? \"Solved\"\r\n                                : solved == ATTEMPTED\r\n                                ? \"Attempted\"\r\n                                : \"Unsolved\"}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      {/* <PaginationComponent /> */}\r\n\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n\r\n      <table className=\"table table-bordered table-dark\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Contest Name</th>\r\n            <th scope=\"col\">A</th>\r\n            <th scope=\"col\">B</th>\r\n            <th scope=\"col\">C</th>\r\n            <th scope=\"col\">D</th>\r\n            <th scope=\"col\">E</th>\r\n            <th scope=\"col\">F</th>\r\n            <th scope=\"col\">G</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <ContestList\r\n            contestlist={\r\n              randomContest === -1\r\n                ? paginate()\r\n                : [contestList.contests[randomContest]]\r\n            }\r\n            filterState={filterState}\r\n          />\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js",["114","115","116","117","118"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../util/constants\";\r\n\r\nconst ContestList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getInfo = (contestId, index) => {\r\n    let l = 0,\r\n      r = state.problemList.problems.length - 1,\r\n      ans = -1;\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (\r\n        state.problemList.problems[mid].contestId === contestId &&\r\n        state.problemList.problems[mid].index === index\r\n      ) {\r\n        ans = mid;\r\n        break;\r\n      }\r\n\r\n      if (\r\n        state.problemList.problems[mid].contestId > contestId ||\r\n        (state.problemList.problems[mid].contestId === contestId &&\r\n          state.problemList.problems[mid].index > index)\r\n      ) {\r\n        r = mid - 1;\r\n      } else l = mid + 1;\r\n    }\r\n\r\n    const EMPTY = \"EMPTY bg-dark\";\r\n\r\n    if (ans === -1 && index.length !== 1) return <td className={EMPTY}></td>;\r\n\r\n    if (ans === -1 && index.length === 1) {\r\n      let arr = [];\r\n      for (let i = 1; ; i++) {\r\n        let res = getInfo(contestId, index + i);\r\n        if (res.props.className === EMPTY) break;\r\n        arr.push(res);\r\n      }\r\n\r\n      if(arr.length == 0){\r\n        return (<td className={EMPTY}></td>)\r\n      }\r\n\r\n      if (arr.length < 3)\r\n        return (\r\n          <td className=\"bg-success p-0\">\r\n            <table key={contestId + index.charAt(0)}>\r\n              <tbody>\r\n                <td className=\"inside p-0\" key={contestId + index}>\r\n                  {arr.map((element) => element)}\r\n                </td>\r\n              </tbody>\r\n            </table>\r\n          </td>\r\n        );\r\n      else\r\n        return (\r\n          <td className=\"inside p-0\" key={contestId + index}>\r\n            More than 4\r\n          </td>\r\n        );\r\n    }\r\n\r\n    let solved = state.userSubmissions[SOLVED_PROBLEMS].has(contestId + index);\r\n    let attempted = state.userSubmissions[ATTEMPTED_PROBLEMS].has(\r\n      contestId + index\r\n    );\r\n\r\n    let name = state.problemList.problems[ans].name;\r\n    let id = state.problemList.problems[ans].id;\r\n    if (name.length > 10) name = name.substring(0, 9) + \"...\";\r\n\r\n    let className =\r\n      (solved ? \"bg-success\" : attempted ? \"bg-danger\" : \"\") + \" p-1\";\r\n\r\n    return (\r\n      <td className={className} key={id}>\r\n        <a\r\n          className=\"text-light text-decoration-none\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          tabIndex=\"0\"\r\n          data-bs-toggle=\"tooltip\"\r\n          title={\r\n            state.problemList.problems[ans].name +\r\n            \", Rating:\" +\r\n            state.problemList.problems[ans].rating\r\n          }\r\n          href={getProblemUrl(contestId, index)}>\r\n          {index + \". \"}\r\n          {name}\r\n        </a>\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const contestCard = (contest) => {\r\n    return (\r\n      <tr key={contest.id}>\r\n        <th scope=\"row\">{contest.id}</th>\r\n        <td>\r\n          <div className=\"name\">\r\n            <a\r\n              className=\"text-light text-decoration-none wrap\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title={formateDate(contest.startTimeSeconds)}\r\n              href={getContestUrl(contest.id)}>\r\n              {contest.name}\r\n            </a>\r\n          </div>\r\n          {props.filterState.showDate ? (\r\n            <div className=\"time\">{formateDate(contest.startTimeSeconds)}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </td>\r\n        {[...Array(7)].map((x, i) => {\r\n          return getInfo(contest.id, charInc(\"A\", i));\r\n        })}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.contestlist.map((contest) => {\r\n        return contestCard(contest);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ContestList;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js",["119","120","121"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../util/constants\";\r\n\r\nconst ProblemList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem) => {\r\n    let classes = \"bg-dark\";\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS) classes = \"bg-success\";\r\n    else if (problemState === ATTEMPTED_PROBLEMS) classes = \"bg-danger\";\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{problem.id}</td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className=\"text-light text-decoration-none\"\r\n            target=\"_blank\"\r\n            title={problem.tags}\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>{problem.rating}</td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.problems.map((problem) => {\r\n        return ProblemCard(problem);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.js",["122"],"F:\\web\\react\\codeforces-api\\src\\util\\Pagination.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.js",["123"],"import { getUserInfo, getUserSubmissions } from \"../../util/bashforces\";\r\nimport { load, errorFecthing } from \"./fetchActions\";\r\nimport {\r\n  ADD_USER,\r\n  CLEAR_USERS,\r\n  ERROR_FETCHING_USER,\r\n  LOADING_USERS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING_USER_SUBMISSIONS,\r\n  CLEAR_USERS_SUBMISSIONS,\r\n} from \"./types\";\r\n\r\nexport const clearUsers = (dispatch) =>\r\n  new Promise((resolve, reject) => {\r\n    dispatch({\r\n      type: CLEAR_USERS,\r\n    });\r\n    resolve();\r\n  });\r\n\r\nexport const fetchUsers = (dispatch, handle) =>\r\n  new Promise((resolve, reject) => {\r\n    dispatch(load(LOADING_USERS));\r\n    clearUsers(dispatch).then(() => {\r\n      fetch(getUserInfo(handle))\r\n        .then((res) => res.json())\r\n        .then(\r\n          (result) => {\r\n            if (result.status !== \"OK\")\r\n              dispatch(errorFecthing(ERROR_FETCHING_USER, result.comment));\r\n            else {\r\n              result.result.map((user) =>\r\n                dispatch({ type: ADD_USER, payload: user })\r\n              );\r\n            }\r\n          },\r\n          // Note: it's important to handle errors here\r\n          // instead of a catch() block so that we don't swallow\r\n          // exceptions from actual bugs in components.\r\n          (error) => {\r\n            dispatch(errorFecthing(ERROR_FETCHING_USER, \"ERROR FETCHING USER\"));\r\n          }\r\n        )\r\n        .catch((e) => {\r\n          //  console.log(e);\r\n          dispatch(errorFecthing(ERROR_FETCHING_USER, \"ERROR FETCHING USER\"));\r\n        });\r\n    });\r\n    resolve();\r\n  });\r\n\r\nconst userStatus = \"https://codeforces.com/api/user.status?handle=bashem\";\r\n\r\nexport const fetchUserSubmissions = (dispatch, handles) => {\r\n  dispatch({ type: CLEAR_USERS_SUBMISSIONS });\r\n  console.log(handles);\r\n  for (let handle of handles) {\r\n    dispatch(load(LOADING_USER_SUBMISSIONS));\r\n    console.log(getUserSubmissions(handle));\r\n    fetch(getUserSubmissions(handle))\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.status !== \"OK\")\r\n            return errorFecthing(\r\n              ERROR_FETCHING_USER_SUBMISSIONS,\r\n              \"Status Failed\"\r\n            );\r\n          console.log(result);\r\n          return dispatch({\r\n            type: FETCH_USER_SUBMISSIONS,\r\n            payload: { result: result.result, handle },\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          return dispatch(\r\n            errorFecthing(\r\n              ERROR_FETCHING_USER_SUBMISSIONS,\r\n              \"ERROR in User Submission\" + error\r\n            )\r\n          );\r\n        }\r\n      )\r\n      .catch((e) => {\r\n        // console.log(e);\r\n        return dispatch(\r\n          errorFecthing(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"ERROR in User Submission\" + e\r\n          )\r\n        );\r\n      });\r\n  }\r\n};\r\n",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":2,"column":28,"nodeType":"130","messageId":"131","endLine":2,"endColumn":36},{"ruleId":"128","severity":1,"message":"132","line":3,"column":27,"nodeType":"130","messageId":"131","endLine":3,"endColumn":33},{"ruleId":"128","severity":1,"message":"133","line":3,"column":50,"nodeType":"130","messageId":"131","endLine":3,"endColumn":54},{"ruleId":"128","severity":1,"message":"134","line":6,"column":3,"nodeType":"130","messageId":"131","endLine":6,"endColumn":19},{"ruleId":"128","severity":1,"message":"135","line":7,"column":3,"nodeType":"130","messageId":"131","endLine":7,"endColumn":19},{"ruleId":"128","severity":1,"message":"136","line":8,"column":3,"nodeType":"130","messageId":"131","endLine":8,"endColumn":23},{"ruleId":"128","severity":1,"message":"137","line":16,"column":9,"nodeType":"130","messageId":"131","endLine":16,"endColumn":17},{"ruleId":"128","severity":1,"message":"138","line":23,"column":7,"nodeType":"130","messageId":"131","endLine":23,"endColumn":14},{"ruleId":"128","severity":1,"message":"139","line":40,"column":7,"nodeType":"130","messageId":"131","endLine":40,"endColumn":18},{"ruleId":"128","severity":1,"message":"140","line":74,"column":7,"nodeType":"130","messageId":"131","endLine":74,"endColumn":22},{"ruleId":"128","severity":1,"message":"141","line":3,"column":17,"nodeType":"130","messageId":"131","endLine":3,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":54,"column":13,"nodeType":"144","endLine":60,"endColumn":24},{"ruleId":"145","severity":1,"message":"146","line":88,"column":29,"nodeType":"147","messageId":"148","endLine":88,"endColumn":31},{"ruleId":"149","severity":1,"message":"150","line":97,"column":6,"nodeType":"151","endLine":97,"endColumn":26,"suggestions":"152"},{"ruleId":"145","severity":1,"message":"153","line":278,"column":37,"nodeType":"147","messageId":"148","endLine":278,"endColumn":39},{"ruleId":"145","severity":1,"message":"146","line":284,"column":35,"nodeType":"147","messageId":"148","endLine":284,"endColumn":37},{"ruleId":"145","severity":1,"message":"146","line":286,"column":38,"nodeType":"147","messageId":"148","endLine":286,"endColumn":40},{"ruleId":"154","severity":1,"message":"155","line":328,"column":29,"nodeType":"156","endLine":336,"endColumn":30},{"ruleId":"128","severity":1,"message":"157","line":4,"column":3,"nodeType":"130","messageId":"131","endLine":4,"endColumn":16},{"ruleId":"128","severity":1,"message":"158","line":5,"column":3,"nodeType":"130","messageId":"131","endLine":5,"endColumn":14},{"ruleId":"128","severity":1,"message":"159","line":6,"column":3,"nodeType":"130","messageId":"131","endLine":6,"endColumn":10},{"ruleId":"128","severity":1,"message":"160","line":8,"column":3,"nodeType":"130","messageId":"131","endLine":8,"endColumn":16},{"ruleId":"128","severity":1,"message":"161","line":11,"column":8,"nodeType":"130","messageId":"131","endLine":11,"endColumn":21},{"ruleId":"128","severity":1,"message":"162","line":15,"column":3,"nodeType":"130","messageId":"131","endLine":15,"endColumn":21},{"ruleId":"128","severity":1,"message":"163","line":17,"column":3,"nodeType":"130","messageId":"131","endLine":17,"endColumn":18},{"ruleId":"128","severity":1,"message":"164","line":27,"column":10,"nodeType":"130","messageId":"131","endLine":27,"endColumn":13},{"ruleId":"149","severity":1,"message":"165","line":83,"column":6,"nodeType":"151","endLine":83,"endColumn":26,"suggestions":"166"},{"ruleId":"145","severity":1,"message":"153","line":250,"column":41,"nodeType":"147","messageId":"148","endLine":250,"endColumn":43},{"ruleId":"145","severity":1,"message":"146","line":256,"column":39,"nodeType":"147","messageId":"148","endLine":256,"endColumn":41},{"ruleId":"145","severity":1,"message":"146","line":258,"column":42,"nodeType":"147","messageId":"148","endLine":258,"endColumn":44},{"ruleId":"128","severity":1,"message":"141","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"129","line":1,"column":28,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"128","severity":1,"message":"167","line":10,"column":3,"nodeType":"130","messageId":"131","endLine":10,"endColumn":21},{"ruleId":"128","severity":1,"message":"168","line":12,"column":3,"nodeType":"130","messageId":"131","endLine":12,"endColumn":18},{"ruleId":"145","severity":1,"message":"146","line":54,"column":21,"nodeType":"147","messageId":"148","endLine":54,"endColumn":23},{"ruleId":"128","severity":1,"message":"141","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"129","line":1,"column":28,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"169","severity":1,"message":"170","line":29,"column":11,"nodeType":"144","endLine":33,"endColumn":68},{"ruleId":"128","severity":1,"message":"171","line":19,"column":10,"nodeType":"130","messageId":"131","endLine":19,"endColumn":13},{"ruleId":"128","severity":1,"message":"172","line":53,"column":7,"nodeType":"130","messageId":"131","endLine":53,"endColumn":17},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Link' is defined but never used.","'fetchContestList' is defined but never used.","'fetchProblemList' is defined but never used.","'fetchUserSubmissions' is defined but never used.","'dispatch' is assigned a value but never used.","'problem' is assigned a value but never used.","'submissions' is assigned a value but never used.","'failedUserFethc' is assigned a value but never used.","'useEffect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterProblem' and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.","ArrayExpression",["175"],"Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'getProblemUrl' is defined but never used.","'formateDate' is defined but never used.","'charInc' is defined but never used.","'getContestUrl' is defined but never used.","'ReactPaginate' is defined but never used.","'ATTEMPTED_PROBLEMS' is defined but never used.","'SOLVED_PROBLEMS' is defined but never used.","'far' is defined but never used.","React Hook useEffect has missing dependencies: 'contestList' and 'filterContest'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["176"],"'ATTEMPTED_CONTESTS' is defined but never used.","'SOLVED_CONTESTS' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'act' is defined but never used.","'userStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [state, filterState, problemList, filterProblem]",{"range":"181","text":"182"},"Update the dependencies array to be: [state, filterState, contestList, filterContest]",{"range":"183","text":"184"},[3172,3192],"[state, filterState, problemList, filterProblem]",[2308,2328],"[state, filterState, contestList, filterContest]"]