[{"F:\\web\\react\\codeforces-api\\src\\index.js":"1","F:\\web\\react\\codeforces-api\\src\\App.js":"2","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js":"3","F:\\web\\react\\codeforces-api\\src\\data\\store.js":"4","F:\\web\\react\\codeforces-api\\src\\components\\Card.js":"5","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js":"6","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js":"7","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js":"8","F:\\web\\react\\codeforces-api\\src\\components\\ProblemList.js":"9","F:\\web\\react\\codeforces-api\\src\\data\\actions\\connectors.js":"10","F:\\web\\react\\codeforces-api\\src\\components\\Menu.js":"11","F:\\web\\react\\codeforces-api\\src\\components\\ContestList.js":"12","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js":"13","F:\\web\\react\\codeforces-api\\src\\util\\components\\Cards.js":"14","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js":"15"},{"size":798,"mtime":1613388944449,"results":"16","hashOfConfig":"17"},{"size":1319,"mtime":1613654721716,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":2564,"mtime":1613657060907,"results":"20","hashOfConfig":"17"},{"size":986,"mtime":1613474544236,"results":"21","hashOfConfig":"17"},{"size":3189,"mtime":1613473417826,"results":"22","hashOfConfig":"17"},{"size":528,"mtime":1613389978528,"results":"23","hashOfConfig":"17"},{"size":4527,"mtime":1613561563693,"results":"24","hashOfConfig":"17"},{"size":2432,"mtime":1613561905282,"results":"25","hashOfConfig":"17"},{"size":483,"mtime":1613213111568,"results":"26","hashOfConfig":"17"},{"size":1828,"mtime":1613388934417,"results":"27","hashOfConfig":"17"},{"size":5629,"mtime":1613658706722,"results":"28","hashOfConfig":"17"},{"size":487,"mtime":1613472959184,"results":"29","hashOfConfig":"17"},{"size":605,"mtime":1613474715611,"results":"30","hashOfConfig":"17"},{"size":537,"mtime":1613658662123,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"1pnglh",{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\web\\react\\codeforces-api\\src\\index.js",["70"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore } from \"redux\";\nimport store from \"./data/store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["71","72"],"F:\\web\\react\\codeforces-api\\src\\App.js",["73","74","75","76"],"F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.js",["77","78","79","80"],"F:\\web\\react\\codeforces-api\\src\\components\\Card.js",["81"],"import React, { useEffect, useState } from \"react\";\r\n\r\nexport function IndividualProblem(params) {}\r\n\r\nfunction Card(id, name) {\r\n  const [solveCount, setSolveCount] = useState(0);\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  return (\r\n    <div className=\"card bg-light\" key={id}>\r\n      <h3 className=\"text-secondary\">\r\n        {id} , {name} , {solveCount}\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function contestCard(contest) {\r\n  \r\n}\r\n\r\nexport function problemCard(problem) {\r\n  return (\r\n    <div className=\"card bg-dark\" key={problem.contestId + problem.index}>\r\n      <div className=\"card-header d-flex justify-content-between text-light\">\r\n        <div className=\"id font-weight-bold\">\r\n          {problem.contestId + problem.index}\r\n        </div>\r\n        <div className=\"name\">{problem.name}</div>\r\n        <div className=\"rating\">{problem.rating}</div>\r\n\r\n        <div className=\"solvedCount\">{problem.solvedCount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js",["82","83","84","85"],"import { act } from \"react-dom/test-utils\";\r\nimport { sortByContestId } from \"../../util/sortMethods\";\r\nimport {\r\n  ERROR_FETCHING,\r\n  ERROR_FETCHING_CONTEST_LIST,\r\n  ERROR_FETCHING_PROBLEMS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_CONTEST_LIST,\r\n  FETCH_POSTS,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING,\r\n} from \"../actions/types\";\r\nimport store from \"../store\";\r\n\r\n// Map problem <key,<key,[]>> => <problemId:string,<Verdict:string,[Array]>>\r\n// contestAttempted => {contestId: {solvedIndex: [],attemptedIndex:[]}};\r\n\r\nconst submissionsInitialStore = {\r\n  solvedProblems: new Set(),\r\n  attemptedProblems: new Set(),\r\n  error: \"\",\r\n};\r\n\r\nexport const userSubmissionsReducer = (\r\n  initState = submissionsInitialStore,\r\n  action\r\n) => {\r\n  let currentState = {\r\n    solvedProblems: new Set(),\r\n    attemptedProblems: new Set(),\r\n  };\r\n  switch (action.type) {\r\n    case FETCH_USER_SUBMISSIONS:\r\n      action.payload.forEach((element) => {\r\n        let contestId = element.problem.contestId.toString();\r\n        let verdict = element.verdict;\r\n        let problemIndex = element.problem.index;\r\n        if (verdict == \"OK\") {\r\n          currentState.solvedProblems.add(contestId + problemIndex);\r\n        } else {\r\n          currentState.attemptedProblems.add(contestId + problemIndex);\r\n        }\r\n      });\r\n\r\n      for (let item of currentState.solvedProblems) {\r\n        currentState.attemptedProblems.delete(item);\r\n      }\r\n\r\n      // return { ...initState, problems: currentState };\r\n      return {\r\n        ...submissionsInitialStore,\r\n        ...currentState,\r\n      };\r\n    case ERROR_FETCHING_USER_SUBMISSIONS:\r\n      return {\r\n        ...submissionsInitialStore,\r\n        error: \"Error Fetching Submissions\",\r\n      };\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n\r\nconst problemList = { problems: [], error: \"\" };\r\n\r\nexport const problemListReducer = (initState = problemList, action) => {\r\n  // console.log(action);\r\n  // console.log(problemList);\r\n  switch (action.type) {\r\n    case FETCH_PROBLEM_LIST:\r\n      action.payload.sort(sortByContestId);\r\n      return {\r\n        ...problemList,\r\n        problems: action.payload,\r\n        error: \"\",\r\n      };\r\n    case ERROR_FETCHING_PROBLEMS:\r\n      return { ...problemList, error: action.payload };\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n\r\nexport const errorReducer = (initState = \"\", action) => {\r\n  switch (action.type) {\r\n    case ERROR_FETCHING:\r\n      return action.payload;\r\n\r\n    case LOADING:\r\n      return action.payload;\r\n\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nconst contestList = { contests: [], error: \"\" };\r\n\r\nexport const contestReducer = (initState = contestList, action) => {\r\n  switch (action.type) {\r\n    case FETCH_CONTEST_LIST:\r\n      return { contests: action.payload, error: \"\" };\r\n    case ERROR_FETCHING_CONTEST_LIST:\r\n      return { ...contestList, error: action.payload };\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n\r\n// export function unsolvedProblemsReducer(initState = {}, action) {\r\n//   let unsolvedProblems = {problems:[]};\r\n//  // let allProblems = store.getState();\r\n//  // console.log(store.getState());\r\n//   return unsolvedProblems;\r\n// }\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js",["86","87","88","89","90","91","92","93","94"],"// import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nimport {\r\n  ERROR_FETCHING,\r\n  ERROR_FETCHING_CONTEST_LIST,\r\n  ERROR_FETCHING_PROBLEMS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_CONTEST_LIST,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_USER_SUBMISSIONS,\r\n  FINISHED,\r\n} from \"./types\";\r\nimport store from \"../store\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst allContest = \"https://codeforces.com/api/contest.list\";\r\nlet id = 5,\r\n  user = \"h\";\r\nconst individualContestURL =\r\n  \"https://codeforces.com/api/contest.status?contestId=\" +\r\n  id +\r\n  \"&handle=\" +\r\n  user;\r\nlet contestId = 5;\r\nconst path = \"https://codeforces.com/contest/\" + contestId;\r\nconst problemSet = \"https://codeforces.com/api/problemset.problems\";\r\nconst userStatus = \"https://codeforces.com/api/user.status?handle=bashem\";\r\n\r\nconst errorFecthing = (type, message) => {\r\n  return {\r\n    type: type,\r\n    payload: message,\r\n  };\r\n};\r\n\r\nexport const fetchUserSubmissions = (dispatch) => {\r\n  //  const dispatch = useDispatch();\r\n\r\n  // console.log(\"fetchUSerSubmissions\");\r\n  fetch(userStatus)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status != \"OK\")\r\n          return errorFecthing(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"Status Failed\"\r\n          );\r\n        console.log(result);\r\n        return dispatch({\r\n          type: FETCH_USER_SUBMISSIONS,\r\n          payload: result.result,\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          errorFecthing(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"ERROR in User Submission\" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      // console.log(e);\r\n      return dispatch(\r\n        errorFecthing(\r\n          ERROR_FETCHING_USER_SUBMISSIONS,\r\n          \"ERROR in User Submission\" + e\r\n        )\r\n      );\r\n    });\r\n};\r\n\r\nexport const fetchProblemList = (dispatch) => {\r\n  //const dispatch = useDispatch();\r\n  //console.log(\"FetchProblemList\");\r\n  //return (dispatch) => {\r\n  fetch(problemSet)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status != \"OK\")\r\n          return dispatch(\r\n            errorFecthing(ERROR_FETCHING_PROBLEMS, \"Problem Status Failed\")\r\n          );\r\n        //   console.log(result);\r\n        let problems = result.result.problems;\r\n        console.log(result.result);\r\n        for (let i = 0; i < result.result.problemStatistics.length; i++) {\r\n          if (!(\"rating\" in problems[i])) problems[i][\"rating\"] = -1;\r\n          problems[i][\"solvedCount\"] =\r\n            result.result.problemStatistics[i].solvedCount;\r\n        }\r\n\r\n        problems = problems.filter((problem) => (\"contestId\" in problem));\r\n\r\n        return dispatch({\r\n          type: FETCH_PROBLEM_LIST,\r\n          payload: problems,\r\n        });\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        errorFecthing(ERROR_FETCHING_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n      );\r\n    });\r\n};\r\n\r\nexport const fetchContestList = (dispatch) => {\r\n  fetch(allContest)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status != \"OK\")\r\n          return dispatch(\r\n            errorFecthing(\r\n              ERROR_FETCHING_CONTEST_LIST,\r\n              \"FAiled to fethc contestList\"\r\n            )\r\n          );\r\n        //   console.log(result);\r\n        let res = result.result.filter((contest) => contest.phase == FINISHED);\r\n\r\n        return dispatch({\r\n          type: FETCH_CONTEST_LIST,\r\n          payload: res,\r\n        });\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        console.log(error);\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        errorFecthing(\r\n          ERROR_FETCHING_CONTEST_LIST,\r\n          \"FAiled to fethc contestList\"\r\n        )\r\n      );\r\n    });\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\components\\ProblemList.js",["95","96","97","98"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { ProblemCard } from \"../util/components/Cards\";\r\nimport { sortByRating, sortBySolveCount } from \"../util/sortMethods\";\r\n\r\nexport function ProblemList() {\r\n  const state = useSelector((state) => state);\r\n  // console.log(state.problemList);\r\n  const [unSolvedProblems, setUnsolvedProblems] = useState({\r\n    problems: [],\r\n    error: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n   // console.log(state);\r\n    if (state.problemList.problems != undefined) {\r\n      let newState = { problems: [] };\r\n      for (let problem of state.problemList.problems) {\r\n        let id = problem.contestId.toString() + problem.index;\r\n        if (!state.userSubmissions.solvedProblems.has(id)) {\r\n          newState.problems.push(problem);\r\n        }\r\n      }\r\n      //console.log(\"NEW State\");\r\n      setUnsolvedProblems(newState);\r\n    }\r\n  }, [state]);\r\n\r\n // console.log(unSolvedProblems);\r\n\r\n  const sortList = (reverse, rating) => {\r\n    let newUnSolvedProblem = { ...unSolvedProblems };\r\n    //newUnSolvedProblem.problems = [...unSolvedProblems.problems];\r\n    if (rating) newUnSolvedProblem.problems.sort(sortByRating);\r\n    else newUnSolvedProblem.problems.sort(sortBySolveCount);\r\n    if (reverse) newUnSolvedProblem.problems.reverse();\r\n    //console.log(newUnSolvedProblem.problems == unSolvedProblems.problems);\r\n   // console.log(reverse + \" \" + rating);\r\n    setUnsolvedProblems(newUnSolvedProblem);\r\n   // console.log(unSolvedProblems);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs\">\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className=\"nav-link active\"\r\n              onClick={() => sortList(false, false)}\r\n              href=\"#\">\r\n              Sort By SolvedCount\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={() => sortList(false, true)}\r\n              href=\"#\">\r\n              Sort By Rating\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"problems\">\r\n        {unSolvedProblems.problems.map((problem) => {\r\n          return ProblemCard(problem);\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(ProblemList);\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\connectors.js",[],["99","100"],"F:\\web\\react\\codeforces-api\\src\\components\\Menu.js",["101","102","103","104","105"],"import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nexport const PROBLEMS = \"/problems\";\r\nexport const CONTEST = \"/contests\";\r\n\r\nconst Menu = () => {\r\n  return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light p-2\">\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarTogglerDemo03\"\r\n          aria-controls=\"navbarTogglerDemo03\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n          BashForces\r\n        </Link>\r\n\r\n        <div\r\n          className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n          id=\"navbarTogglerDemo03\">\r\n          <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n            <li className=\"nav-item active\">\r\n              <Link to={ PROBLEMS} className=\"nav-link\" href=\"#\">\r\n                Problem List\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to={ CONTEST} className=\"nav-link\" href=\"#\">\r\n                Contest\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"form-inline d-flex my-2 my-lg-0\">\r\n            <input\r\n              className=\"form-control mr-sm-2\"\r\n              type=\"search\"\r\n              placeholder=\"Handle\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button\r\n              className=\"btn btn-outline-success my-2 my-sm-0\"\r\n              type=\"submit\">\r\n              Enter\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\ContestList.js",["106","107","108","109","110","111","112"],"F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\components\\Cards.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js",[],{"ruleId":"113","severity":1,"message":"114","line":6,"column":10,"nodeType":"115","messageId":"116","endLine":6,"endColumn":21},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"113","severity":1,"message":"121","line":2,"column":28,"nodeType":"115","messageId":"116","endLine":2,"endColumn":36},{"ruleId":"113","severity":1,"message":"122","line":3,"column":8,"nodeType":"115","messageId":"116","endLine":3,"endColumn":12},{"ruleId":"113","severity":1,"message":"123","line":4,"column":27,"nodeType":"115","messageId":"116","endLine":4,"endColumn":33},{"ruleId":"113","severity":1,"message":"124","line":4,"column":50,"nodeType":"115","messageId":"116","endLine":4,"endColumn":54},{"ruleId":"113","severity":1,"message":"125","line":7,"column":3,"nodeType":"115","messageId":"116","endLine":7,"endColumn":15},{"ruleId":"113","severity":1,"message":"126","line":8,"column":3,"nodeType":"115","messageId":"116","endLine":8,"endColumn":26},{"ruleId":"113","severity":1,"message":"127","line":28,"column":7,"nodeType":"115","messageId":"116","endLine":28,"endColumn":14},{"ruleId":"113","severity":1,"message":"128","line":45,"column":7,"nodeType":"115","messageId":"116","endLine":45,"endColumn":18},{"ruleId":"113","severity":1,"message":"129","line":6,"column":22,"nodeType":"115","messageId":"116","endLine":6,"endColumn":35},{"ruleId":"113","severity":1,"message":"130","line":1,"column":10,"nodeType":"115","messageId":"116","endLine":1,"endColumn":13},{"ruleId":"113","severity":1,"message":"131","line":9,"column":3,"nodeType":"115","messageId":"116","endLine":9,"endColumn":14},{"ruleId":"113","severity":1,"message":"132","line":14,"column":8,"nodeType":"115","messageId":"116","endLine":14,"endColumn":13},{"ruleId":"133","severity":1,"message":"134","line":39,"column":21,"nodeType":"135","messageId":"136","endLine":39,"endColumn":23},{"ruleId":"113","severity":1,"message":"137","line":4,"column":3,"nodeType":"115","messageId":"116","endLine":4,"endColumn":17},{"ruleId":"113","severity":1,"message":"132","line":13,"column":8,"nodeType":"115","messageId":"116","endLine":13,"endColumn":13},{"ruleId":"113","severity":1,"message":"138","line":15,"column":10,"nodeType":"115","messageId":"116","endLine":15,"endColumn":21},{"ruleId":"113","severity":1,"message":"139","line":20,"column":7,"nodeType":"115","messageId":"116","endLine":20,"endColumn":27},{"ruleId":"113","severity":1,"message":"140","line":26,"column":7,"nodeType":"115","messageId":"116","endLine":26,"endColumn":11},{"ruleId":"133","severity":1,"message":"141","line":45,"column":27,"nodeType":"135","messageId":"136","endLine":45,"endColumn":29},{"ruleId":"133","severity":1,"message":"141","line":87,"column":27,"nodeType":"135","messageId":"136","endLine":87,"endColumn":29},{"ruleId":"133","severity":1,"message":"141","line":128,"column":27,"nodeType":"135","messageId":"136","endLine":128,"endColumn":29},{"ruleId":"133","severity":1,"message":"134","line":136,"column":67,"nodeType":"135","messageId":"136","endLine":136,"endColumn":69},{"ruleId":"113","severity":1,"message":"142","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":17},{"ruleId":"133","severity":1,"message":"141","line":16,"column":36,"nodeType":"135","messageId":"136","endLine":16,"endColumn":38},{"ruleId":"143","severity":1,"message":"144","line":48,"column":13,"nodeType":"145","endLine":51,"endColumn":24},{"ruleId":"143","severity":1,"message":"144","line":56,"column":13,"nodeType":"145","endLine":59,"endColumn":24},{"ruleId":"117","replacedBy":"146"},{"ruleId":"119","replacedBy":"147"},{"ruleId":"113","severity":1,"message":"148","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"121","line":1,"column":28,"nodeType":"115","messageId":"116","endLine":1,"endColumn":36},{"ruleId":"113","severity":1,"message":"123","line":2,"column":27,"nodeType":"115","messageId":"116","endLine":2,"endColumn":33},{"ruleId":"113","severity":1,"message":"149","line":2,"column":35,"nodeType":"115","messageId":"116","endLine":2,"endColumn":41},{"ruleId":"113","severity":1,"message":"150","line":2,"column":43,"nodeType":"115","messageId":"116","endLine":2,"endColumn":48},{"ruleId":"113","severity":1,"message":"142","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":17},{"ruleId":"133","severity":1,"message":"134","line":32,"column":46,"nodeType":"135","messageId":"136","endLine":32,"endColumn":48},{"ruleId":"133","severity":1,"message":"134","line":33,"column":43,"nodeType":"135","messageId":"136","endLine":33,"endColumn":45},{"ruleId":"133","severity":1,"message":"134","line":41,"column":46,"nodeType":"135","messageId":"136","endLine":41,"endColumn":48},{"ruleId":"133","severity":1,"message":"134","line":49,"column":13,"nodeType":"135","messageId":"136","endLine":49,"endColumn":15},{"ruleId":"151","severity":1,"message":"152","line":61,"column":9,"nodeType":"145","endLine":64,"endColumn":53},{"ruleId":"113","severity":1,"message":"153","line":79,"column":9,"nodeType":"115","messageId":"116","endLine":79,"endColumn":21},"no-unused-vars","'createStore' is defined but never used.","Identifier","unusedVar","no-native-reassign",["154"],"no-negated-in-lhs",["155"],"'useState' is defined but never used.","'Card' is defined but never used.","'Router' is defined but never used.","'Link' is defined but never used.","'errorReducer' is defined but never used.","'unsolvedProblemsReducer' is defined but never used.","'problem' is assigned a value but never used.","'submissions' is assigned a value but never used.","'setSolveCount' is assigned a value but never used.","'act' is defined but never used.","'FETCH_POSTS' is defined but never used.","'store' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ERROR_FETCHING' is defined but never used.","'useDispatch' is defined but never used.","'individualContestURL' is assigned a value but never used.","'path' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'connect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["154"],["155"],"'useEffect' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'chooseRandom' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]