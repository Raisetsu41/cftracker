[{"F:\\web\\react\\codeforces-api\\src\\index.js":"1","F:\\web\\react\\codeforces-api\\src\\App.js":"2","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js":"3","F:\\web\\react\\codeforces-api\\src\\data\\store.js":"4","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js":"5","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js":"6","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js":"7","F:\\web\\react\\codeforces-api\\src\\components\\Menu.js":"8","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js":"9","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.js":"11","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js":"12","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js":"13","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js":"14","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.js":"16","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.js":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.js":"18","F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.js":"19","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.js":"20"},{"size":790,"mtime":1615630830365,"results":"21","hashOfConfig":"22"},{"size":1414,"mtime":1615979415226,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":4218,"mtime":1615978711227,"results":"25","hashOfConfig":"22"},{"size":2383,"mtime":1615813618507,"results":"26","hashOfConfig":"22"},{"size":1313,"mtime":1615632286960,"results":"27","hashOfConfig":"22"},{"size":4632,"mtime":1615979126109,"results":"28","hashOfConfig":"22"},{"size":2972,"mtime":1615981864770,"results":"29","hashOfConfig":"22"},{"size":606,"mtime":1615722616288,"results":"30","hashOfConfig":"22"},{"size":1418,"mtime":1615979191458,"results":"31","hashOfConfig":"22"},{"size":410,"mtime":1615810439162,"results":"32","hashOfConfig":"22"},{"size":16299,"mtime":1615979364268,"results":"33","hashOfConfig":"22"},{"size":12341,"mtime":1615979392882,"results":"34","hashOfConfig":"22"},{"size":6341,"mtime":1615813661093,"results":"35","hashOfConfig":"22"},{"size":1605,"mtime":1614767956158,"results":"36","hashOfConfig":"22"},{"size":3861,"mtime":1615977319201,"results":"37","hashOfConfig":"22"},{"size":1591,"mtime":1614767592001,"results":"38","hashOfConfig":"22"},{"size":2941,"mtime":1615979147192,"results":"39","hashOfConfig":"22"},{"size":1231,"mtime":1615976662112,"results":"40","hashOfConfig":"22"},{"size":1147,"mtime":1615981851271,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1pnglh",{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},"F:\\web\\react\\codeforces-api\\src\\index.js",[],["93","94"],"F:\\web\\react\\codeforces-api\\src\\App.js",["95","96","97","98","99","100","101"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  fetchContestList,\n  fetchProblemList,\n  fetchUserSubmissions,\n} from \"./data/actions/fetchActions\";\n\nimport Menu from \"./components/Menu\";\nimport ProblemPage from \"./components/problem/ProblemPage\";\nimport ContestPage from \"./components/contest/ContestPage\";\nimport HomePage from \"./components/home/HomePage\";\nimport { PROBLEMS, CONTESTS } from \"./util/constants\";\n\nfunction App(props) {\n  useEffect(() => {\n    // fetchProblemList(dispatch);\n    // fetchContestList(dispatch);\n    document.body.classList.add(\"bg-dark\");\n    document.title = \"BashForces\";\n  }, []);\n\n  return (\n    <div className=\"App container-fluid bg-dark min-vh-100 d-flex justify-content-between  flex-column\">\n      <div className=\"top\">\n        <div className=\"menu w-100\">\n          <Menu />\n        </div>\n\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path={PROBLEMS} component={ProblemPage} />\n          <Route strict path={CONTESTS} component={ContestPage} />\n        </Switch>\n      </div>\n      <footer className=\"text-light text-center justify-content-center p-3 w-100 align-self-end\">\n        All rights reserved by @Bashem\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.js",["102","103","104","105","106","107","108"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  problemListReducer,\r\n  contestReducer,\r\n  sharedProblemsReducer,\r\n} from \"./reducers/fetchReducers\";\r\nimport { userSubmissionsReducer, userReducer } from \"./reducers/userReducers\";\r\nimport {\r\n  SOLVED_PROBLEMS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  ATTEMPTED_CONTESTS,\r\n} from \"../util/constants\";\r\n\r\nexport const contestList = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 1476,\r\n      name: \"Educational Codeforces Round 103 (Rated for Div. 2)\",\r\n      type: \"ICPC\",\r\n      phase: \"FINISHED\",\r\n      frozen: false,\r\n      durationSeconds: 7200,\r\n      startTimeSeconds: 1611930900,\r\n      relativeTimeSeconds: 418636,\r\n    },\r\n  ],\r\n};\r\n\r\nconst problem = {\r\n  status: \"OK\",\r\n  result: {\r\n    problems: [\r\n      {\r\n        contestId: 1478,\r\n        index: \"C\",\r\n        name: \"Nezzar and Symmetric Array\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1500,\r\n        rating: 1700,\r\n        tags: [\"implementation\", \"math\", \"sortings\"],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst submissions = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 105129023,\r\n      contestId: 1368,\r\n      creationTimeSeconds: 1611387508,\r\n      relativeTimeSeconds: 2147483647,\r\n      problem: {\r\n        contestId: 1368,\r\n        index: \"D\",\r\n        name: \"AND, OR and square sum\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1750,\r\n        rating: 1700,\r\n        tags: [\"bitmasks\", \"greedy\", \"math\"],\r\n      },\r\n      author: {\r\n        contestId: 1368,\r\n        members: [{ handle: \"bashem\" }],\r\n        participantType: \"PRACTICE\",\r\n        ghost: false,\r\n        startTimeSeconds: 1592491500,\r\n      },\r\n      programmingLanguage: \"GNU C++14\",\r\n      verdict: \"OK\",\r\n      testset: \"TESTS\",\r\n      passedTestCount: 17,\r\n      timeConsumedMillis: 109,\r\n      memoryConsumedBytes: 1638400,\r\n    },\r\n  ],\r\n};\r\n\r\nconst failedUserFethc = {\r\n  status: \"FAILED\",\r\n  comment: \"handles: User with handle b not found\",\r\n};\r\n\r\nconst middlewre = [thunk, logger];\r\n\r\nconst combinedReducers = combineReducers({\r\n  userSubmissions: userSubmissionsReducer,\r\n  problemList: problemListReducer,\r\n  contestList: contestReducer,\r\n  userList: userReducer,\r\n  sharedProblems: sharedProblemsReducer,\r\n});\r\n\r\nconst newCombinedReducers = (state, action) => {\r\n  const intermediateReducer = combinedReducers(state, action);\r\n  //console.log(intermediateReducer.problemList);\r\n\r\n  // const submissionsInitialState = {\r\n  //   [SOLVED_PROBLEMS]: new Set(),\r\n  //   [ATTEMPTED_PROBLEMS]: new Set(),\r\n  //   [SOLVED_CONTESTS]: new Set(),\r\n  //   [ATTEMPTED_CONTESTS]: new Set(),\r\n  //   error: \"\",\r\n  //   loading: false,\r\n  //   id: intermediateReducer.userSubmissions.id,\r\n  // };\r\n\r\n  // const related = intermediateReducer.sharedProblems.problems;\r\n  // const getSharedIndex = (contestId, index) => {\r\n  //   let l = 0,\r\n  //     r = related.length - 1;\r\n\r\n  //   while (l <= r) {\r\n  //     let mid = l + ((r - l) >> 2);\r\n  //     if (related[mid].contestId === contestId && related[mid].index === index)\r\n  //       return mid;\r\n  //     if (\r\n  //       related[mid].contestId > contestId ||\r\n  //       (related[mid].contestId === contestId && related[mid].index > index)\r\n  //     )\r\n  //       r = mid - 1;\r\n  //     else l = mid + 1;\r\n  //   }\r\n\r\n  //   return -1;\r\n  // };\r\n\r\n  return {\r\n    userSubmissions: intermediateReducer.userSubmissions,\r\n    problemList: {\r\n      problems: intermediateReducer.problemList.problems,\r\n      error: intermediateReducer.problemList.error,\r\n      tags: intermediateReducer.problemList.tags,\r\n      loading: intermediateReducer.problemList.loading,\r\n    },\r\n    contestList: {\r\n      contests: intermediateReducer.contestList.contests,\r\n      error: intermediateReducer.contestList.error,\r\n      loading: intermediateReducer.contestList.loading,\r\n      problems: intermediateReducer.problemList.problems,\r\n    },\r\n    userList: intermediateReducer.userList,\r\n    sharedProblems: intermediateReducer.sharedProblems,\r\n  };\r\n};\r\n\r\nconst store = createStore(\r\n  newCombinedReducers,\r\n  {},\r\n  applyMiddleware(...middlewre)\r\n);\r\n\r\nexport default store;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.js",["109","110"],"import {\r\n  ERROR_FETCHING_CONTEST_LIST,\r\n  ERROR_FETCHING_PROBLEMS,\r\n  ERROR_FETCHING_SHARED_PROBLEMS,\r\n  FETCH_CONTEST_LIST,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_SHARED_PROBLEMS,\r\n  FINISHED,\r\n  LOADING_CONTEST_LIST,\r\n  LOADING_PROBLEM_LIST,\r\n} from \"./types\";\r\n\r\nimport { jsonData } from \"../jsons/related\";\r\nimport { result } from \"lodash\";\r\n\r\nconst allContestURL = \"https://codeforces.com/api/contest.list\";\r\nconst problemSetURL = \"https://codeforces.com/api/problemset.problems\";\r\nconst sharedProblemsURL = \"../jsons/related.json\";\r\n\r\nexport const createDispatch = (type, message) => {\r\n  return {\r\n    type: type,\r\n    payload: message,\r\n  };\r\n};\r\n\r\nexport const load = (type) => {\r\n  return { type: type };\r\n};\r\n\r\nexport const fetchProblemList = (dispatch) => {\r\n  dispatch(load(LOADING_PROBLEM_LIST));\r\n  //fetchSharedProblemList(dispatch);\r\n  fetch(problemSetURL)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(\r\n            createDispatch(ERROR_FETCHING_PROBLEMS, \"Problem Status Failed\")\r\n          );\r\n        //   console.log(result);\r\n        let problems = result.result.problems;\r\n        problems = problems.filter((problem) => \"contestId\" in problem);\r\n        for (let i = 0; i < result.result.problemStatistics.length; i++) {\r\n          if (!(\"rating\" in problems[i])) problems[i][\"rating\"] = -1;\r\n          problems[i][\"solvedCount\"] =\r\n            result.result.problemStatistics[i].solvedCount;\r\n          problems[i][\"id\"] =\r\n            problems[i].contestId.toString() + problems[i].index;\r\n        }\r\n\r\n        return dispatch(createDispatch(FETCH_PROBLEM_LIST, problems));\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_PROBLEMS,\r\n            \"ERROR in PROBLEM LIST \" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        createDispatch(ERROR_FETCHING_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n      );\r\n    });\r\n};\r\n\r\nexport const fetchSharedProblemList = (dispatch) => {\r\n  //console.log(sharedProblemsURL);\r\n  // fetch(sharedProblemsURL)\r\n  //   .then((res) => res.json())\r\n  //   .then(\r\n  //     (result) => {\r\n  //       console.log(result);\r\n  if (jsonData != null) {\r\n    const result = jsonData;\r\n    if (result.status !== \"OK\")\r\n      return dispatch(\r\n        createDispatch(\r\n          ERROR_FETCHING_SHARED_PROBLEMS,\r\n          \"Error fetching shared problems\"\r\n        )\r\n      );\r\n    return dispatch(createDispatch(FETCH_SHARED_PROBLEMS, result.result));\r\n    //\tconsole.log(result.result.length)\r\n  } else\r\n    return dispatch(\r\n      createDispatch(ERROR_FETCHING_SHARED_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n    );\r\n  //   },\r\n  //   // Note: it's important to handle errors here\r\n  //   // instead of a catch() block so that we don't swallow\r\n  //   // exceptions from actual bugs in components.\r\n  //   (error) => {\r\n  //     return dispatch(\r\n  //       createDispatch(ERROR_FETCHING_SHARED_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n  //     );\r\n  //   }\r\n  // )\r\n  // .catch((e) => {\r\n  //     console.log(e);\r\n  //   return dispatch(\r\n  //     createDispatch(ERROR_FETCHING_SHARED_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n  //   );\r\n  //});\r\n};\r\n\r\nexport const fetchContestList = (dispatch) => {\r\n  dispatch(load(LOADING_CONTEST_LIST));\r\n  fetch(allContestURL)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(createDispatch(ERROR_FETCHING_CONTEST_LIST));\r\n        let res = result.result.filter((contest) => contest.phase === FINISHED);\r\n\r\n        return dispatch({\r\n          type: FETCH_CONTEST_LIST,\r\n          payload: res,\r\n        });\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_CONTEST_LIST,\r\n            \"FAiled to fethc contestList \" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        createDispatch(\r\n          ERROR_FETCHING_CONTEST_LIST,\r\n          \"FAiled to fethc contestList\"\r\n        )\r\n      );\r\n    });\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Menu.js",["111","112","113"],"import { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  fetchContestList,\r\n  fetchProblemList,\r\n  fetchSharedProblemList,\r\n} from \"../data/actions/fetchActions\";\r\nimport { fetchUserSubmissions, fetchUsers } from \"../data/actions/userActions\";\r\nimport { PROBLEMS, CONTESTS } from \"../util/constants\";\r\n\r\nconst Menu = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n  const state = useSelector((state) => state);\r\n\r\n  useEffect(() => {\r\n    sync();\r\n    //fetchUserSubmissions(dispatch, state.userList.handles);\r\n  }, [state.userList]);\r\n\r\n  const sync = () => {\r\n    fetchProblemList(dispatch);\r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n    fetchContestList(dispatch);\r\n    fetchSharedProblemList(dispatch);\r\n  };\r\n\r\n  const submitUser = () => {\r\n    fetchUsers(dispatch, handle);\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light p-2\">\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarTogglerDemo03\"\r\n        aria-controls=\"navbarTogglerDemo03\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n        BashForces\r\n      </Link>\r\n\r\n      <div\r\n        className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n        id=\"navbarTogglerDemo03\">\r\n        <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n          <li className=\"nav-item active\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                sync();\r\n              }}\r\n              href=\"#\">\r\n              <FontAwesomeIcon icon={faSync} />\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item active\">\r\n            <Link to={PROBLEMS} className=\"nav-link\" href=\"#\">\r\n              Problem List\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={CONTESTS} className=\"nav-link\" href=\"#\">\r\n              Contest\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n        <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\constants.js",[],"F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.js",["114","115","116"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport { sortByRating, sortBySolveCount } from \"../../util/sortMethods\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n  SEARCH,\r\n  PROBLEMS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport ProblemList from \"./ProblemList\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faSort,\r\n  faSortDown,\r\n  faSortUp,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst ProblemPage = () => {\r\n  const state = useSelector((state) => state);\r\n  const history = useHistory();\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = -1,\r\n    SORT_BY_RATING = 1,\r\n    SORT_BY_SOLVE = 2,\r\n    ASCENDING = 0,\r\n    DESCENDING = 1;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    rating: { min_rating: -1, max_rating: 4000 },\r\n    tags: new Set(),\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n    sortBy: SORT_BY_SOLVE,\r\n    order: DESCENDING,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [problemList, setProblemList] = useState({ problems: [], error: \"\" });\r\n  const [tagList, setTagList] = useState({ tags: [] });\r\n  const [randomProblem, setRandomProblem] = useState(-1);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n\r\n  const filterProblem = (problem) => {\r\n    let containTags = false;\r\n\r\n    if (filterState.tags.size === 0) containTags = true;\r\n    else\r\n      for (let tag of problem.tags)\r\n        if (filterState.tags.has(tag)) {\r\n          containTags = true;\r\n          break;\r\n        }\r\n    let ratingInside =\r\n      problem.rating <= filterState.rating.max_rating &&\r\n      problem.rating >= filterState.rating.min_rating;\r\n    let solveStatus = filterState.solveStatus.includes(getState(problem));\r\n\r\n    let searchIncluded = true;\r\n    let text = filterState.search.toLowerCase().trim();\r\n    if (text.length)\r\n      searchIncluded =\r\n        problem.name.toLowerCase().includes(text) ||\r\n        problem.id.toLowerCase().includes(text);\r\n\r\n    return solveStatus && ratingInside && containTags && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n      });\r\n    if (state.problemList.problems !== undefined) {\r\n      let newState = { problems: [] };\r\n      newState.problems = state.problemList.problems;\r\n\r\n      newState.problems = newState.problems.filter((problem) =>\r\n        filterProblem(problem)\r\n      );\r\n\r\n      if (filterState.sortBy === SORT_BY_RATING)\r\n        newState.problems.sort(sortByRating);\r\n      else newState.problems.sort(sortBySolveCount);\r\n      if (filterState.order === DESCENDING) newState.problems.reverse();\r\n\r\n      let tags = [];\r\n      for (let tag of state.problemList.tags) tags.push(tag);\r\n      setTagList({ tags });\r\n      setProblemList({ ...problemList, problems: newState.problems });\r\n    }\r\n    setRandomProblem(-1);\r\n    setSelected(0);\r\n  }, [state, filterState]);\r\n\r\n  const sortList = (sortBy) => {\r\n    if (filterState.sortBy === sortBy)\r\n      setFilterState({ ...filterState, order: filterState.order ^ 1 });\r\n    else\r\n      setFilterState({\r\n        ...filterState,\r\n        ...{\r\n          order: sortBy === SORT_BY_RATING ? ASCENDING : DESCENDING,\r\n          sortBy: sortBy,\r\n        },\r\n      });\r\n  };\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const searchData = (e) => {\r\n    setFilterState({ ...filterState, search: e.target.value });\r\n  };\r\n\r\n  const chooseRandom = () => {\r\n    if (problemList.problems.length === 0) return;\r\n    setRandomProblem(getRandomInteger(0, problemList.problems.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(problemList.problems.length, lo + filterState.perPage);\r\n\r\n    if (lo > high) return [];\r\n    return problemList.problems.slice(lo, high);\r\n  };\r\n\r\n  const nuetral = () => {\r\n    return <FontAwesomeIcon icon={faSort} />;\r\n  };\r\n\r\n  const less = () => {\r\n    return <FontAwesomeIcon icon={faSortUp} />;\r\n  };\r\n\r\n  const greater = () => {\r\n    return <FontAwesomeIcon icon={faSortDown} />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs d-flex justify-content-between container border-0 mt-3\">\r\n          <li className=\"nav-item col-4\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0\"\r\n              onSubmit={(e) => e.preventDefault()}>\r\n              <input\r\n                className=\"form-control mr-sm-2 bg-dark text-light\"\r\n                type=\"text\"\r\n                placeholder=\"Problem Name or Id\"\r\n                aria-label=\"Search\"\r\n                value={filterState.search}\r\n                onChange={(e) => {\r\n                  setFilterState({\r\n                    ...filterState,\r\n                    search: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n          <li className=\"nav-item text-secondary h-6\">\r\n            Showing {paginate().length} of {problemList.problems.length}\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                onClick={chooseRandom}\r\n                title=\"Find Random Contest\"\r\n                href=\"#\">\r\n                <FontAwesomeIcon icon={faRandom} />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                title=\"Cancel Random\"\r\n                onClick={() => setRandomProblem(-1)}\r\n                href=\"#\">\r\n                <FontAwesomeIcon icon={faRedo} />\r\n              </button>\r\n            </div>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-bs-toggle=\"modal\"\r\n              data-bs-target=\"#exampleModal\">\r\n              {<FontAwesomeIcon icon={faFilter} />}\r\n            </button>\r\n            <div\r\n              className=\"modal\"\r\n              id=\"exampleModal\"\r\n              tabIndex=\"-1\"\r\n              aria-labelledby=\"exampleModalLabel\"\r\n              aria-hidden=\"true\">\r\n              <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                      Modal title\r\n                    </h5>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"></button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <div className=\"group\">\r\n                      <form\r\n                        className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                        onSubmit={(e) => e.preventDefault()}>\r\n                        <div className=\"d-flex justify-content-between w-100\">\r\n                          <div className=\"input-group\">\r\n                            <span\r\n                              className=\"input-group-text\"\r\n                              id=\"perpage-input\">\r\n                              Per Page\r\n                            </span>\r\n                            <input\r\n                              className=\"form-control mr-sm-2\"\r\n                              type=\"number\"\r\n                              aria-label=\"perpage\"\r\n                              aria-describedby=\"perpage-input\"\r\n                              value={filterState.perPage}\r\n                              onChange={(e) =>\r\n                                setFilterState({\r\n                                  ...filterState,\r\n                                  perPage: e.target.value,\r\n                                })\r\n                              }\r\n                            />\r\n                          </div>\r\n                          <div className=\"input-group d-flex justify-content-end\">\r\n                            <button\r\n                              className=\"btn btn-light nav-link h-6\"\r\n                              onClick={() => setFilterState(initFilterState)}\r\n                              title=\"Reset To Default State\"\r\n                              href=\"#\">\r\n                              <FontAwesomeIcon icon={faRedoAlt} />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {initFilterState.solveStatus.map((solved) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.solveStatus.includes(solved)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={solved}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            let ind = filterState.solveStatus.indexOf(solved);\r\n                            if (ind != -1)\r\n                              myFilterState.solveStatus.splice(ind, 1);\r\n                            else myFilterState.solveStatus.push(solved);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {solved === SOLVED\r\n                            ? \"Solved\"\r\n                            : solved === ATTEMPTED\r\n                            ? \"Attempted\"\r\n                            : \"Unsolved\"}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <form\r\n                      className=\"\"\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}>\r\n                      <div className=\"d-flex\">\r\n                        <div className=\"input-group pe-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Min Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Min Rating\"\r\n                            value={filterState.rating.min_rating}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  min_rating: e.target.value,\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <div className=\"input-group ps-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Max Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Max Rating\"\r\n                            value={filterState.rating.max_rating}\r\n                            onChange={searchData}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  max_rating: e.target.value,\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {tagList.tags.map((tag) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.tags.has(tag)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={tag}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            if (filterState.tags.has(tag))\r\n                              myFilterState.tags.delete(tag);\r\n                            else myFilterState.tags.add(tag);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {tag}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"p-2\">\r\n        <Pagination\r\n          totalCount={problemList.problems.length}\r\n          perPage={filterState.perPage}\r\n          selected={selected}\r\n          pageSelected={(e) => setSelected(e)}\r\n        />\r\n      </div>\r\n      <table className=\"table table-bordered table-dark container\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_RATING)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Rating</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_RATING\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_SOLVE)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Solve Count</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_SOLVE\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {randomProblem === -1 ? (\r\n            <ProblemList problems={paginate()} />\r\n          ) : (\r\n            <ProblemList problems={[problemList.problems[randomProblem]]} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        totalCount={problemList.problems.length}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        pageSelected={(e) => setSelected(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.js",["117","118"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport ContestList from \"./ContestList\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  CONTESTS,\r\n  SEARCH,\r\n  SOLVED_CONTESTS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst ContestPage = () => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const history = useHistory();\r\n\r\n  const [contestList, setContestList] = useState({ contests: [], error: \"\" });\r\n  const [randomContest, setRandomContest] = useState(-1);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = 2;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n    showDate: 0,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const contestStatus = (contestId) => {\r\n    if (state.userSubmissions[SOLVED_CONTESTS].has(contestId)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_CONTESTS].has(contestId))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const filterContest = (contest) => {\r\n    let solveStatus = filterState.solveStatus.includes(\r\n      contestStatus(contest.id.toString())\r\n    );\r\n\r\n    let searchIncluded = true;\r\n\r\n    let text = filterState.search.toLowerCase().trim();\r\n\r\n    if (text.length)\r\n      searchIncluded =\r\n        contest.name.toLowerCase().includes(text) ||\r\n        contest.id.toString().includes(text);\r\n\r\n    return solveStatus && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: CONTESTS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: CONTESTS,\r\n      });\r\n    let contests = state.contestList.contests;\r\n\r\n    const newContestList = contests.filter((contest) => filterContest(contest));\r\n\r\n    setContestList({ ...contestList, contests: newContestList });\r\n    setRandomContest(-1);\r\n  }, [state, filterState]);\r\n\r\n  const chooseRandom = () => {\r\n    if (contestList.contests.length === 0) return;\r\n    setRandomContest(getRandomInteger(0, contestList.contests.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(contestList.contests.length, lo + filterState.perPage);\r\n\r\n    if (lo > high) return [];\r\n    return contestList.contests.slice(lo, high);\r\n  };\r\n\r\n  return (\r\n    <div className=\"div\">\r\n      <div className=\"menu\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark container bg-dark p-2\">\r\n          <div\r\n            className=\"collapse navbar-collapse d-flex justify-content-between\"\r\n            id=\"navbarTogglerDemo03\">\r\n            <ul className=\"navbar w-100 navbar-dark d-flex justify-content-between bg-dark list-unstyled\">\r\n              <li className=\"nav-item col-6\">\r\n                <form\r\n                  className=\"form-inline d-flex my-2 my-lg-0\"\r\n                  onSubmit={(e) => e.preventDefault()}>\r\n                  <input\r\n                    className=\"form-control bg-dark text-light mr-sm-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Contest Name or Id\"\r\n                    aria-label=\"Search\"\r\n                    value={filterState.search}\r\n                    onChange={(e) => {\r\n                      setFilterState({\r\n                        ...filterState,\r\n                        search: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </form>\r\n              </li>\r\n              <li className=\"nav-item text-secondary\">\r\n                Showing {paginate().length} of {contestList.contests.length}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <div\r\n                  className=\"btn-group\"\r\n                  role=\"group\"\r\n                  aria-label=\"Basic example\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    onClick={chooseRandom}\r\n                    title=\"Find Random Contest\"\r\n                    href=\"#\">\r\n                    <FontAwesomeIcon icon={faRandom} />\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    title=\"Cancel Random\"\r\n                    onClick={() => setRandomContest(-1)}\r\n                    href=\"#\">\r\n                    <FontAwesomeIcon icon={faRedo} />\r\n                  </button>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  data-bs-toggle=\"modal\"\r\n                  data-bs-target=\"#exampleModal\">\r\n                  {<FontAwesomeIcon icon={faFilter} />}\r\n                </button>\r\n                <div\r\n                  className=\"modal\"\r\n                  id=\"exampleModal\"\r\n                  tabIndex=\"-1\"\r\n                  aria-labelledby=\"exampleModalLabel\"\r\n                  aria-hidden=\"true\">\r\n                  <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                      <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                          Filter\r\n                        </h5>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn-close\"\r\n                          data-bs-dismiss=\"modal\"\r\n                          aria-label=\"Close\"></button>\r\n                      </div>\r\n                      <div className=\"modal-body\">\r\n                        <div className=\"group\">\r\n                          <form\r\n                            className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                            onSubmit={(e) => e.preventDefault()}>\r\n                            <div className=\"d-flex justify-content-between w-100\">\r\n                              <div className=\"input-group\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Per Page:\r\n                                </span>\r\n                                <input\r\n                                  className=\"form-control mr-sm-2\"\r\n                                  type=\"number\"\r\n                                  aria-label=\"perpage\"\r\n                                  aria-describedby=\"perpage-input\"\r\n                                  value={filterState.perPage}\r\n                                  onChange={(e) => {\r\n                                    setFilterState({\r\n                                      ...filterState,\r\n                                      perPage: e.target.value\r\n                                        .toLowerCase()\r\n                                        .trim(),\r\n                                    });\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                              <div className=\"input-group d-flex justify-content-end\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Show Date\r\n                                </span>\r\n                                <div className=\"input-group-text\">\r\n                                  <input\r\n                                    className=\"form-check-input mt-0\"\r\n                                    type=\"checkbox\"\r\n                                    defaultChecked={filterState.showDate}\r\n                                    onChange={() =>\r\n                                      setFilterState({\r\n                                        ...filterState,\r\n                                        showDate: filterState.showDate ^ 1,\r\n                                      })\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                              <button\r\n                                className=\"btn btn-secondary nav-link m-2 h-6\"\r\n                                onClick={() => setFilterState(initFilterState)}\r\n                                title=\"Reset To Default State\"\r\n                                href=\"#\">\r\n                                <FontAwesomeIcon icon={faRedoAlt} />\r\n                              </button>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                        <div\r\n                          className=\"btn-group d-flex flex-wrap justify-content-between\"\r\n                          role=\"group\"\r\n                          aria-label=\"First group\">\r\n                          {initFilterState.solveStatus.map((solved) => (\r\n                            <button\r\n                              className={\r\n                                (filterState.solveStatus.includes(solved)\r\n                                  ? \"btn bg-success\"\r\n                                  : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                              }\r\n                              key={solved}\r\n                              onClick={() => {\r\n                                let myFilterState = { ...filterState };\r\n                                let ind = filterState.solveStatus.indexOf(\r\n                                  solved\r\n                                );\r\n                                if (ind != -1)\r\n                                  myFilterState.solveStatus.splice(ind, 1);\r\n                                else myFilterState.solveStatus.push(solved);\r\n                                setFilterState(myFilterState);\r\n                              }}>\r\n                              {solved === SOLVED\r\n                                ? \"Solved\"\r\n                                : solved === ATTEMPTED\r\n                                ? \"Attempted\"\r\n                                : \"Unsolved\"}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      {/* <PaginationComponent /> */}\r\n\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n\r\n      <table className=\"table table-bordered table-dark\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Contest Name</th>\r\n            <th scope=\"col\">A</th>\r\n            <th scope=\"col\">B</th>\r\n            <th scope=\"col\">C</th>\r\n            <th scope=\"col\">D</th>\r\n            <th scope=\"col\">E</th>\r\n            <th scope=\"col\">F</th>\r\n            <th scope=\"col\">G</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <ContestList\r\n            contestlist={\r\n              randomContest === -1\r\n                ? paginate()\r\n                : [contestList.contests[randomContest]]\r\n            }\r\n            filterState={filterState}\r\n          />\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestPage;","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.js",["119","120","121"],"import { render } from \"@testing-library/react\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\n\r\nconst ContestList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const related = state.sharedProblems.problems;\r\n\r\n  const getProblem = (contestId, index) => {\r\n    let l = 0,\r\n      r = state.problemList.problems.length - 1;\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (\r\n        state.problemList.problems[mid].contestId === contestId &&\r\n        state.problemList.problems[mid].index === index\r\n      )\r\n        return state.problemList.problems[mid];\r\n\r\n      if (\r\n        state.problemList.problems[mid].contestId > contestId ||\r\n        (state.problemList.problems[mid].contestId === contestId &&\r\n          state.problemList.problems[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getStatus = (contestId, index, id, solveStatus) => {\r\n    let res = state.userSubmissions[solveStatus].has(id);\r\n    if (!res) {\r\n      let sharedIndex = getSharedIndex(contestId, index);\r\n      if (sharedIndex != -1) {\r\n        for (let problem of related[sharedIndex].shared) {\r\n          res |= state.userSubmissions[solveStatus].has(problem.id);\r\n        }\r\n      }\r\n    }\r\n    //if(contestId == 1495)\r\n    return res;\r\n  };\r\n\r\n  const renderProblem = (problem) => {\r\n    let solved = getStatus(\r\n      problem.contestId,\r\n      problem.index,\r\n      problem.id,\r\n      SOLVED_PROBLEMS\r\n    );\r\n    let attempted = getStatus(\r\n      problem.contestId,\r\n      problem.index,\r\n      problem.id,\r\n      ATTEMPTED_PROBLEMS\r\n    );\r\n\r\n    let name = problem.name;\r\n    let id = problem.id;\r\n    if (name.length > 10) name = name.substring(0, 9) + \"...\";\r\n\r\n    let className =\r\n      (solved ? \"bg-success\" : attempted ? \"bg-danger\" : \"\") + \" p-1\";\r\n\r\n    return (\r\n      <td className={className} key={id}>\r\n        <a\r\n          className=\"text-light text-decoration-none\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          tabIndex=\"0\"\r\n          data-bs-toggle=\"tooltip\"\r\n          title={problem.name + \", Rating:\" + problem.rating}\r\n          href={getProblemUrl(problem.contestId, problem.index)}>\r\n          {problem.index + \". \"}\r\n          {name}\r\n        </a>\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const getSharedIndex = (contestId, index) => {\r\n    let l = 0,\r\n      r = related.length - 1;\r\n\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (related[mid].contestId === contestId && related[mid].index === index)\r\n        return mid;\r\n      if (\r\n        related[mid].contestId > contestId ||\r\n        (related[mid].contestId === contestId && related[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getProblemsList = (contestId, index, first = true) => {\r\n    let problem = getProblem(contestId, index);\r\n\r\n    let problems = [];\r\n    if (problem === -1) {\r\n      let problem1 = getProblem(contestId, index + \"1\");\r\n      if (problem1 === -1 && first === true) {\r\n        let sharedIndex = getSharedIndex(contestId, index);\r\n        if (sharedIndex != -1) {\r\n          for (let sharedProblem of related[sharedIndex].shared) {\r\n            let currentGetInfo = getProblemsList(\r\n              sharedProblem.contestId,\r\n              sharedProblem.index,\r\n              false\r\n            );\r\n\r\n            if (currentGetInfo.length === 1 && currentGetInfo[0] === -1)\r\n              continue;\r\n            for (let currentProblem of currentGetInfo) {\r\n              let current = { ...currentProblem };\r\n              current.contestId = contestId;\r\n              current.index = current.index.split(\"\");\r\n              current.index[0] = index.charAt(0);\r\n              current.index = current.index.join(\"\");\r\n              current.id = current.contestId.toString() + index;\r\n              problems.push(current);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        problems.push(problem1);\r\n        for (let c = \"2\"; c <= \"3\"; c++) {\r\n          problem1 = getProblem(contestId, index + c);\r\n          if (problem1 === -1) break;\r\n          problems.push(problem1);\r\n        }\r\n      }\r\n    } else problems.push(problem);\r\n\r\n    return problems;\r\n  };\r\n\r\n  const getInfo = (contestId, index) => {\r\n    const EMPTY = \"EMPTY bg-dark\";\r\n\r\n    let problems = getProblemsList(contestId, index);\r\n\r\n    if (problems.length === 0) {\r\n      return <td key={contestId + index} className={EMPTY}></td>;\r\n    }\r\n\r\n    if (problems.length === 1) {\r\n      return renderProblem(problems[0]);\r\n    }\r\n\r\n    if (problems.length === 2) {\r\n      return (\r\n        <td className=\"p-0\" key={contestId + index.charAt(0)}>\r\n          <table>\r\n            <tbody>\r\n              <tr className=\"inside p-0\" key={contestId + index}>\r\n                {problems.map((element) => renderProblem(element))}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </td>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <td className=\"inside p-0\" key={contestId + index}>\r\n        More than 4\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const contestCard = (contest) => {\r\n    return (\r\n      <tr key={contest.id}>\r\n        <th scope=\"row\">{contest.id}</th>\r\n        <td>\r\n          <div className=\"name\">\r\n            <a\r\n              className=\"text-light text-decoration-none wrap\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title={formateDate(contest.startTimeSeconds)}\r\n              href={getContestUrl(contest.id)}>\r\n              {contest.name}\r\n            </a>\r\n          </div>\r\n          {props.filterState.showDate ? (\r\n            <div className=\"time\">{formateDate(contest.startTimeSeconds)}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </td>\r\n        {[...Array(7)].map((x, i) => {\r\n          return getInfo(contest.id, charInc(\"A\", i));\r\n        })}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.contestlist.map((contest) => {\r\n        return contestCard(contest);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ContestList;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.js",["122","123","124"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n} from \"../../util/constants\";\r\n\r\nconst ProblemList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem) => {\r\n    let classes = \"bg-dark\";\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS) classes = \"bg-success\";\r\n    else if (problemState === ATTEMPTED_PROBLEMS) classes = \"bg-danger\";\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{problem.id}</td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className=\"text-light text-decoration-none\"\r\n            target=\"_blank\"\r\n            title={problem.tags}\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>{problem.rating}</td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.problems.map((problem) => {\r\n        return ProblemCard(problem);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.js",[],"F:\\web\\react\\codeforces-api\\src\\util\\Pagination.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.js",[],"F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.js",[],["125","126"],"F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.js",["127","128"],"import React, { useEffect,useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { fetchUsers } from \"../../data/actions/userActions\";\r\nimport { CONTESTS } from \"../../util/constants\";\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst history = useHistory();\r\n\thistory.push(CONTESTS);\r\n\r\n\tconst submitUser = () => {\r\n\t\tfetchUsers(dispatch,handle);\r\n\t}\r\n\r\n  useEffect(() => {\r\n    // fetchProblemList(dispatch);\r\n    // fetchContestList(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\t\t\t{/* <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n",{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":2,"column":28,"nodeType":"135","messageId":"136","endLine":2,"endColumn":36},{"ruleId":"133","severity":1,"message":"137","line":3,"column":27,"nodeType":"135","messageId":"136","endLine":3,"endColumn":33},{"ruleId":"133","severity":1,"message":"138","line":3,"column":50,"nodeType":"135","messageId":"136","endLine":3,"endColumn":54},{"ruleId":"133","severity":1,"message":"139","line":4,"column":10,"nodeType":"135","messageId":"136","endLine":4,"endColumn":21},{"ruleId":"133","severity":1,"message":"140","line":6,"column":3,"nodeType":"135","messageId":"136","endLine":6,"endColumn":19},{"ruleId":"133","severity":1,"message":"141","line":7,"column":3,"nodeType":"135","messageId":"136","endLine":7,"endColumn":19},{"ruleId":"133","severity":1,"message":"142","line":8,"column":3,"nodeType":"135","messageId":"136","endLine":8,"endColumn":23},{"ruleId":"133","severity":1,"message":"143","line":11,"column":3,"nodeType":"135","messageId":"136","endLine":11,"endColumn":18},{"ruleId":"133","severity":1,"message":"144","line":12,"column":3,"nodeType":"135","messageId":"136","endLine":12,"endColumn":21},{"ruleId":"133","severity":1,"message":"145","line":13,"column":3,"nodeType":"135","messageId":"136","endLine":13,"endColumn":18},{"ruleId":"133","severity":1,"message":"146","line":14,"column":3,"nodeType":"135","messageId":"136","endLine":14,"endColumn":21},{"ruleId":"133","severity":1,"message":"147","line":33,"column":7,"nodeType":"135","messageId":"136","endLine":33,"endColumn":14},{"ruleId":"133","severity":1,"message":"148","line":50,"column":7,"nodeType":"135","messageId":"136","endLine":50,"endColumn":18},{"ruleId":"133","severity":1,"message":"149","line":84,"column":7,"nodeType":"135","messageId":"136","endLine":84,"endColumn":22},{"ruleId":"133","severity":1,"message":"150","line":14,"column":10,"nodeType":"135","messageId":"136","endLine":14,"endColumn":16},{"ruleId":"133","severity":1,"message":"151","line":18,"column":7,"nodeType":"135","messageId":"136","endLine":18,"endColumn":24},{"ruleId":"133","severity":1,"message":"152","line":5,"column":16,"nodeType":"135","messageId":"136","endLine":5,"endColumn":26},{"ruleId":"153","severity":1,"message":"154","line":23,"column":6,"nodeType":"155","endLine":23,"endColumn":22,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":57,"column":13,"nodeType":"159","endLine":63,"endColumn":24},{"ruleId":"153","severity":1,"message":"160","line":111,"column":6,"nodeType":"155","endLine":111,"endColumn":26,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":289,"column":37,"nodeType":"164","messageId":"165","endLine":289,"endColumn":39},{"ruleId":"166","severity":1,"message":"167","line":338,"column":29,"nodeType":"168","endLine":346,"endColumn":30},{"ruleId":"153","severity":1,"message":"169","line":85,"column":6,"nodeType":"155","endLine":85,"endColumn":26,"suggestions":"170"},{"ruleId":"162","severity":1,"message":"163","line":254,"column":41,"nodeType":"164","messageId":"165","endLine":254,"endColumn":43},{"ruleId":"133","severity":1,"message":"171","line":1,"column":10,"nodeType":"135","messageId":"136","endLine":1,"endColumn":16},{"ruleId":"162","severity":1,"message":"163","line":44,"column":23,"nodeType":"164","messageId":"165","endLine":44,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":119,"column":25,"nodeType":"164","messageId":"165","endLine":119,"endColumn":27},{"ruleId":"133","severity":1,"message":"172","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":26},{"ruleId":"133","severity":1,"message":"134","line":1,"column":28,"nodeType":"135","messageId":"136","endLine":1,"endColumn":36},{"ruleId":"173","severity":1,"message":"174","line":29,"column":11,"nodeType":"159","endLine":33,"endColumn":68},{"ruleId":"129","replacedBy":"175"},{"ruleId":"131","replacedBy":"176"},{"ruleId":"133","severity":1,"message":"177","line":9,"column":18,"nodeType":"135","messageId":"136","endLine":9,"endColumn":27},{"ruleId":"133","severity":1,"message":"178","line":15,"column":8,"nodeType":"135","messageId":"136","endLine":15,"endColumn":18},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Link' is defined but never used.","'useDispatch' is defined but never used.","'fetchContestList' is defined but never used.","'fetchProblemList' is defined but never used.","'fetchUserSubmissions' is defined but never used.","'SOLVED_PROBLEMS' is defined but never used.","'ATTEMPTED_PROBLEMS' is defined but never used.","'SOLVED_CONTESTS' is defined but never used.","'ATTEMPTED_CONTESTS' is defined but never used.","'problem' is assigned a value but never used.","'submissions' is assigned a value but never used.","'failedUserFethc' is assigned a value but never used.","'result' is defined but never used.","'sharedProblemsURL' is assigned a value but never used.","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sync'. Either include it or remove the dependency array.","ArrayExpression",["181"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has missing dependencies: 'filterProblem', 'history', and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.",["182"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'contestList', 'filterContest', and 'history'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["183"],"'render' is defined but never used.","'useEffect' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener",["179"],["180"],"'setHandle' is assigned a value but never used.","'submitUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [state.userList, sync]",{"range":"190","text":"191"},"Update the dependencies array to be: [state, filterState, history, problemList, filterProblem]",{"range":"192","text":"193"},"Update the dependencies array to be: [state, filterState, history, contestList, filterContest]",{"range":"194","text":"195"},[807,823],"[state.userList, sync]",[3438,3458],"[state, filterState, history, problemList, filterProblem]",[2442,2462],"[state, filterState, history, contestList, filterContest]"]