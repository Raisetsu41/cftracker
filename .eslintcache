[{"F:\\web\\react\\codeforces-api\\src\\index.tsx":"1","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx":"2","F:\\web\\react\\codeforces-api\\src\\App.tsx":"3","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx":"4","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx":"5","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx":"6","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx":"7","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx":"8","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx":"9","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts":"11","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts":"12","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts":"13","F:\\web\\react\\codeforces-api\\src\\data\\store.ts":"14","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts":"16","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts":"18","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts":"19","F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts":"20","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts":"21","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts":"22","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts":"23","F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts":"24","F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts":"25"},{"size":767,"mtime":1618398758923,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1617775898144,"results":"28","hashOfConfig":"27"},{"size":1427,"mtime":1620739492876,"results":"29","hashOfConfig":"27"},{"size":3702,"mtime":1620794808465,"results":"30","hashOfConfig":"27"},{"size":18026,"mtime":1620818490800,"results":"31","hashOfConfig":"27"},{"size":1147,"mtime":1618400510901,"results":"32","hashOfConfig":"27"},{"size":13512,"mtime":1620818669610,"results":"33","hashOfConfig":"27"},{"size":1948,"mtime":1618402097817,"results":"34","hashOfConfig":"27"},{"size":1524,"mtime":1617880137841,"results":"35","hashOfConfig":"27"},{"size":6043,"mtime":1620802904343,"results":"36","hashOfConfig":"27"},{"size":410,"mtime":1617879429205,"results":"37","hashOfConfig":"27"},{"size":1669,"mtime":1620794512714,"results":"38","hashOfConfig":"27"},{"size":998,"mtime":1618488169808,"results":"39","hashOfConfig":"27"},{"size":6816,"mtime":1620818124019,"results":"40","hashOfConfig":"27"},{"size":3020,"mtime":1618571435369,"results":"41","hashOfConfig":"27"},{"size":5154,"mtime":1620799978226,"results":"42","hashOfConfig":"27"},{"size":5348,"mtime":1620817267086,"results":"43","hashOfConfig":"27"},{"size":2911,"mtime":1620802353426,"results":"44","hashOfConfig":"27"},{"size":2268,"mtime":1620798999035,"results":"45","hashOfConfig":"27"},{"size":181555,"mtime":1620645259517,"results":"46","hashOfConfig":"27"},{"size":3180,"mtime":1620805089245,"results":"47","hashOfConfig":"27"},{"size":1115,"mtime":1618485329167,"results":"48","hashOfConfig":"27"},{"size":2510,"mtime":1618665333803,"results":"49","hashOfConfig":"27"},{"size":141,"mtime":1618487216532,"results":"50","hashOfConfig":"27"},{"size":586,"mtime":1618579869282,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1flmqtp",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"F:\\web\\react\\codeforces-api\\src\\index.tsx",[],["112","113"],"F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx",[],["114","115"],"F:\\web\\react\\codeforces-api\\src\\App.tsx",["116","117","118","119","120","121"],"import \"./App.css\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchContestList,\r\n  fetchProblemList,\r\n  fetchSharedProblemList,\r\n} from \"./data/actions/fetchActions\";\r\n\r\nimport { fetchUserSubmissions } from \"./data/actions/userActions\";\r\n\r\nimport Menu from \"./components/Menu\";\r\nimport ProblemPage from \"./components/problem/ProblemPage\";\r\nimport ContestPage from \"./components/contest/ContestPage\";\r\nimport HomePage from \"./components/home/HomePage\";\r\nimport { PROBLEMS, CONTESTS } from \"./util/constants\";\r\n\r\nfunction App() {\r\n\r\n  useEffect(() => {\r\n    document.body.classList.add(\"bg-dark\");\r\n    document.title = \"CFTracker\";\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App container-fluid bg-dark min-vh-100 d-flex justify-content-between  flex-column\">\r\n      <div className=\"top\">\r\n        <div className=\"menu w-100\">\r\n          <Menu />\r\n        </div>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route path={PROBLEMS} component={ProblemPage} />\r\n          <Route strict path={CONTESTS} component={ContestPage} />\r\n        </Switch>\r\n      </div>\r\n      <footer className=\"text-light text-center justify-content-center p-3 w-100 align-self-end\">\r\n        All rights reserved by @Bashem\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx",["122","123","124","125","126","127"],"import { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  fetchContestList,\r\n  fetchProblemList,\r\n  fetchSharedProblemList,\r\n} from \"../data/actions/fetchActions\";\r\nimport { fetchUserSubmissions, fetchUsers } from \"../data/actions/userActions\";\r\nimport { RootState, RootStateType } from \"../data/store\";\r\nimport { PROBLEMS, CONTESTS } from \"../util/constants\";\r\nimport { ProblemShared } from \"../util/DataTypes/Problem\";\r\nimport { Verdict } from \"../util/DataTypes/Submission\";\r\n\r\nconst Menu = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n\r\n  const state: RootStateType = useSelector((state) => state);\r\n\r\n  const [handle, setHandle] = useState(\r\n    state.userList.handles.length ? state.userList.handles.toString() : \"\"\r\n  );\r\n  console.log(state.userList.handles.toString());\r\n  useEffect(() => {\r\n    fetchProblemList(dispatch);\r\n    fetchContestList(dispatch);\r\n    fetchSharedProblemList(dispatch);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    sync();\r\n  }, [state.userList]);\r\n\r\n  const sync = () => {\r\n    fetchUserSubmissions(dispatch, state.userList.handles);\r\n  };\r\n\r\n  const submitUser = () => {\r\n    // Notification.info({\r\n    //   title: \"User submitted!\",\r\n    //   duration: 200,\r\n    //   description: \"hh\",\r\n    // });\r\n    // toast.error(\"🦄 Wow so easy!\", {\r\n    //   position: \"bottom-right\",\r\n    //   autoClose: 2001,\r\n    //   hideProgressBar: false,\r\n    //   closeOnClick: true,\r\n    //   pauseOnHover: true,\r\n    //   draggable: true,\r\n    //   progress: undefined,\r\n    // });\r\n    fetchUsers(dispatch, handle);\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light p-2\">\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarTogglerDemo03\"\r\n        aria-controls=\"navbarTogglerDemo03\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <Link to=\"/\" className=\"navbar-brand\" href=\"#\">\r\n        CFTracker\r\n      </Link>\r\n\r\n      <div\r\n        className=\"collapse navbar-collapse d-flex justify-content-end\"\r\n        id=\"navbarTogglerDemo03\">\r\n        <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n          <li className=\"nav-item active\">\r\n            <a\r\n              className=\"nav-link\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                sync();\r\n              }}\r\n              href=\"#\">\r\n              <FontAwesomeIcon icon={faSync} />\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item active\">\r\n            <Link to={PROBLEMS} className=\"nav-link\" href=\"#\">\r\n              Problem List\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to={CONTESTS} className=\"nav-link\" href=\"#\">\r\n              Contest\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n        <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            name=\"handle\"\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"handle1,handle2,..\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx",["128","129","130","131","132","133"],"F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx",["134","135"],"import React, { useEffect,useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { fetchUsers } from \"../../data/actions/userActions\";\r\nimport { CONTESTS } from \"../../util/constants\";\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst history = useHistory();\r\n\thistory.push(CONTESTS);\r\n\r\n\tconst submitUser = () => {\r\n\t\tfetchUsers(dispatch,handle);\r\n\t}\r\n\r\n  useEffect(() => {\r\n    // fetchProblemList(dispatch);\r\n    // fetchContestList(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\t\t\t{/* <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx",["136","137","138"],"F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx",["139","140"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\ninterface ProblemListProps {\r\n  problems: Problem[];\r\n}\r\n\r\nconst ProblemList = ({ problems }: ProblemListProps): JSX.Element => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getState = (problem: Problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem: Problem, index: number) => {\r\n    let classes = \"bg-dark\";\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS) classes = \"bg-success\";\r\n    else if (problemState === ATTEMPTED_PROBLEMS) classes = \"bg-danger\";\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{index+1}</td>\r\n        <td className={\"id font-weight-bold \" + classes}>{problem.id}</td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className=\"text-light text-decoration-none\"\r\n            target=\"_blank\"\r\n            title={problem.tags.toString()}\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>\r\n          {problem.rating != -1 ? problem.rating : \"Not Rated\"}\r\n        </td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {problems.map((problem: Problem, index: number) => {\r\n        return ProblemCard(problem, index);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx",[],"F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx",["141"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Contest from \"../../util/DataTypes/Contest\";\r\n\r\nconst ContestList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const related = state.sharedProblems.problems;\r\n\r\n  const getProblem = (contestId, index) => {\r\n    let l = 0,\r\n      r = state.problemList.problems.length - 1;\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (\r\n        state.problemList.problems[mid].contestId === contestId &&\r\n        state.problemList.problems[mid].index === index\r\n      )\r\n        return state.problemList.problems[mid];\r\n\r\n      if (\r\n        state.problemList.problems[mid].contestId > contestId ||\r\n        (state.problemList.problems[mid].contestId === contestId &&\r\n          state.problemList.problems[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getStatus = (id: string, solveStatus: string) => {\r\n    let res = state.userSubmissions[solveStatus].has(id);\r\n    return res;\r\n  };\r\n\r\n  const renderProblem = (problem) => {\r\n    let solved = getStatus(problem.id, SOLVED_PROBLEMS);\r\n    let attempted = getStatus(problem.id, ATTEMPTED_PROBLEMS);\r\n\r\n    let name = problem.name;\r\n    let id = problem.id;\r\n    if (name.length > 10) name = name.substring(0, 9) + \"...\";\r\n\r\n    let className =\r\n      (solved ? \"bg-success\" : attempted ? \"bg-danger\" : \"\") + \" p-1\";\r\n\r\n    return (\r\n      <td className={className} key={id}>\r\n        <a\r\n          className=\"text-light text-decoration-none\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          tabIndex={0}\r\n          data-bs-toggle=\"tooltip\"\r\n          title={problem.name + \", Rating:\" + problem.rating}\r\n          href={getProblemUrl(problem.contestId, problem.index)}>\r\n          {problem.index + \". \"}\r\n          {name}\r\n        </a>\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const getSharedIndex = (contestId, index) => {\r\n    let l = 0,\r\n      r = related.length - 1;\r\n\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (related[mid].contestId === contestId && related[mid].index === index)\r\n        return mid;\r\n      if (\r\n        related[mid].contestId > contestId ||\r\n        (related[mid].contestId === contestId && related[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getProblemsList = (contestId, index, first = true) => {\r\n    let problem = getProblem(contestId, index);\r\n\r\n    let problems = [];\r\n    if (problem === -1) {\r\n      let problem1 = getProblem(contestId, index + \"1\");\r\n      if (problem1 === -1 && first === true) {\r\n        let sharedIndex = getSharedIndex(contestId, index);\r\n        if (sharedIndex != -1) {\r\n          for (let sharedProblem of related[sharedIndex].shared) {\r\n            let currentGetInfo = getProblemsList(\r\n              sharedProblem.contestId,\r\n              sharedProblem.index,\r\n              false\r\n            );\r\n\r\n            if (currentGetInfo.length === 1 && currentGetInfo[0] === -1)\r\n              continue;\r\n            for (let currentProblem of currentGetInfo) {\r\n              let current = { ...currentProblem };\r\n              current.contestId = contestId;\r\n              current.index = current.index.split(\"\");\r\n              current.index[0] = index.charAt(0);\r\n              current.index = current.index.join(\"\");\r\n              current.id = current.contestId.toString() + index;\r\n              problems.push(current);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        problems.push(problem1);\r\n        for (let c: number = 2; c <= 3; c++) {\r\n          problem1 = getProblem(contestId, index + c.toString());\r\n          if (problem1 === -1) break;\r\n          problems.push(problem1);\r\n        }\r\n      }\r\n    } else problems.push(problem);\r\n\r\n    return problems;\r\n  };\r\n\r\n  const getInfo = (contestId, index) => {\r\n    const EMPTY = \"EMPTY bg-dark\";\r\n\r\n    let problems = getProblemsList(contestId, index);\r\n\r\n    if (problems.length === 0) {\r\n      return <td key={contestId + index} className={EMPTY}></td>;\r\n    }\r\n\r\n    if (problems.length === 1) {\r\n      return renderProblem(problems[0]);\r\n    }\r\n\r\n    if (problems.length === 2) {\r\n      let cnt: number = 0;\r\n\r\n      return (\r\n        <td className=\"p-0\" key={contestId + index.charAt(0)}>\r\n          <table>\r\n            <tbody>\r\n              <tr className=\"inside p-0\" key={contestId + index + cnt++}>\r\n                {problems.map((element) => renderProblem(element))}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </td>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <td className=\"inside p-0\" key={contestId + index}>\r\n        More than 4\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const contestCard = (contest, index) => {\r\n    return (\r\n      <tr key={contest.id}>\r\n        <th scope=\"row sticky-col\">{index + 1}</th>\r\n        <th scope=\"row\">{contest.id}</th>\r\n        <td>\r\n          <div className=\"name\">\r\n            <a\r\n              className=\"text-light text-decoration-none wrap\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title={formateDate(contest.startTimeSeconds)}\r\n              href={getContestUrl(contest.id)}>\r\n              {contest.name}\r\n            </a>\r\n          </div>\r\n          {props.showDate ? (\r\n            <div className=\"time\">{formateDate(contest.startTimeSeconds)}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </td>\r\n        {[...Array(10)].map((x, i) => {\r\n          return getInfo(contest.id, charInc(\"A\", i));\r\n        })}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.contestlist.map((contest: Contest, index: number) => {\r\n        return contestCard(contest, index);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ContestList;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.ts",["142","143","144","145","146"],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts",["147","148","149"],"import {\r\n  AppReducerType,\r\n  ERROR_FETCHING_CONTEST_LIST,\r\n  ERROR_FETCHING_PROBLEMS,\r\n  ERROR_FETCHING_SHARED_PROBLEMS,\r\n  FETCH_CONTEST_LIST,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_SHARED_PROBLEMS,\r\n  FINISHED,\r\n  LOADING_CONTEST_LIST,\r\n  LOADING_PROBLEM_LIST,\r\n} from \"./types\";\r\n\r\nimport { jsonData } from \"../jsons/related\";\r\nimport { result } from \"lodash\";\r\nimport Problem, {\r\n  ProblemShared,\r\n  ProblemStatistics,\r\n} from \"../../util/DataTypes/Problem\";\r\nimport { AppDispatch } from \"../store\";\r\nimport Contest from \"../../util/DataTypes/Contest\";\r\n\r\nconst allContestURL = \"https://codeforces.com/api/contest.list?lang=en\";\r\nconst problemSetURL = \"https://codeforces.com/api/problemset.problems?lang=en\";\r\nconst sharedProblemsURL = \"../jsons/related.json\";\r\n\r\nexport const createDispatch = (type: any, message: any) => {\r\n  return {\r\n    type: type,\r\n    payload: message,\r\n  };\r\n};\r\n\r\nexport interface AppPayloadType {\r\n  type: AppReducerType;\r\n  payload: {\r\n    isContest: boolean;\r\n    data: string | number;\r\n  };\r\n}\r\n\r\nexport const changeAppState = (\r\n  dispatch: AppDispatch,\r\n  type: AppReducerType,\r\n  data: number,\r\n  isContest: boolean\r\n) => {\r\n  let curr: AppPayloadType = {\r\n    type: type,\r\n    payload: {\r\n      isContest: isContest,\r\n      data: data,\r\n    },\r\n  };\r\n  dispatch(curr);\r\n};\r\n\r\nexport const load = (type) => {\r\n  return { type: type };\r\n};\r\n\r\nexport const fetchProblemList = (dispatch: AppDispatch) => {\r\n  dispatch(load(LOADING_PROBLEM_LIST));\r\n  //fetchSharedProblemList(dispatch);\r\n  fetch(problemSetURL)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(\r\n            createDispatch(ERROR_FETCHING_PROBLEMS, \"Problem Status Failed\")\r\n          );\r\n        //   console.log(result);\r\n        let problems: Problem[] = result.result.problems;\r\n        let problemStatistics: ProblemStatistics[] =\r\n          result.result.problemStatistics;\r\n\r\n        problems = problems.filter((problem) =>\r\n          problem.contestId ? true : false\r\n        );\r\n\r\n        problemStatistics = problemStatistics.filter((problem) =>\r\n          problem.contestId ? true : false\r\n        );\r\n\r\n        for (let i = 0; i < problems.length; i++) {\r\n          problems[i].rating = problems[i].rating ?? -1;\r\n          problems[i].solvedCount = problemStatistics[i].solvedCount;\r\n          problems[i].id = problems[i].contestId.toString() + problems[i].index;\r\n        }\r\n\r\n        const finalProblemArray: Problem[] = [];\r\n        for (let problem of problems) {\r\n          finalProblemArray.push(\r\n            new Problem(\r\n              problem.contestId,\r\n              problem.index,\r\n              problem.name,\r\n              problem.type,\r\n              problem.rating,\r\n              problem.tags,\r\n              problem.solvedCount\r\n            )\r\n          );\r\n        }\r\n\r\n        return dispatch(createDispatch(FETCH_PROBLEM_LIST, finalProblemArray));\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_PROBLEMS,\r\n            \"ERROR in PROBLEM LIST \" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        createDispatch(ERROR_FETCHING_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n      );\r\n    });\r\n};\r\n\r\nexport const fetchSharedProblemList = (dispatch) => {\r\n  if (jsonData != null) {\r\n    const result = jsonData;\r\n    if (result.status !== \"OK\")\r\n      return dispatch(\r\n        createDispatch(\r\n          ERROR_FETCHING_SHARED_PROBLEMS,\r\n          \"Error fetching shared problems\"\r\n        )\r\n      );\r\n    const res: ProblemShared[] = result.result as ProblemShared[];\r\n    return dispatch(createDispatch(FETCH_SHARED_PROBLEMS, res));\r\n    //\tconsole.log(result.result.length)\r\n  } else\r\n    return dispatch(\r\n      createDispatch(ERROR_FETCHING_SHARED_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n    );\r\n};\r\n\r\nexport const fetchContestList = (dispatch: AppDispatch) => {\r\n  dispatch(load(LOADING_CONTEST_LIST));\r\n  fetch(allContestURL)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(createDispatch(ERROR_FETCHING_CONTEST_LIST, \"Eroor\"));\r\n        let contests: Contest[] = result.result;\r\n\r\n        contests = contests.filter((contest) => contest.phase == FINISHED);\r\n\r\n        return dispatch({\r\n          type: FETCH_CONTEST_LIST,\r\n          payload: contests,\r\n        });\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_CONTEST_LIST,\r\n            \"FAiled to fethc contestList \" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        createDispatch(\r\n          ERROR_FETCHING_CONTEST_LIST,\r\n          \"FAiled to fethc contestList\"\r\n        )\r\n      );\r\n    });\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts",["150","151"],"import {\r\n  delay,\r\n  getUserInfoURL,\r\n  getUserSubmissionsURL,\r\n  stringToArray,\r\n} from \"../../util/bashforces\";\r\nimport Submission from \"../../util/DataTypes/Submission\";\r\nimport { AppDispatch } from \"../store\";\r\nimport { load, createDispatch } from \"./fetchActions\";\r\nimport {\r\n  ADD_USER,\r\n  CLEAR_USERS,\r\n  ERROR_FETCHING_USER,\r\n  LOADING_USERS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING_USER_SUBMISSIONS,\r\n  CLEAR_USERS_SUBMISSIONS,\r\n} from \"./types\";\r\n\r\nexport const clearUsers = (dispatch) =>\r\n  new Promise<void>((resolve, reject) => {\r\n    dispatch({\r\n      type: CLEAR_USERS,\r\n    });\r\n    resolve();\r\n  });\r\n\r\nexport const fetchUsers = (dispatch, handle: string) => {\r\n  dispatch(load(LOADING_USERS));\r\n  let currentId = Date.now();\r\n\r\n  let handleArray: string[] = stringToArray(handle, \",\");\r\n  handleArray = handleArray.filter((handle) => handle.length);\r\n\r\n  for (let handle of handleArray) {\r\n    if (handle.length === 0) continue;\r\n    dispatch({ type: ADD_USER, payload: { handle, id: currentId } });\r\n  }\r\n};\r\n\r\nexport const clearUsersSubmissions = (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_USERS_SUBMISSIONS,\r\n  });\r\n};\r\n\r\nexport const fetchUserSubmissions = async (\r\n  dispatch: AppDispatch,\r\n  handles: string[],\r\n  limit?: number\r\n) => {\r\n  let currentId = Date.now();\r\n  if (handles.length === 0) clearUsersSubmissions(dispatch);\r\n\r\n  await delay(1000);\r\n\r\n  for (let handle of handles) {\r\n    dispatch(load(LOADING_USER_SUBMISSIONS));\r\n\r\n    await delay(300);\r\n\r\n    fetch(getUserSubmissionsURL(handle, limit))\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.status !== \"OK\")\r\n            return dispatch(\r\n              createDispatch(\r\n                ERROR_FETCHING_USER_SUBMISSIONS,\r\n                \"Failed To fetch Submissions for User with handle \" + handle\r\n              )\r\n            );\r\n\r\n          let submissions: Submission[] = result.result;\r\n\r\n          submissions = submissions.filter(\r\n            (submission) => submission.contestId\r\n          );\r\n\r\n          return dispatch({\r\n            type: FETCH_USER_SUBMISSIONS,\r\n            payload: { result: submissions, id: currentId },\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          return dispatch(\r\n            createDispatch(\r\n              ERROR_FETCHING_USER_SUBMISSIONS,\r\n              \"Failed To fetch Submissions for User\" + handle\r\n            )\r\n          );\r\n        }\r\n      )\r\n      .catch((e) => {\r\n        // console.log(e);\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"Failed To fetch Submissions for User\" + handle\r\n          )\r\n        );\r\n      });\r\n  }\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts",["152","153","154","155"],"import { AppPayloadType } from \"../actions/fetchActions\";\r\nimport { AppReducerType, ErrorLog } from \"../actions/types\";\r\n\r\nexport class AppStateType {\r\n  errorLog: string[];\r\n  successLog: string[];\r\n  darkMode: boolean;\r\n  loaded: boolean;\r\n  contestPage: {\r\n    perPage: number;\r\n    showDate: boolean;\r\n  };\r\n  problemPage: {\r\n    perPage: number;\r\n    minRating: number;\r\n    maxRating: number;\r\n    showUnrated: boolean;\r\n  };\r\n\r\n  constructor() {\r\n    this.errorLog = new Array<string>();\r\n    this.successLog = new Array<string>();\r\n    this.darkMode = true;\r\n\r\n    this.loaded = false;\r\n\r\n    this.contestPage = { perPage: 100, showDate: false };\r\n    this.problemPage = {\r\n      perPage: 100,\r\n      minRating: -1,\r\n      maxRating: 4000,\r\n      showUnrated: true,\r\n    };\r\n  }\r\n\r\n  init = (data?: any) => {\r\n    if (data.darkMode != undefined) this.darkMode = data.darkMode;\r\n    if (data.contestPage) {\r\n      if (data.contestPage.perPage)\r\n        this.contestPage.perPage = data.contestPage.perPage;\r\n      if (data.contestPage.showDate != undefined)\r\n        this.contestPage.showDate = data.contestPage.showDate;\r\n    }\r\n\r\n    if (data.problemPage) {\r\n      if (data.problemPage.perPage)\r\n        this.problemPage.perPage = data.problemPage.perPage;\r\n      if (data.problemPage.minRating)\r\n        this.problemPage.minRating = data.problemPage.minRating;\r\n      if (data.problemPage.maxRating)\r\n        this.problemPage.maxRating = data.problemPage.maxRating;\r\n      if (data.problemPage.showUnrated != undefined)\r\n        this.problemPage.showUnrated = data.showUnrated;\r\n    }\r\n  };\r\n\r\n  clone = (): AppStateType => {\r\n    const cloned = new AppStateType();\r\n\r\n    cloned.errorLog = this.errorLog;\r\n    cloned.successLog = this.successLog;\r\n    cloned.darkMode = this.darkMode;\r\n    cloned.loaded = this.loaded;\r\n    cloned.contestPage = this.contestPage;\r\n    cloned.problemPage = this.problemPage;\r\n\r\n    return cloned;\r\n  };\r\n}\r\n\r\nconst initAppState: AppStateType = new AppStateType();\r\n\r\n// dispatch(CHANGE_PER_PAGE,payload: )\r\n\r\nexport const AppReducer = (\r\n  initState: AppStateType = initAppState,\r\n  action: AppPayloadType\r\n) => {\r\n  let curr = initState.clone();\r\n  switch (action.type) {\r\n    case AppReducerType.CLEAR_ERROR_LOG:\r\n      curr.errorLog = new Array<string>();\r\n      return curr;\r\n    case AppReducerType.TOGGLE_THEME:\r\n      curr.darkMode = !initState.darkMode;\r\n      return curr;\r\n    case AppReducerType.TOGGLE_DATE:\r\n      curr.contestPage.showDate = !initState.contestPage.showDate;\r\n      return curr;\r\n    case AppReducerType.APP_LOADED:\r\n      return { ...initState, loaded: true };\r\n    case AppReducerType.CHANGE_MAX_RATING:\r\n      curr.problemPage.maxRating = action.payload.data as number;\r\n      return curr;\r\n    case AppReducerType.CHANGE_MIN_RATING:\r\n      curr.problemPage.minRating = action.payload.data as number;\r\n      return curr;\r\n    case AppReducerType.CHANGE_PER_PAGE:\r\n      if (action.payload.isContest)\r\n        curr.contestPage.perPage = action.payload.data as number;\r\n      else curr.problemPage.perPage = action.payload.data as number;\r\n      return curr;\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Submission.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\DataTypes\\Problem.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\Comparator.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\lowerBound.ts",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"156","replacedBy":"160"},{"ruleId":"158","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":4,"column":10,"nodeType":"164","messageId":"165","endLine":4,"endColumn":21},{"ruleId":"162","severity":1,"message":"166","line":4,"column":23,"nodeType":"164","messageId":"165","endLine":4,"endColumn":34},{"ruleId":"162","severity":1,"message":"167","line":6,"column":3,"nodeType":"164","messageId":"165","endLine":6,"endColumn":19},{"ruleId":"162","severity":1,"message":"168","line":7,"column":3,"nodeType":"164","messageId":"165","endLine":7,"endColumn":19},{"ruleId":"162","severity":1,"message":"169","line":8,"column":3,"nodeType":"164","messageId":"165","endLine":8,"endColumn":25},{"ruleId":"162","severity":1,"message":"170","line":11,"column":10,"nodeType":"164","messageId":"165","endLine":11,"endColumn":30},{"ruleId":"162","severity":1,"message":"171","line":12,"column":10,"nodeType":"164","messageId":"165","endLine":12,"endColumn":19},{"ruleId":"162","severity":1,"message":"172","line":14,"column":10,"nodeType":"164","messageId":"165","endLine":14,"endColumn":23},{"ruleId":"162","severity":1,"message":"173","line":15,"column":10,"nodeType":"164","messageId":"165","endLine":15,"endColumn":17},{"ruleId":"174","severity":1,"message":"175","line":30,"column":6,"nodeType":"176","endLine":30,"endColumn":8,"suggestions":"177"},{"ruleId":"174","severity":1,"message":"178","line":34,"column":6,"nodeType":"176","endLine":34,"endColumn":22,"suggestions":"179"},{"ruleId":"180","severity":1,"message":"181","line":79,"column":13,"nodeType":"182","endLine":85,"endColumn":24},{"ruleId":"162","severity":1,"message":"183","line":60,"column":10,"nodeType":"164","messageId":"165","endLine":60,"endColumn":21},{"ruleId":"174","severity":1,"message":"184","line":131,"column":6,"nodeType":"176","endLine":131,"endColumn":26,"suggestions":"185"},{"ruleId":"162","severity":1,"message":"186","line":153,"column":9,"nodeType":"164","messageId":"165","endLine":153,"endColumn":19},{"ruleId":"187","severity":1,"message":"188","line":315,"column":37,"nodeType":"189","messageId":"190","endLine":315,"endColumn":39},{"ruleId":"187","severity":1,"message":"188","line":349,"column":54,"nodeType":"189","messageId":"190","endLine":349,"endColumn":56},{"ruleId":"187","severity":1,"message":"188","line":372,"column":54,"nodeType":"189","messageId":"190","endLine":372,"endColumn":56},{"ruleId":"162","severity":1,"message":"191","line":9,"column":18,"nodeType":"164","messageId":"165","endLine":9,"endColumn":27},{"ruleId":"162","severity":1,"message":"192","line":15,"column":8,"nodeType":"164","messageId":"165","endLine":15,"endColumn":18},{"ruleId":"162","severity":1,"message":"193","line":23,"column":8,"nodeType":"164","messageId":"165","endLine":23,"endColumn":15},{"ruleId":"174","severity":1,"message":"194","line":92,"column":6,"nodeType":"176","endLine":92,"endColumn":26,"suggestions":"195"},{"ruleId":"187","severity":1,"message":"188","line":272,"column":41,"nodeType":"189","messageId":"190","endLine":272,"endColumn":43},{"ruleId":"196","severity":1,"message":"197","line":32,"column":11,"nodeType":"182","endLine":36,"endColumn":68},{"ruleId":"187","severity":1,"message":"188","line":41,"column":27,"nodeType":"189","messageId":"190","endLine":41,"endColumn":29},{"ruleId":"187","severity":1,"message":"188","line":100,"column":25,"nodeType":"189","messageId":"190","endLine":100,"endColumn":27},{"ruleId":"162","severity":1,"message":"198","line":24,"column":8,"nodeType":"164","messageId":"165","endLine":24,"endColumn":15},{"ruleId":"162","severity":1,"message":"199","line":28,"column":10,"nodeType":"164","messageId":"165","endLine":28,"endColumn":18},{"ruleId":"162","severity":1,"message":"200","line":29,"column":10,"nodeType":"164","messageId":"165","endLine":29,"endColumn":24},{"ruleId":"187","severity":1,"message":"188","line":75,"column":12,"nodeType":"189","messageId":"190","endLine":75,"endColumn":14},{"ruleId":"187","severity":1,"message":"201","line":79,"column":14,"nodeType":"189","messageId":"190","endLine":79,"endColumn":16},{"ruleId":"162","severity":1,"message":"202","line":15,"column":10,"nodeType":"164","messageId":"165","endLine":15,"endColumn":16},{"ruleId":"162","severity":1,"message":"203","line":25,"column":7,"nodeType":"164","messageId":"165","endLine":25,"endColumn":24},{"ruleId":"187","severity":1,"message":"201","line":159,"column":63,"nodeType":"189","messageId":"190","endLine":159,"endColumn":65},{"ruleId":"162","severity":1,"message":"204","line":3,"column":3,"nodeType":"164","messageId":"165","endLine":3,"endColumn":17},{"ruleId":"162","severity":1,"message":"205","line":13,"column":3,"nodeType":"164","messageId":"165","endLine":13,"endColumn":22},{"ruleId":"162","severity":1,"message":"206","line":2,"column":26,"nodeType":"164","messageId":"165","endLine":2,"endColumn":34},{"ruleId":"187","severity":1,"message":"188","line":37,"column":23,"nodeType":"189","messageId":"190","endLine":37,"endColumn":25},{"ruleId":"187","severity":1,"message":"188","line":41,"column":37,"nodeType":"189","messageId":"190","endLine":41,"endColumn":39},{"ruleId":"187","severity":1,"message":"188","line":52,"column":40,"nodeType":"189","messageId":"190","endLine":52,"endColumn":42},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],["207"],["208"],"@typescript-eslint/no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'fetchContestList' is defined but never used.","'fetchProblemList' is defined but never used.","'fetchSharedProblemList' is defined but never used.","'fetchUserSubmissions' is defined but never used.","'RootState' is defined but never used.","'ProblemShared' is defined but never used.","'Verdict' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["209"],"React Hook useEffect has a missing dependency: 'sync'. Either include it or remove the dependency array.",["210"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'showUnrated' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filterProblem', 'history', and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.",["211"],"'searchData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setHandle' is assigned a value but never used.","'submitUser' is assigned a value but never used.","'Problem' is defined but never used.","React Hook useEffect has missing dependencies: 'contestList', 'filterContest', and 'history'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["212"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'Contest' is defined but never used.","'cursorTo' is defined but never used.","'AppReducerType' is defined but never used.","Expected '===' and instead saw '=='.","'result' is defined but never used.","'sharedProblemsURL' is assigned a value but never used.","'getUserInfoURL' is defined but never used.","'ERROR_FETCHING_USER' is defined but never used.","'ErrorLog' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},"Update the dependencies array to be: [dispatch]",{"range":"221","text":"222"},"Update the dependencies array to be: [state.userList, sync]",{"range":"223","text":"224"},"Update the dependencies array to be: [state, filterState, history, problemList, filterProblem]",{"range":"225","text":"226"},"Update the dependencies array to be: [state, filterState, history, contestList, filterContest]",{"range":"227","text":"228"},[1157,1159],"[dispatch]",[1204,1220],"[state.userList, sync]",[4463,4483],"[state, filterState, history, problemList, filterProblem]",[2905,2925],"[state, filterState, history, contestList, filterContest]"]